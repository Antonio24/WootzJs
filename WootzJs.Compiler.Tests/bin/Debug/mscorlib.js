"use strict";
var $assemblies = [];
var $mscorlib$Assembly = null;
var $mscorlib$AssemblyTypes = [];
window.$mscorlib$GetAssembly = function() {
    if ($mscorlib$Assembly == null)
        $mscorlib$Assembly = System.Reflection.Assembly.prototype.$ctor.$new("mscorlib", $mscorlib$AssemblyTypes);
    return $mscorlib$Assembly;
};
$assemblies.push(window.$mscorlib$GetAssembly);
window.System = {};
System.CodeDom = {};
System.CodeDom.Compiler = {};
System.Collections = {};
System.Collections.Generic = {};
System.Globalization = {};
System.Linq = {};
System.Linq.Expressions = {};
window.Microsoft = {};
Microsoft.CSharp = {};
Microsoft.CSharp.RuntimeBinder = {};
System.Reflection = {};
System.Runtime = {};
System.Runtime.CompilerServices = {};
System.Runtime.InteropServices = {};
System.Runtime.Versioning = {};
System.Runtime.WootzJs = {};
System.Text = {};
function $define(name) {
    var typeFunction = null;
    typeFunction = function(constructor) {
        if (!typeFunction.$isStaticInitialized && (constructor != null || !((this instanceof typeFunction)))) {
            typeFunction.$isStaticInitialized = true;
            typeFunction.$StaticInitializer();
        }
        if (constructor != null)
            constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof typeFunction))
            return typeFunction;
        else
            return this;
    };
    typeFunction.toString = function() {
        return name;
    };
    return typeFunction;
}
function $cast(T, o) {
    var type = o.GetType();
    if (!T.$GetType().IsAssignableFrom(type))
        throw System.InvalidCastException.prototype.$ctor.$new("Cannot cast object of type " + o.GetType().get_FullName() + " to type " + T.$GetType().get_FullName()).InternalInit(new Error());
    return o;
}
function $delegate(thisExpression, delegateType, lambda) {
    var delegateFunc = null;
    delegateFunc = function() {
        return lambda.apply(delegateFunc.get_Target(), arguments);
    };
    delegateFunc.prototype = new delegateType();
    System.Object.$TypeInitializer(delegateFunc, delegateFunc);
    System.Delegate.$TypeInitializer(delegateFunc, delegateFunc);
    System.MulticastDelegate.$TypeInitializer(delegateFunc, delegateFunc);
    delegateType.$TypeInitializer(delegateFunc, delegateFunc);
    System.MulticastDelegate.prototype.$ctor.call(delegateFunc, thisExpression, [delegateFunc]);
    return delegateFunc;
}
System.Object = $define("object");
System.Object.prototype = new Object();
(System.Object.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Object;
    $t.$baseType = Object;
    $p.$typeName = "System.Object";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Object", []);this.$type.Init("System.Object", System.Object, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Object.prototype.GetType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Object.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToLocaleString", System.Object.prototype.ToLocaleString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Object.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Object.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetStringHashCode", System.Object.prototype.GetStringHashCode, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ReferenceEquals", System.Object.prototype.ReferenceEquals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("o1", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("o2", System.Object, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeArrayType", System.Object.prototype.MakeArrayType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeArrayType$2", System.Object.prototype.MakeArrayType$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("rank", System.Int32, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("$$MakeArrayType", System.Object.prototype.$$MakeArrayType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", Function, 0, 0, null, [])], Function, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("$$MakeArrayType");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("$$InitializeArray", System.Object.prototype.$$InitializeArray, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", Function, 1, 0, null, [])], Array, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("$$InitializeArray");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("$$MakeGenericType", System.Object.prototype.$$MakeGenericType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("unconstructedType", Function, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeArgs", Array, 1, 0, null, [])], Function, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("$$MakeGenericType");return $obj$;}).call(this)])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Object.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetType = function() {
        return System.Type._GetTypeFromInstance(this);
    };
    $p.ToString = function() {
        return this.toString();
    };
    $p.ToLocaleString = function() {
        return null;
    };
    $p.Equals = function(obj) {
        return this == obj;
    };
    $p.GetHashCode = function() {
        return this.GetStringHashCode().GetHashCode();
    };
    $p.GetStringHashCode = function() {
        return this.toString();
    };
    $t.ReferenceEquals = function(o1, o2) {
        return true;
    };
    $p.MakeArrayType = function() {
        return this.MakeArrayType$2(1);
    };
    $p.MakeArrayType$2 = function(rank) {
        if (rank > 1)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Rank must be 1").InternalInit(new Error());
        return System.Type._GetTypeFromTypeFunc(System.Object.$$MakeArrayType(this.$type));
    };
    $t.$$MakeArrayType = function(elementType) {
        if (elementType.$arrayType == null) {
            var arrayType = function() {
            };
            arrayType.prototype = new Array();
            System.Object.$TypeInitializer.apply(this, [arrayType, arrayType.prototype]);
            Array.$TypeInitializer.apply(this, [arrayType, arrayType.prototype].concat(elementType));
            arrayType.$TypeInitializer = function($t, $p) {
                $p.$type = arrayType;
                $t.$baseType = Array;
                $t.$GetType = function() {
                    return System.Type._GetTypeFromTypeFunc(this);
                };
                $t.$CreateType = function() {
                    var lastIndex = elementType.$typeName.lastIndexOf(".");
                    if (lastIndex == -1)
                        lastIndex = 0;
                    else
                        lastIndex++;
                    var type = System.Type.prototype.$ctor.$new(String.prototype.Substring.call(elementType.$typeName, lastIndex, 0) + "[]", new Array(0));
                    arrayType.$type = type;
                    type.Init(
                        elementType.$typeName + "[]", 
                        elementType, 
                        Array, 
                        System.Linq.Enumerable.ToArray(Function, System.Linq.Enumerable.Concat(Function, Array.$GetType().interfaces, System.Object.$$InitializeArray([System.Object.$$MakeGenericType(System.Collections.Generic.IEnumerable$1, [elementType])], Function))), 
                        new Array(0), 
                        new Array(0), 
                        new Array(0), 
                        new Array(0), 
                        new Array(0), 
                        false, 
                        elementType
                    );
                    return type;
                };
            };
            arrayType.$TypeInitializer.call(this, arrayType, arrayType.prototype);
            var result = arrayType;
            elementType.$arrayType = result;
        }
        return elementType.$arrayType;
    };
    $t.$$InitializeArray = function(array, elementType) {
        var arrayType = System.Object.$$MakeArrayType(elementType);
        {
            for (var property in arrayType.prototype) {
                array[property] = arrayType.prototype[property];
            }
        }
        arrayType.prototype.$ctor.call(array);
        return array;
    };
    $t.$$MakeGenericType = function(unconstructedType, typeArgs) {
        var cache = unconstructedType.$typecache;
        if (cache == null) {
            cache = new Object();
            unconstructedType.$typecache = cache;
        }
        var keyArray = Array.prototype.slice.call(typeArgs, 0);
        var keyParts = new Array();
        for (var i = 0; i < keyArray.length; i++) {
            keyParts[i] = keyArray[i].prototype.$typeName;
        }
        var keyString = keyParts.join();
        var result = cache[keyString];
        if (result == null) {
            var generic = function(constructor) {
                if (constructor != null)
                    constructor.apply(this, Array.prototype.slice.call(arguments, 1));
            };
            generic.prototype = new unconstructedType();
            unconstructedType.$TypeInitializer.apply(this, [generic, generic.prototype].concat(keyArray));
            generic.$TypeInitializer = function($t, $p) {
                $p.$type = generic;
                $t.$baseType = unconstructedType;
                $t.$GetType = function() {
                    return System.Type._GetTypeFromTypeFunc(this);
                };
            };
            generic.$TypeInitializer.call(this, generic, generic.prototype);
            result = generic;
            cache[keyString] = result;
        }
        return result;
    };
}).call(null, System.Object, System.Object.prototype);
$mscorlib$AssemblyTypes.push(System.Object);
System.Delegate = $define("System.Delegate");
System.Delegate.prototype = new System.Object();
(System.Delegate.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Delegate;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Delegate";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Delegate", []);this.$type.Init("System.Delegate", System.Delegate, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", System.Delegate, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("target", System.Object, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Target", System.Delegate.prototype.get_Target, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Combine", System.Delegate.prototype.Combine, [System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Delegate, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("b", System.Delegate, 1, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Delegate.prototype.Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Delegate, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 1, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateExport", System.Delegate.prototype.CreateExport, [System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Delegate, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateExport$1", System.Delegate.prototype.CreateExport$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Delegate, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("multiUse", System.Boolean, 1, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateExport$2", System.Delegate.prototype.CreateExport$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Delegate, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("multiUse", System.Boolean, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 2, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("DeleteExport", System.Delegate.prototype.DeleteExport, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Delegate.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Target", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Target", System.Delegate.prototype.get_Target, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.Empty = null;
    $p.target = null;
    $p.jsFunction = null;
    $p.$ctor = function(target) {
        System.Object.prototype.$ctor.call(this);
        this.target = target;
        this.jsFunction = this;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(target) {
        return new $p.$ctor.$type(this, target);
    };
    $p.get_Target = function() {
        return this.target;
    };
    $t.Combine = function(a, b) {
        if (a == null)
            return b;
        else
            if (b == null)
                return a;
            else
                if (System.MulticastDelegate.$GetType().IsInstanceOfType(a))
                    return System.MulticastDelegate.prototype.Add.call(($cast(System.MulticastDelegate, a)), b);
                else
                    return (function() {
                        var $invocationList = System.Object.$$InitializeArray([a, b], System.Delegate);
                        var $delegate$ = function() {
                            for (var $i = 0; $i < $invocationList.length; $i++)
                                $invocationList[$i](arguments);
                        };
                        $delegate$.prototype = new System.MulticastDelegate();
                        System.Object.$TypeInitializer($delegate$, $delegate$);
                        System.Delegate.$TypeInitializer($delegate$, $delegate$);
                        System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
                        System.Object.$$InitializeArray([a, b], System.Delegate)[0].$type.$TypeInitializer($delegate$, $delegate$);
                        System.MulticastDelegate.prototype.$ctor.call($delegate$, a.get_Target(), $invocationList);
                        return $delegate$;
                    }).call(this);
    };
    $t.Remove = function(source, value) {
        if (source == value || source == null)
            return null;
        else {
            var multicast = (function() {
                var $as$ = source;
                if (!System.Type.prototype.IsInstanceOfType.call(System.MulticastDelegate.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (multicast != null) {
                return System.MulticastDelegate.prototype.Remove$1.call(multicast, value);
            }
            else {
                return source;
            }
        }
    };
    $t.CreateExport = function(d) {
        return null;
    };
    $t.CreateExport$1 = function(d, multiUse) {
        return null;
    };
    $t.CreateExport$2 = function(d, multiUse, name) {
        return null;
    };
    $t.DeleteExport = function(name) {
    };
}).call(null, System.Delegate, System.Delegate.prototype);
$mscorlib$AssemblyTypes.push(System.Delegate);
System.ValueType = $define("System.ValueType");
System.ValueType.prototype = new System.Object();
(System.ValueType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.ValueType;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ValueType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ValueType", []);this.$type.Init("System.ValueType", System.ValueType, System.Object, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ValueType.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.ValueType, System.ValueType.prototype);
$mscorlib$AssemblyTypes.push(System.ValueType);
System.Reflection.MemberInfo = $define("System.Reflection.MemberInfo");
System.Reflection.MemberInfo.prototype = new System.Object();
(System.Reflection.MemberInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.MemberInfo;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.MemberInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberInfo", []);this.$type.Init("System.Reflection.MemberInfo", System.Reflection.MemberInfo, System.Object, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("declaringType", System.Type, System.Reflection.FieldAttributes().Assembly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MemberInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.MemberInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DeclaringType", System.Reflection.MemberInfo.prototype.get_DeclaringType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.MemberInfo.prototype.GetCustomAttributes, [System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes$1", System.Reflection.MemberInfo.prototype.GetCustomAttributes$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.MemberInfo.prototype.IsDefined, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MemberInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 1, 0, null, [])], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MemberInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.MemberInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("DeclaringType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DeclaringType", System.Reflection.MemberInfo.prototype.get_DeclaringType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.name = null;
    $p.attributes = null;
    $p.declaringType = null;
    $p.$ctor = function(name, attributes) {
        System.Object.prototype.$ctor.call(this);
        this.name = name;
        this.attributes = attributes;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, attributes) {
        return new $p.$ctor.$type(this, name, attributes);
    };
    $p.get_MemberType = function() {
    };
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_DeclaringType = function() {
        return this.declaringType;
    };
    $p.GetCustomAttributes = function(inherit) {
        return System.Linq.Enumerable.ToArray(System.Attribute, this.attributes);
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Where(System.Object, this.GetCustomAttributes(inherit), (function(attributeType$closed) {
            return $delegate(this, (System.Func$2$(System.Object, System.Boolean)), function(x) {
                return attributeType$closed.IsInstanceOfType(x);
            });
        }).call(this, attributeType)));
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        return System.Linq.Enumerable.Any$1(System.Object, this.GetCustomAttributes(inherit), (function(attributeType$closed) {
            return $delegate(this, (System.Func$2$(System.Object, System.Boolean)), function(x) {
                return attributeType$closed.IsInstanceOfType(x);
            });
        }).call(this, attributeType));
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
}).call(null, System.Reflection.MemberInfo, System.Reflection.MemberInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MemberInfo);
System.MulticastDelegate = $define("System.MulticastDelegate");
System.MulticastDelegate.prototype = new System.Delegate();
(System.MulticastDelegate.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.MulticastDelegate;
    $t.$baseType = System.Delegate;
    $p.$typeName = "System.MulticastDelegate";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MulticastDelegate", []);this.$type.Init("System.MulticastDelegate", System.MulticastDelegate, System.Delegate, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("invocationList", System.Object.$$MakeArrayType(System.Delegate), System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.MulticastDelegate.prototype.GetType, [], System.Type, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.MulticastDelegate.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 0, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove$1", System.MulticastDelegate.prototype.Remove$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 0, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.MulticastDelegate.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invocationList", System.Object.$$MakeArrayType(System.Delegate), 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.invocationList = null;
    $p.$ctor = function(target, invocationList) {
        System.Delegate.prototype.$ctor.call(this, target);
        this.invocationList = invocationList;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(target, invocationList) {
        return new $p.$ctor.$type(this, target, invocationList);
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.Add = function(value) {
        var constructor = this.GetType().GetConstructors()[0];
        var toAdd = System.Object.$$InitializeArray([value], System.Delegate);
        var newInvocationList = this.invocationList == null ? toAdd : System.Linq.Enumerable.ToArray(System.Delegate, System.Linq.Enumerable.Concat(System.Delegate, this.invocationList, toAdd));
        return (function() {
            var $invocationList = newInvocationList;
            var $delegate$ = function() {
                for (var $i = 0; $i < $invocationList.length; $i++)
                    $invocationList[$i](arguments);
            };
            $delegate$.prototype = new System.MulticastDelegate();
            System.Object.$TypeInitializer($delegate$, $delegate$);
            System.Delegate.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
            newInvocationList[0].$type.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.prototype.$ctor.call($delegate$, this.get_Target(), $invocationList);
            return $delegate$;
        }).call(this);
    };
    $p.Remove$1 = function(value) {
        var constructor = this.GetType().GetConstructors()[0];
        var newInvocationList = System.Linq.Enumerable.ToArray(System.Delegate, System.Linq.Enumerable.Except(System.Delegate, this.invocationList, System.Object.$$InitializeArray([value], System.Delegate)));
        return (function() {
            var $invocationList = newInvocationList;
            var $delegate$ = function() {
                for (var $i = 0; $i < $invocationList.length; $i++)
                    $invocationList[$i](arguments);
            };
            $delegate$.prototype = new System.MulticastDelegate();
            System.Object.$TypeInitializer($delegate$, $delegate$);
            System.Delegate.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
            newInvocationList[0].$type.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.prototype.$ctor.call($delegate$, this.get_Target(), $invocationList);
            return $delegate$;
        }).call(this);
    };
}).call(null, System.MulticastDelegate, System.MulticastDelegate.prototype);
$mscorlib$AssemblyTypes.push(System.MulticastDelegate);
System.Exception = $define("System.Exception");
System.Exception.prototype = new System.Object();
(System.Exception.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Exception;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Exception";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Exception", []);this.$type.Init("System.Exception", System.Exception, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$InnerException$k__BackingField", System.Exception, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("message", String, System.Reflection.FieldAttributes().Private, null, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("message");return $obj$;}).call(this)]), System.Reflection.FieldInfo.prototype.$ctor.$new("_message", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("stacktrace", String, System.Reflection.FieldAttributes().Private, null, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("stacktrace");return $obj$;}).call(this)])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_InnerException", System.Exception.prototype.get_InnerException, [], System.Exception, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InnerException", System.Exception.prototype.set_InnerException, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Exception, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("InternalInit", System.Exception.prototype.InternalInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("error", Error, 0, 0, null, [])], System.Exception, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Message", System.Exception.prototype.get_Message, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Message", System.Exception.prototype.set_Message, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_StackTrace", System.Exception.prototype.get_StackTrace, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("toString", System.Exception.prototype.toString, [], String, System.Reflection.MethodAttributes().Private, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("toString");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Exception.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Exception.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Exception.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Exception.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Exception.prototype.$ctor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("InnerException", System.Exception, System.Reflection.MethodInfo.prototype.$ctor.$new("get_InnerException", System.Exception.prototype.get_InnerException, [], System.Exception, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InnerException", System.Exception.prototype.set_InnerException, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Exception, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Message", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Message", System.Exception.prototype.get_Message, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Message", System.Exception.prototype.set_Message, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("StackTrace", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_StackTrace", System.Exception.prototype.get_StackTrace, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Exception.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), null, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, [])], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$InnerException$k__BackingField = null;
    $p.get_InnerException = function() {
        return this.$InnerException$k__BackingField;
    };
    $p.set_InnerException = function(value) {
        this.$InnerException$k__BackingField = value;
    };
    $p.message = null;
    $p._message = null;
    $p.stacktrace = null;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor.call(this);
        this.set_Message(message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Object.prototype.$ctor.call(this);
        this.set_Message(message);
        this.set_InnerException(innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
    $p.InternalInit = function(error) {
        this.stacktrace = error.stack;
        this.message = this.toString();
        return this;
    };
    $p.get_Message = function() {
        return this._message;
    };
    $p.set_Message = function(value) {
        this._message = value;
    };
    $p.get_StackTrace = function() {
        return this.stacktrace;
    };
    $p.toString = function() {
        return this.ToString();
    };
    $p.get_Item = function(key) {
        return null;
    };
    $p.ToString = function() {
        var builder = System.Text.StringBuilder.prototype.$ctor.$new();
        builder.Append$2(this.GetType().get_FullName());
        if (this.get_Message() != null)
            builder.AppendLine$2(": " + this.get_Message());
        else
            builder.AppendLine();
        builder.AppendLine$2(this.get_StackTrace());
        return builder.ToString();
    };
}).call(null, System.Exception, System.Exception.prototype);
$mscorlib$AssemblyTypes.push(System.Exception);
System.Enum = $define("System.Enum");
System.Enum.prototype = new System.ValueType();
(System.Enum.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Enum;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Enum";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Enum", []);this.$type.Init("System.Enum", System.Enum, System.ValueType, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("value", System.Object, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("enumsByTypeAndName", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().Static, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("enumsByTypeAndValue", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().Static, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Enum.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Enum.prototype.GetValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Enum.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Enum.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToObject", System.Enum.prototype.ToObject, [System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("InternalToObject", System.Enum.prototype.InternalToObject, [System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", Function, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Enum.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Enum.enumsByTypeAndName = (System.Collections.Generic.Dictionary$2$(String, (System.Collections.Generic.Dictionary$2$(String, System.Enum)))).prototype.$ctor.$new();
        System.Enum.enumsByTypeAndValue = (System.Collections.Generic.Dictionary$2$(String, (System.Collections.Generic.Dictionary$2$(System.Object, System.Enum)))).prototype.$ctor.$new();
    };
    $p.name = null;
    $p.value = null;
    $p.enumsByTypeAndName = null;
    $p.enumsByTypeAndValue = null;
    $p.$ctor = function(name, value) {
        System.ValueType.prototype.$ctor.call(this);
        this.name = name;
        this.value = value;
        var enumsByName;
        if (!(function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = System.Enum().enumsByTypeAndName.TryGetValue(this.$type.$typeName, $anon$1);
            enumsByName = $anon$1.value;
            return $result$;
        }).call(this)) {
            enumsByName = (System.Collections.Generic.Dictionary$2$(String, System.Enum)).prototype.$ctor.$new();
            System.Enum().enumsByTypeAndName.set_Item(this.$type.$typeName, enumsByName);
        }
        enumsByName.set_Item(name, this);
        var enumsByValue;
        if (!(function() {
            var $anon$2 = {
                value: null
            };
            var $result$ = System.Enum().enumsByTypeAndValue.TryGetValue(this.$type.$typeName, $anon$2);
            enumsByValue = $anon$2.value;
            return $result$;
        }).call(this)) {
            enumsByValue = (System.Collections.Generic.Dictionary$2$(System.Object, System.Enum)).prototype.$ctor.$new();
            System.Enum().enumsByTypeAndValue.set_Item(this.$type.$typeName, enumsByValue);
        }
        enumsByValue.set_Item(value, this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
    $p.GetValue = function() {
        return this.value;
    };
    $p.ToString = function() {
        return this.name;
    };
    $t.Parse = function(enumType, value) {
        return System.Enum().enumsByTypeAndName.get_Item(enumType.thisType.$typeName).get_Item(value);
    };
    $t.ToObject = function(enumType, value) {
        return System.Enum().enumsByTypeAndValue.get_Item(enumType.thisType.$typeName).get_Item(value);
    };
    $t.InternalToObject = function(enumType, value) {
        return System.Enum().enumsByTypeAndValue.get_Item(enumType.$typeName).get_Item(value);
    };
}).call(null, System.Enum, System.Enum.prototype);
$mscorlib$AssemblyTypes.push(System.Enum);
System.YieldIterator$1 = $define("System.YieldIterator<T>");
System.YieldIterator$1.prototype = new System.Object();
(System.YieldIterator$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.YieldIterator$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.YieldIterator`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldIterator", []);this.$type.Init("System.YieldIterator`1", System.YieldIterator$1, System.Object, [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Current$k__BackingField", T, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.YieldIterator$1.prototype.get_Current, [], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Current", System.YieldIterator$1.prototype.set_Current, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.YieldIterator$1.prototype.GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.YieldIterator$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.YieldIterator$1.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.YieldIterator$1.prototype.Dispose, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.YieldIterator$1.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.YieldIterator$1.prototype.Reset, [], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.YieldIterator$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.YieldIterator$1.prototype.get_Current, [], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Current", System.YieldIterator$1.prototype.set_Current, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Family, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.YieldIterator$1.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.YieldIterator$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.YieldIterator$1, arguments);
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$Current$k__BackingField = null;
    $p.get_Current = function() {
        return this.$Current$k__BackingField;
    };
    $p.set_Current = function(value) {
        this.$Current$k__BackingField = value;
    };
    $p.GetEnumerator = function() {
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.MoveNext = function() {
    };
    $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.Dispose = function() {
    };
    $p.System$IDisposable$Dispose = $p.Dispose;
    $p.get_System$Collections$IEnumerator$Current = function() {
        return this.get_Current();
    };
    $p.Reset = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerator$Reset = $p.Reset;
}).call(null, System.YieldIterator$1, System.YieldIterator$1.prototype);
$mscorlib$AssemblyTypes.push(System.YieldIterator$1);
System.Linq.Expressions.Expression = $define("System.Linq.Expressions.Expression");
System.Linq.Expressions.Expression.prototype = new System.Object();
(System.Linq.Expressions.Expression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.Expression;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.Expression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Expression", []);this.$type.Init("System.Linq.Expressions.Expression", System.Linq.Expressions.Expression, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$NodeType$k__BackingField", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_NodeType", System.Linq.Expressions.Expression.prototype.get_NodeType, [], System.Linq.Expressions.ExpressionType, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NodeType", System.Linq.Expressions.Expression.prototype.set_NodeType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.ExpressionType, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.Expression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.Expression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.Expression.prototype.Lambda, [System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Linq.Expressions.ParameterExpression), 1, 0, null, [])], System.Linq.Expressions.Expression$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda$1", System.Linq.Expressions.Expression.prototype.Lambda$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Linq.Expressions.ParameterExpression), 3, 0, null, [])], System.Linq.Expressions.Expression$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$6", System.Linq.Expressions.Expression.prototype.Property$6, [System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 2, 0, null, [])], System.Linq.Expressions.IndexExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$4", System.Linq.Expressions.Expression.prototype.Property$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 2, 0, null, [])], System.Linq.Expressions.IndexExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$3", System.Linq.Expressions.Expression.prototype.Property$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 2, 0, null, [])], System.Linq.Expressions.IndexExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$2", System.Linq.Expressions.Expression.prototype.Property$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$5", System.Linq.Expressions.Expression.prototype.Property$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 2, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property$1", System.Linq.Expressions.Expression.prototype.Property$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("property", System.Reflection.PropertyInfo, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyAccessor", System.Reflection.MethodInfo, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("PropertyOrField", System.Linq.Expressions.Expression.prototype.PropertyOrField, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyOrFieldName", String, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parameter", System.Linq.Expressions.Expression.prototype.Parameter, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Linq.Expressions.ParameterExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Variable", System.Linq.Expressions.Expression.prototype.Variable, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Linq.Expressions.ParameterExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Variable$1", System.Linq.Expressions.Expression.prototype.Variable$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, [])], System.Linq.Expressions.ParameterExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parameter$1", System.Linq.Expressions.Expression.prototype.Parameter$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, [])], System.Linq.Expressions.ParameterExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeMemberAccess", System.Linq.Expressions.Expression.prototype.MakeMemberAccess, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Call$1", System.Linq.Expressions.Expression.prototype.Call$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 2, 0, null, [])], System.Linq.Expressions.MethodCallExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Call", System.Linq.Expressions.Expression.prototype.Call, [System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.MethodCallExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Constant", System.Linq.Expressions.Expression.prototype.Constant, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Linq.Expressions.ConstantExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Constant$1", System.Linq.Expressions.Expression.prototype.Constant$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, [])], System.Linq.Expressions.ConstantExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeBinary$1", System.Linq.Expressions.Expression.prototype.MakeBinary$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("liftToNull", System.Boolean, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 4, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeBinary", System.Linq.Expressions.Expression.prototype.MakeBinary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("binaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeUnary", System.Linq.Expressions.Expression.prototype.MakeUnary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("unaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 2, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeUnary$1", System.Linq.Expressions.Expression.prototype.MakeUnary$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("unaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 3, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("New$1", System.Linq.Expressions.Expression.prototype.New$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("New", System.Linq.Expressions.Expression.prototype.New, [System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, [])], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("New$3", System.Linq.Expressions.Expression.prototype.New$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("New$2", System.Linq.Expressions.Expression.prototype.New$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Bind", System.Linq.Expressions.Expression.prototype.Bind, [System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, [])], System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Bind$1", System.Linq.Expressions.Expression.prototype.Bind$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyAccessor", System.Reflection.MethodInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, [])], System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MemberInit$1", System.Linq.Expressions.Expression.prototype.MemberInit$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Object.$$MakeArrayType(System.Linq.Expressions.MemberBinding), 1, 0, null, [])], System.Linq.Expressions.MemberInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MemberInit", System.Linq.Expressions.Expression.prototype.MemberInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.MemberInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Linq.Expressions.Expression.prototype.GetProperty, [System.Reflection.ParameterInfo.prototype.$ctor.$new("mi", System.Reflection.MethodInfo, 0, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit$3", System.Linq.Expressions.Expression.prototype.ListInit$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit$1", System.Linq.Expressions.Expression.prototype.ListInit$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit$5", System.Linq.Expressions.Expression.prototype.ListInit$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 2, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit$4", System.Linq.Expressions.Expression.prototype.ListInit$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1, 2, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit$2", System.Linq.Expressions.Expression.prototype.ListInit$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Object.$$MakeArrayType(System.Linq.Expressions.ElementInit), 1, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ElementInit$1", System.Linq.Expressions.Expression.prototype.ElementInit$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ElementInit", System.Linq.Expressions.Expression.prototype.ElementInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayInit$1", System.Linq.Expressions.Expression.prototype.NewArrayInit$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.NewArrayExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayInit", System.Linq.Expressions.Expression.prototype.NewArrayInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.NewArrayExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayBounds$1", System.Linq.Expressions.Expression.prototype.NewArrayBounds$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bounds", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.NewArrayExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayBounds", System.Linq.Expressions.Expression.prototype.NewArrayBounds, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bounds", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.NewArrayExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("TypeAs", System.Linq.Expressions.Expression.prototype.TypeAs, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("TypeIs", System.Linq.Expressions.Expression.prototype.TypeIs, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, [])], System.Linq.Expressions.TypeBinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Default", System.Linq.Expressions.Expression.prototype.Default, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Linq.Expressions.DefaultExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeIndex", System.Linq.Expressions.Expression.prototype.MakeIndex, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 2, 0, null, [])], System.Linq.Expressions.IndexExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex$2", System.Linq.Expressions.Expression.prototype.ArrayIndex$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexes", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.MethodCallExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.Expression.prototype.ArrayIndex, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexes", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.MethodCallExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex$1", System.Linq.Expressions.Expression.prototype.ArrayIndex$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Linq.Expressions.Expression, 1, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Condition", System.Linq.Expressions.Expression.prototype.Condition, [System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, [])], System.Linq.Expressions.ConditionalExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Condition$1", System.Linq.Expressions.Expression.prototype.Condition$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, [])], System.Linq.Expressions.ConditionalExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$1", System.Linq.Expressions.Expression.prototype.Invoke$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.InvocationExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Linq.Expressions.Expression.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Linq.Expressions.InvocationExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Field", System.Linq.Expressions.Expression.prototype.Field, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("field", System.Reflection.FieldInfo, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Field$1", System.Linq.Expressions.Expression.prototype.Field$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldName", String, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Field$2", System.Linq.Expressions.Expression.prototype.Field$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldName", String, 2, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Convert", System.Linq.Expressions.Expression.prototype.Convert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Convert$1", System.Linq.Expressions.Expression.prototype.Convert$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Linq.Expressions.Expression.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add$1", System.Linq.Expressions.Expression.prototype.Add$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.Expression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, [])], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("NodeType", System.Linq.Expressions.ExpressionType, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NodeType", System.Linq.Expressions.Expression.prototype.get_NodeType, [], System.Linq.Expressions.ExpressionType, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NodeType", System.Linq.Expressions.Expression.prototype.set_NodeType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.ExpressionType, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.Expression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$NodeType$k__BackingField = null;
    $p.get_NodeType = function() {
        return this.$NodeType$k__BackingField;
    };
    $p.set_NodeType = function(value) {
        this.$NodeType$k__BackingField = value;
    };
    $p.Accept = function(visitor) {
    };
    $p.get_Type = function() {
    };
    $p.$ctor = function(nodeType) {
        System.Object.prototype.$ctor.call(this);
        this.set_NodeType(nodeType);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType) {
        return new $p.$ctor.$type(this, nodeType);
    };
    $t.Lambda = function(TDelegate, body, parameters) {
        return System.Linq.Expressions.Expression.Lambda$1(
            TDelegate, 
            body, 
            null, 
            false, 
            parameters
        );
    };
    $t.Lambda$1 = function(TDelegate, body, name, tailCall, parameters) {
        return (System.Linq.Expressions.Expression$1$(TDelegate)).prototype.$ctor.$new(
            body, 
            name, 
            tailCall, 
            parameters
        );
    };
    $t.Property$6 = function(instance, propertyName, args) {
        return System.Linq.Expressions.Expression.Property$4(instance, null, args);
    };
    $t.Property$4 = function(instance, indexer, args) {
        return System.Linq.Expressions.Expression.Property$3(instance, indexer, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), args));
    };
    $t.Property$3 = function(instance, indexer, args) {
        return System.Linq.Expressions.IndexExpression.prototype.$ctor.$new(
            instance, 
            indexer, 
            null, 
            System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args)
        );
    };
    $t.Property$2 = function(expression, propertyName) {
        var property = expression.GetType().GetProperty(propertyName);
        return System.Linq.Expressions.Expression.Property$1(expression, property);
    };
    $t.Property$5 = function(expression, type, propertyName) {
        var property = type.GetProperty(propertyName);
        return System.Linq.Expressions.Expression.Property$1(expression, property);
    };
    $t.Property$1 = function(expression, property) {
        return System.Linq.Expressions.MemberExpression.Make(expression, property);
    };
    $t.Property = function(expression, propertyAccessor) {
        return System.Linq.Expressions.Expression.Property$1(expression, System.Linq.Expressions.Expression.GetProperty(propertyAccessor));
    };
    $t.PropertyOrField = function(expression, propertyOrFieldName) {
        var property1 = expression.get_Type().GetProperty$1(propertyOrFieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().FlattenHierarchy);
        if (property1 != null)
            return System.Linq.Expressions.Expression.Property$1(expression, property1);
        var field1 = expression.get_Type().GetField$1(propertyOrFieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field1 != null)
            return System.Linq.Expressions.Expression.Field(expression, field1);
        var property2 = expression.get_Type().GetProperty$1(propertyOrFieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().NonPublic | System.Reflection.BindingFlags().FlattenHierarchy);
        if (property2 != null)
            return System.Linq.Expressions.Expression.Property$1(expression, property2);
        var field2 = expression.get_Type().GetField$1(propertyOrFieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().NonPublic | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field2 != null)
            return System.Linq.Expressions.Expression.Field(expression, field2);
        else
            throw System.Exception.prototype.$ctor$1.$new("Not found: " + propertyOrFieldName).InternalInit(new Error());
    };
    $t.Parameter = function(type) {
        return System.Linq.Expressions.Expression.Parameter$1(type, null);
    };
    $t.Variable = function(type) {
        return System.Linq.Expressions.Expression.Variable$1(type, null);
    };
    $t.Variable$1 = function(type, name) {
        return System.Linq.Expressions.ParameterExpression.prototype.$ctor.$new(type, name);
    };
    $t.Parameter$1 = function(type, name) {
        return System.Linq.Expressions.ParameterExpression.prototype.$ctor.$new(type, name);
    };
    $t.MakeMemberAccess = function(target, member) {
        if (System.Reflection.FieldInfo.$GetType().IsInstanceOfType(member))
            return System.Linq.Expressions.FieldExpression.prototype.$ctor.$new(target, $cast(System.Reflection.FieldInfo, member));
        else
            if (System.Reflection.PropertyInfo.$GetType().IsInstanceOfType(member))
                return System.Linq.Expressions.PropertyExpression.prototype.$ctor.$new(target, $cast(System.Reflection.PropertyInfo, member));
            else
                throw System.InvalidOperationException.prototype.$ctor$1.$new("Only field and property members are supported").InternalInit(new Error());
    };
    $t.Call$1 = function(target, method, args) {
        return System.Linq.Expressions.MethodCallExpression.prototype.$ctor.$new(target, method, args);
    };
    $t.Call = function(method, args) {
        return System.Linq.Expressions.MethodCallExpression.prototype.$ctor.$new(null, method, args);
    };
    $t.Constant = function(value) {
        return System.Linq.Expressions.ConstantExpression.prototype.$ctor.$new(value);
    };
    $t.Constant$1 = function(value, type) {
        return System.Linq.Expressions.ConstantExpression.prototype.$ctor$1.$new(value, type);
    };
    $t.MakeBinary$1 = function(nodeType, left, right, liftToNull, method) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor$1.$new(
            left, 
            right, 
            nodeType, 
            liftToNull, 
            method
        );
    };
    $t.MakeBinary = function(binaryType, left, right) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor$1.$new(
            left, 
            right, 
            binaryType, 
            false, 
            null
        );
    };
    $t.MakeUnary = function(unaryType, operand, type) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            unaryType, 
            operand, 
            null, 
            type
        );
    };
    $t.MakeUnary$1 = function(unaryType, operand, type, method) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            unaryType, 
            operand, 
            method, 
            type
        );
    };
    $t.New$1 = function(type) {
        var constructor = System.Linq.Enumerable.Single$1(System.Reflection.ConstructorInfo, type.GetConstructors(), $delegate(this, (System.Func$2$(System.Reflection.ConstructorInfo, System.Boolean)), function(x) {
            return x.GetParameters().length == 0;
        }));
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, new Array(0));
    };
    $t.New = function(constructor) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, new Array(0));
    };
    $t.New$3 = function(constructor, args) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, args);
    };
    $t.New$2 = function(constructor, args) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, args);
    };
    $t.Bind = function(member, expression) {
        return System.Linq.Expressions.MemberAssignment.prototype.$ctor.$new(member, expression);
    };
    $t.Bind$1 = function(propertyAccessor, expression) {
        var memberInfo = System.Linq.Expressions.Expression.GetProperty(propertyAccessor);
        return System.Linq.Expressions.MemberAssignment.prototype.$ctor.$new(memberInfo, expression);
    };
    $t.MemberInit$1 = function(newExpression, bindings) {
        return System.Linq.Expressions.Expression.MemberInit(newExpression, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.MemberBinding)), bindings));
    };
    $t.MemberInit = function(newExpression, bindings) {
        return System.Linq.Expressions.MemberInitExpression.prototype.$ctor.$new(newExpression, System.Linq.Enumerable.ToList(System.Linq.Expressions.MemberBinding, bindings));
    };
    $t.GetProperty = function(mi) {
        var propertyName = mi.get_Name();
        if (String.prototype.StartsWith.call(propertyName, "set_"))
            propertyName = String.prototype.Substring.call(propertyName, 4, 0);
        return mi.get_DeclaringType().GetProperty(propertyName);
    };
    $t.ListInit$3 = function(newExpression, initializers) {
        return System.Linq.Expressions.Expression.ListInit$1(newExpression, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), initializers));
    };
    $t.ListInit$1 = function(newExpression, initializers) {
        var method = newExpression.get_Type().GetMethod("Add");
        return System.Linq.Expressions.Expression.ListInit$4(newExpression, method, initializers);
    };
    $t.ListInit$5 = function(newExpression, addMethod, initializers) {
        if (addMethod == null)
            return System.Linq.Expressions.Expression.ListInit$1(newExpression, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), initializers));
        return System.Linq.Expressions.Expression.ListInit$4(newExpression, addMethod, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), initializers));
    };
    $t.ListInit$4 = function(newExpression, addMethod, initializers) {
        if (addMethod == null)
            return System.Linq.Expressions.Expression.ListInit$1(newExpression, initializers);
        var list = System.Linq.Enumerable.ToArray(System.Linq.Expressions.ElementInit, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Linq.Expressions.ElementInit, 
            initializers, 
            (function(addMethod$closed) {
                return $delegate(this, (System.Func$2$(System.Linq.Expressions.Expression, System.Linq.Expressions.ElementInit)), function(x) {
                    return System.Linq.Expressions.Expression.ElementInit(addMethod$closed, (function() {
                        var $obj$ = (System.Collections.Generic.List$1$(System.Linq.Expressions.Expression)).prototype.$ctor.$new();
                        $obj$.Add$1(x);
                        return $obj$;
                    }).call(this));
                });
            }).call(this, addMethod)
        ));
        return System.Linq.Expressions.Expression.ListInit$2(newExpression, list);
    };
    $t.ListInit$2 = function(newExpression, initializers) {
        return System.Linq.Expressions.Expression.ListInit(newExpression, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.ElementInit)), initializers));
    };
    $t.ListInit = function(newExpression, initializers) {
        return System.Linq.Expressions.ListInitExpression.prototype.$ctor.$new(newExpression, System.Linq.Enumerable.ToList(System.Linq.Expressions.ElementInit, initializers));
    };
    $t.ElementInit$1 = function(addMethod, args) {
        return System.Linq.Expressions.Expression.ElementInit(addMethod, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), args));
    };
    $t.ElementInit = function(addMethod, args) {
        return System.Linq.Expressions.ElementInit.prototype.$ctor.$new(addMethod, System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $t.NewArrayInit$1 = function(type, initializers) {
        return System.Linq.Expressions.Expression.NewArrayInit(type, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), initializers));
    };
    $t.NewArrayInit = function(type, initializers) {
        var expressions = System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, initializers);
        var i = 0;
        var list = null;
        if (list != null)
            expressions = list;
        return System.Linq.Expressions.NewArrayExpression.prototype.$ctor.$new(System.Linq.Expressions.ExpressionType().NewArrayInit, type.MakeArrayType(), System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, expressions));
    };
    $t.NewArrayBounds$1 = function(type, bounds) {
        return System.Linq.Expressions.Expression.NewArrayBounds(type, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), bounds));
    };
    $t.NewArrayBounds = function(type, bounds) {
        var expressions = System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, bounds);
        var count = expressions.length;
        return System.Linq.Expressions.NewArrayExpression.prototype.$ctor.$new(System.Linq.Expressions.ExpressionType().NewArrayBounds, count != 1 ? type.MakeArrayType$2(count) : type.MakeArrayType(), System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, expressions));
    };
    $t.TypeAs = function(expression, type) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            System.Linq.Expressions.ExpressionType().TypeAs, 
            expression, 
            null, 
            type
        );
    };
    $t.TypeIs = function(expression, type) {
        return System.Linq.Expressions.TypeBinaryExpression.prototype.$ctor.$new(expression, type, System.Linq.Expressions.ExpressionType().TypeIs);
    };
    $t.Default = function(type) {
        return System.Linq.Expressions.DefaultExpression.prototype.$ctor.$new(type);
    };
    $t.MakeIndex = function(target, indexer, args) {
        return System.Linq.Expressions.IndexExpression.prototype.$ctor.$new(
            target, 
            indexer, 
            indexer != null ? indexer.get_PropertyType() : null, 
            System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args)
        );
    };
    $t.ArrayIndex$2 = function(array, indexes) {
        return System.Linq.Expressions.Expression.ArrayIndex(array, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), indexes));
    };
    $t.ArrayIndex = function(array, indexes) {
        var method = Array.$GetType().GetMethod("Get");
        return System.Linq.Expressions.Expression.Call$1(array, method, System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, indexes));
    };
    $t.ArrayIndex$1 = function(array, index) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor.$new(array, index, System.Linq.Expressions.ExpressionType().ArrayIndex);
    };
    $t.Condition = function(test, ifTrue, ifFalse) {
        return System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1.$new(
            test, 
            ifTrue, 
            ifFalse, 
            ifTrue.get_Type()
        );
    };
    $t.Condition$1 = function(test, ifTrue, ifFalse, type) {
        return System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1.$new(
            test, 
            ifTrue, 
            ifFalse, 
            type
        );
    };
    $t.Invoke$1 = function(expression, args) {
        return System.Linq.Expressions.Expression.Invoke(expression, $cast((System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression)), args));
    };
    $t.Invoke = function(expression, args) {
        return System.Linq.Expressions.InvocationExpression.prototype.$ctor.$new(expression, System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args), System.Object.$GetType());
    };
    $t.Field = function(expression, field) {
        return System.Linq.Expressions.MemberExpression.Make(expression, field);
    };
    $t.Field$1 = function(expression, fieldName) {
        var field = expression.get_Type().GetField$1(fieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field == null)
            field = expression.get_Type().GetField$1(fieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().NonPublic | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new(fieldName + ": " + expression.get_Type()).InternalInit(new Error());
        else
            return System.Linq.Expressions.Expression.Field(expression, field);
    };
    $t.Field$2 = function(expression, type, fieldName) {
        var field = type.GetField$1(fieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field == null)
            field = type.GetField$1(fieldName, System.Reflection.BindingFlags().IgnoreCase | System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().NonPublic | System.Reflection.BindingFlags().FlattenHierarchy);
        if (field == null)
            throw System.Exception.prototype.$ctor$1.$new(fieldName + ": " + type).InternalInit(new Error());
        else
            return System.Linq.Expressions.Expression.Field(expression, field);
    };
    $t.Convert = function(expression, type) {
        return System.Linq.Expressions.Expression.Convert$1(expression, type, null);
    };
    $t.Convert$1 = function(expression, type, method) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.Add = function(left, right) {
        return System.Linq.Expressions.Expression.Add$1(left, right, null);
    };
    $t.Add$1 = function(left, right, method) {
        return System.Linq.Expressions.Expression.MakeBinary$1(
            System.Linq.Expressions.ExpressionType().Add, 
            left, 
            right, 
            false, 
            method
        );
    };
}).call(null, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.Expression);
System.Linq.Expressions.LambdaExpression = $define("System.Linq.Expressions.LambdaExpression");
System.Linq.Expressions.LambdaExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.LambdaExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.LambdaExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.LambdaExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("LambdaExpression", []);this.$type.Init("System.Linq.Expressions.LambdaExpression", System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("parameters", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("delegateType", System.Type, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("tailCall", System.Boolean, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.LambdaExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.LambdaExpression.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Body", System.Linq.Expressions.LambdaExpression.prototype.get_Body, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Parameters", System.Linq.Expressions.LambdaExpression.prototype.get_Parameters, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DelegateType", System.Linq.Expressions.LambdaExpression.prototype.get_DelegateType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TailCall", System.Linq.Expressions.LambdaExpression.prototype.get_TailCall, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.LambdaExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Collections.Generic.List$1, 1, 0, null, [])], System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.LambdaExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Linq.Expressions.ParameterExpression), 4, 0, null, [])], System.Reflection.MethodAttributes().Assembly, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.LambdaExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.LambdaExpression.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Body", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Body", System.Linq.Expressions.LambdaExpression.prototype.get_Body, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Parameters", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Parameters", System.Linq.Expressions.LambdaExpression.prototype.get_Parameters, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("DelegateType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DelegateType", System.Linq.Expressions.LambdaExpression.prototype.get_DelegateType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("TailCall", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TailCall", System.Linq.Expressions.LambdaExpression.prototype.get_TailCall, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.name = null;
    $p.body = null;
    $p.parameters = null;
    $p.delegateType = null;
    $p.tailCall = null;
    $p.$ctor = function(delegateType, name, body, tailCall, parameters) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Lambda);
        this.name = name;
        this.body = body;
        this.parameters = System.Linq.Enumerable.ToList(System.Linq.Expressions.ParameterExpression, parameters);
        this.delegateType = delegateType;
        this.tailCall = tailCall;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(delegateType, name, body, tailCall, parameters) {
        return new $p.$ctor.$type(
            this, 
            delegateType, 
            name, 
            body, 
            tailCall, 
            parameters
        );
    };
    $p.get_Type = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_Body = function() {
        return this.body;
    };
    $p.get_Parameters = function() {
        return this.parameters;
    };
    $p.get_DelegateType = function() {
        return this.delegateType;
    };
    $p.get_TailCall = function() {
        return this.tailCall;
    };
    $p.Update = function(body, parameters) {
        return this;
    };
}).call(null, System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.LambdaExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.LambdaExpression);
System.Linq.Expressions.MemberExpression = $define("System.Linq.Expressions.MemberExpression");
System.Linq.Expressions.MemberExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.MemberExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MemberExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberExpression", []);this.$type.Init("System.Linq.Expressions.MemberExpression", System.Linq.Expressions.MemberExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Member$k__BackingField", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberExpression.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberExpression.prototype.set_Member, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MemberExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Make", System.Linq.Expressions.MemberExpression.prototype.Make, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, [])], System.Linq.Expressions.MemberExpression, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberExpression.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberExpression.prototype.set_Member, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Expression$k__BackingField = null;
    $p.get_Expression = function() {
        return this.$Expression$k__BackingField;
    };
    $p.set_Expression = function(value) {
        this.$Expression$k__BackingField = value;
    };
    $p.$Member$k__BackingField = null;
    $p.get_Member = function() {
        return this.$Member$k__BackingField;
    };
    $p.set_Member = function(value) {
        this.$Member$k__BackingField = value;
    };
    $p.$ctor = function(expression, member) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().MemberAccess);
        this.set_Expression(expression);
        this.set_Member(member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMember(this);
    };
    $t.Make = function(expression, member) {
        if (member.get_MemberType() == System.Reflection.MemberTypes().Field) {
            return System.Linq.Expressions.FieldExpression.prototype.$ctor.$new(expression, $cast(System.Reflection.FieldInfo, member));
        }
        else {
            return System.Linq.Expressions.PropertyExpression.prototype.$ctor.$new(expression, $cast(System.Reflection.PropertyInfo, member));
        }
    };
    $p.Update = function(Expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberExpression, System.Linq.Expressions.MemberExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberExpression);
System.Linq.Expressions.MemberBinding = $define("System.Linq.Expressions.MemberBinding");
System.Linq.Expressions.MemberBinding.prototype = new System.Object();
(System.Linq.Expressions.MemberBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberBinding;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.MemberBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberBinding", []);this.$type.Init("System.Linq.Expressions.MemberBinding", System.Linq.Expressions.MemberBinding, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$BindingType$k__BackingField", System.Linq.Expressions.MemberBindingType, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Member$k__BackingField", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_BindingType", System.Linq.Expressions.MemberBinding.prototype.get_BindingType, [], System.Linq.Expressions.MemberBindingType, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BindingType", System.Linq.Expressions.MemberBinding.prototype.set_BindingType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.MemberBindingType, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberBinding.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberBinding.prototype.set_Member, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberBinding.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("BindingType", System.Linq.Expressions.MemberBindingType, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BindingType", System.Linq.Expressions.MemberBinding.prototype.get_BindingType, [], System.Linq.Expressions.MemberBindingType, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BindingType", System.Linq.Expressions.MemberBinding.prototype.set_BindingType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.MemberBindingType, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberBinding.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberBinding.prototype.set_Member, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$BindingType$k__BackingField = null;
    $p.get_BindingType = function() {
        return this.$BindingType$k__BackingField;
    };
    $p.set_BindingType = function(value) {
        this.$BindingType$k__BackingField = value;
    };
    $p.$Member$k__BackingField = null;
    $p.get_Member = function() {
        return this.$Member$k__BackingField;
    };
    $p.set_Member = function(value) {
        this.$Member$k__BackingField = value;
    };
    $p.$ctor = function(bindingType, member) {
        System.Object.prototype.$ctor.call(this);
        this.set_BindingType(bindingType);
        this.set_Member(member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member) {
        return new $p.$ctor.$type(this, bindingType, member);
    };
}).call(null, System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberBinding);
System.Reflection.MethodBase = $define("System.Reflection.MethodBase");
System.Reflection.MethodBase.prototype = new System.Reflection.MemberInfo();
(System.Reflection.MethodBase.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.MethodBase;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.MethodBase";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodBase", []);this.$type.Init("System.Reflection.MethodBase", System.Reflection.MethodBase, System.Reflection.MemberInfo, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.MethodBase.prototype.get_Attributes, [], System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CallingConvention", System.Reflection.MethodBase.prototype.get_CallingConvention, [], System.Reflection.CallingConventions, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethodDefinition", System.Reflection.MethodBase.prototype.get_IsGenericMethodDefinition, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ContainsGenericParameters", System.Reflection.MethodBase.prototype.get_ContainsGenericParameters, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethod", System.Reflection.MethodBase.prototype.get_IsGenericMethod, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityCritical", System.Reflection.MethodBase.prototype.get_IsSecurityCritical, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecuritySafeCritical", System.Reflection.MethodBase.prototype.get_IsSecuritySafeCritical, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityTransparent", System.Reflection.MethodBase.prototype.get_IsSecurityTransparent, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.MethodBase.prototype.get_IsPublic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.MethodBase.prototype.get_IsPrivate, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.MethodBase.prototype.get_IsFamily, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.MethodBase.prototype.get_IsAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyAndAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyOrAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.MethodBase.prototype.get_IsStatic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFinal", System.Reflection.MethodBase.prototype.get_IsFinal, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVirtual", System.Reflection.MethodBase.prototype.get_IsVirtual, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsHideBySig", System.Reflection.MethodBase.prototype.get_IsHideBySig, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Reflection.MethodBase.prototype.get_IsAbstract, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.MethodBase.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsConstructor", System.Reflection.MethodBase.prototype.get_IsConstructor, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.MethodBase.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCurrentMethod", System.Reflection.MethodBase.prototype.GetCurrentMethod, [], System.Reflection.MethodBase, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetParametersNoCopy", System.Reflection.MethodBase.prototype.GetParametersNoCopy, [], System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetParameters", System.Reflection.MethodBase.prototype.GetParameters, [], System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$1", System.Reflection.MethodBase.prototype.Invoke$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericArguments", System.Reflection.MethodBase.prototype.GetGenericArguments, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.MethodBase.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodFromHandle", System.Reflection.MethodBase.prototype.GetMethodFromHandle, [System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeMethodHandle, 0, 0, null, [])], System.Reflection.MethodBase, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodFromHandle$1", System.Reflection.MethodBase.prototype.GetMethodFromHandle$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeMethodHandle, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("declaringType", System.RuntimeTypeHandle, 1, 0, null, [])], System.Reflection.MethodBase, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodBase.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 3, 0, null, [])], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.MethodAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.MethodBase.prototype.get_Attributes, [], System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CallingConvention", System.Reflection.CallingConventions, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CallingConvention", System.Reflection.MethodBase.prototype.get_CallingConvention, [], System.Reflection.CallingConventions, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericMethodDefinition", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethodDefinition", System.Reflection.MethodBase.prototype.get_IsGenericMethodDefinition, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("ContainsGenericParameters", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ContainsGenericParameters", System.Reflection.MethodBase.prototype.get_ContainsGenericParameters, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericMethod", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethod", System.Reflection.MethodBase.prototype.get_IsGenericMethod, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecurityCritical", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityCritical", System.Reflection.MethodBase.prototype.get_IsSecurityCritical, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecuritySafeCritical", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecuritySafeCritical", System.Reflection.MethodBase.prototype.get_IsSecuritySafeCritical, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecurityTransparent", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityTransparent", System.Reflection.MethodBase.prototype.get_IsSecurityTransparent, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.MethodBase.prototype.get_IsPublic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPrivate", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.MethodBase.prototype.get_IsPrivate, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamily", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.MethodBase.prototype.get_IsFamily, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.MethodBase.prototype.get_IsAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyAndAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyAndAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyOrAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyOrAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsStatic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.MethodBase.prototype.get_IsStatic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFinal", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFinal", System.Reflection.MethodBase.prototype.get_IsFinal, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsVirtual", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVirtual", System.Reflection.MethodBase.prototype.get_IsVirtual, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsHideBySig", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsHideBySig", System.Reflection.MethodBase.prototype.get_IsHideBySig, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAbstract", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Reflection.MethodBase.prototype.get_IsAbstract, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.MethodBase.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsConstructor", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsConstructor", System.Reflection.MethodBase.prototype.get_IsConstructor, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.MethodBase.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Assembly, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.parameters = null;
    $p.methodAttributes = null;
    $p.$ctor = function(name, parameters, methodAttributes, attributes) {
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.parameters = parameters;
        this.methodAttributes = methodAttributes;
        {
            var $anon$1iterator = parameters;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var parameter = $anon$2enumerator.get_Current();
                parameter.containingMember = this;
            }
        }
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, parameters, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
    };
    $p.get_Attributes = function() {
        return this.methodAttributes;
    };
    $p.get_CallingConvention = function() {
        return System.Reflection.CallingConventions().Standard;
    };
    $p.get_IsGenericMethodDefinition = function() {
        return false;
    };
    $p.get_ContainsGenericParameters = function() {
        return false;
    };
    $p.get_IsGenericMethod = function() {
        return false;
    };
    $p.get_IsSecurityCritical = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsSecuritySafeCritical = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsSecurityTransparent = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsPublic = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().Public;
    };
    $p.get_IsPrivate = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().Private;
    };
    $p.get_IsFamily = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().Family;
    };
    $p.get_IsAssembly = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().Assembly;
    };
    $p.get_IsFamilyAndAssembly = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().FamANDAssem;
    };
    $p.get_IsFamilyOrAssembly = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().MemberAccessMask) == System.Reflection.MethodAttributes().FamORAssem;
    };
    $p.get_IsStatic = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().Static) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsFinal = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().Final) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsVirtual = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().Virtual) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsHideBySig = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().HideBySig) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsAbstract = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().Abstract) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsSpecialName = function() {
        return (this.get_Attributes() & System.Reflection.MethodAttributes().SpecialName) != System.Reflection.MethodAttributes().PrivateScope;
    };
    $p.get_IsConstructor = function() {
        if (System.Reflection.ConstructorInfo.$GetType().IsInstanceOfType(this) && !this.get_IsStatic())
            return (this.get_Attributes() & System.Reflection.MethodAttributes().RTSpecialName) == System.Reflection.MethodAttributes().RTSpecialName;
        else
            return false;
    };
    $p.get_FullName = function() {
        return $cast(System.Object, this.get_DeclaringType().get_FullName()) + "." + $cast(System.Object, this.get_Name());
    };
    $t.GetCurrentMethod = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetParametersNoCopy = function() {
        return this.GetParameters();
    };
    $p.GetParameters = function() {
        return this.parameters;
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {
    };
    $p.GetGenericArguments = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.Invoke = function(obj, parameters) {
        return this.Invoke$1(
            obj, 
            System.Reflection.BindingFlags().Default, 
            null, 
            parameters, 
            null
        );
    };
    $t.GetMethodFromHandle = function(handle) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetMethodFromHandle$1 = function(handle, declaringType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
}).call(null, System.Reflection.MethodBase, System.Reflection.MethodBase.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodBase);
System.Action = $define("System.Action");
System.Action.prototype = new System.MulticastDelegate();
(System.Action.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action", System.Action, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 1, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action.prototype.Invoke, [], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
}).call(null, System.Action, System.Action.prototype);
$mscorlib$AssemblyTypes.push(System.Action);
System.Action$1 = $define("System.Action<T>");
System.Action$1.prototype = new System.MulticastDelegate();
(System.Action$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$1;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`1", System.Action$1, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$1.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 2, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$1.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$1.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$1, arguments);
    };
}).call(null, System.Action$1, System.Action$1.prototype);
$mscorlib$AssemblyTypes.push(System.Action$1);
System.Action$2 = $define("System.Action<T1, T2>");
System.Action$2.prototype = new System.MulticastDelegate();
(System.Action$2.$TypeInitializer = function($t, $p, T1, T2) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$2;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`2", System.Action$2, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$2.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$2.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$2.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$2, arguments);
    };
}).call(null, System.Action$2, System.Action$2.prototype);
$mscorlib$AssemblyTypes.push(System.Action$2);
System.Action$3 = $define("System.Action<T1, T2, T3>");
System.Action$3.prototype = new System.MulticastDelegate();
(System.Action$3.$TypeInitializer = function($t, $p, T1, T2, T3) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$3;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`3", System.Action$3, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$3.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 4, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$3.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$3.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$3.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$3$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$3, arguments);
    };
}).call(null, System.Action$3, System.Action$3.prototype);
$mscorlib$AssemblyTypes.push(System.Action$3);
System.Action$4 = $define("System.Action<T1, T2, T3, T4>");
System.Action$4.prototype = new System.MulticastDelegate();
(System.Action$4.$TypeInitializer = function($t, $p, T1, T2, T3, T4) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$4;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`4", System.Action$4, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$4.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 5, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$4.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$4.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$4.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$4$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$4, arguments);
    };
}).call(null, System.Action$4, System.Action$4.prototype);
$mscorlib$AssemblyTypes.push(System.Action$4);
System.Action$5 = $define("System.Action<T1, T2, T3, T4, T5>");
System.Action$5.prototype = new System.MulticastDelegate();
(System.Action$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$5;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`5", System.Action$5, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$5.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 6, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$5.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$5.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$5.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$5$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$5, arguments);
    };
}).call(null, System.Action$5, System.Action$5.prototype);
$mscorlib$AssemblyTypes.push(System.Action$5);
System.Action$6 = $define("System.Action<T1, T2, T3, T4, T5, T6>");
System.Action$6.prototype = new System.MulticastDelegate();
(System.Action$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$6;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`6", System.Action$6, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$6.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 7, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$6.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$6.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$6.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$6$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$6, arguments);
    };
}).call(null, System.Action$6, System.Action$6.prototype);
$mscorlib$AssemblyTypes.push(System.Action$6);
System.Action$7 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7>");
System.Action$7.prototype = new System.MulticastDelegate();
(System.Action$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$7;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`7", System.Action$7, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$7.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 8, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$7.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$7.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$7.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$7$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$7, arguments);
    };
}).call(null, System.Action$7, System.Action$7.prototype);
$mscorlib$AssemblyTypes.push(System.Action$7);
System.Action$8 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7, T8>");
System.Action$8.prototype = new System.MulticastDelegate();
(System.Action$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$8;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`8", System.Action$8, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$8.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 8, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 9, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$8.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$8.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$8.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$8$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$8, arguments);
    };
}).call(null, System.Action$8, System.Action$8.prototype);
$mscorlib$AssemblyTypes.push(System.Action$8);
System.Action$9 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>");
System.Action$9.prototype = new System.MulticastDelegate();
(System.Action$9.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, T9) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Action$9;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`9";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", []);this.$type.Init("System.Action`9", System.Action$9, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$9.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 9, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 10, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$9.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$9.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$9.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Action$9$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Action$9, arguments);
    };
}).call(null, System.Action$9, System.Action$9.prototype);
$mscorlib$AssemblyTypes.push(System.Action$9);
System.AppDomain = $define("System.AppDomain");
System.AppDomain.prototype = new System.Object();
(System.AppDomain.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.AppDomain;
    $t.$baseType = System.Object;
    $p.$typeName = "System.AppDomain";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AppDomain", []);this.$type.Init("System.AppDomain", System.AppDomain, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("instance", System.AppDomain, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().Static, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.AppDomain.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentDomain", System.AppDomain.prototype.get_CurrentDomain, [], System.AppDomain, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAssemblies", System.AppDomain.prototype.GetAssemblies, [], System.Object.$$MakeArrayType(System.Reflection.Assembly), System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AppDomain.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("CurrentDomain", System.AppDomain, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentDomain", System.AppDomain.prototype.get_CurrentDomain, [], System.AppDomain, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.AppDomain.instance = System.AppDomain.prototype.$ctor.$new();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.instance = null;
    $t.get_CurrentDomain = function() {
        return System.AppDomain().instance;
    };
    $p.GetAssemblies = function() {
        var array = $assemblies;
        var result = new Array(array.length);
        for (var i = 0; i < result.length; i++) {
            var getAssembly = array[i];
            result[i] = getAssembly();
        }
        return result;
    };
}).call(null, System.AppDomain, System.AppDomain.prototype);
$mscorlib$AssemblyTypes.push(System.AppDomain);
System.ArgumentException = $define("System.ArgumentException");
System.ArgumentException.prototype = new System.Exception();
(System.ArgumentException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.ArgumentException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ArgumentException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArgumentException", []);this.$type.Init("System.ArgumentException", System.ArgumentException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArgumentException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.ArgumentException.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.ArgumentException.prototype.$ctor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.ArgumentException, System.ArgumentException.prototype);
$mscorlib$AssemblyTypes.push(System.ArgumentException);
System.ArgumentNullException = $define("System.ArgumentNullException");
System.ArgumentNullException.prototype = new System.Exception();
(System.ArgumentNullException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.ArgumentNullException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ArgumentNullException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArgumentNullException", []);this.$type.Init("System.ArgumentNullException", System.ArgumentNullException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArgumentNullException.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(message) {
        return new $p.$ctor.$type(this, message);
    };
}).call(null, System.ArgumentNullException, System.ArgumentNullException.prototype);
$mscorlib$AssemblyTypes.push(System.ArgumentNullException);
(Array.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = Array;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Array";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Array", [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("Array");$obj$.set_BuiltIn(true);return $obj$;}).call(this)]);this.$type.Init("Array", Array, System.Object, [System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Length$k__BackingField", System.Int32, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Length", Array.prototype.get_Length, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Length", Array.prototype.set_Length, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Int32, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", Array.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEnumerable$1$GetEnumerator", Array.prototype.System$Collections$Generic$IEnumerable$1$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("System$Collections$Generic$IEnumerable$1$GetEnumerator");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", Array.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", Array.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", Array.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy", Array.prototype.Copy, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy$2", Array.prototype.Copy$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 4, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ConstrainedCopy", Array.prototype.ConstrainedCopy, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 4, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy$1", Array.prototype.Copy$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int64, 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy$3", Array.prototype.Copy$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int64, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int64, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int64, 4, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", Array.prototype.CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo$1", Array.prototype.CopyTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int64, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", Array.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", Array.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", Array.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", Array.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", Array.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", Array.prototype.Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear$1", Array.prototype.Clear$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", Array.prototype.Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Insert", Array.prototype.System$Collections$IList$Insert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Remove", Array.prototype.System$Collections$IList$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$RemoveAt", Array.prototype.System$Collections$IList$RemoveAt, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetUpperBound", Array.prototype.GetUpperBound, [System.Reflection.ParameterInfo.prototype.$ctor.$new("dimension", System.Int32, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetLowerBound", Array.prototype.GetLowerBound, [System.Reflection.ParameterInfo.prototype.$ctor.$new("dimension", System.Int32, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", Array.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", Array.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", Array.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", Array.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", Array.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", Array.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type();
    };
    $p.GetEnumerator = function() {
        var array = this;
        return System.ArrayEnumerator.prototype.$ctor.$new(array);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.GetEnumerator;
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.get_Count = function() {
        return this.length;
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.get_IsSynchronized = function() {
        return true;
    };
    $t.Copy = function(sourceArray, destinationArray, length) {
        Array.Copy$2(
            sourceArray, 
            sourceArray.GetLowerBound(0), 
            destinationArray, 
            destinationArray.GetLowerBound(0), 
            length
        );
    };
    $t.Copy$2 = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for (var i = sourceIndex, j = destinationIndex; i < sourceArray.length && j < destinationArray.length && i < sourceIndex + length; i++, j++) {
            destinationArray[j] = sourceArray[i];
        }
    };
    $t.ConstrainedCopy = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        Array.Copy$2(
            sourceArray, 
            sourceIndex, 
            destinationArray, 
            destinationIndex, 
            length
        );
    };
    $t.Copy$1 = function(sourceArray, destinationArray, length) {
        Array.Copy(sourceArray, destinationArray, $cast(System.Int32, length));
    };
    $t.Copy$3 = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        Array.Copy$2(
            sourceArray, 
            $cast(System.Int32, sourceIndex), 
            destinationArray, 
            $cast(System.Int32, destinationIndex), 
            $cast(System.Int32, length)
        );
    };
    $p.CopyTo = function(array, index) {
        Array.Copy$2(
            this, 
            index, 
            array, 
            0, 
            array.length
        );
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.CopyTo$1 = function(array, index) {
        this.CopyTo(array, index);
    };
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.get_IsFixedSize = function() {
        return true;
    };
    $p.Add = function(value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Add = $p.Add;
    $p.Contains = function(value) {
        return this.indexOf(value) >= 0;
    };
    $p.System$Collections$IList$Contains = $p.Contains;
    $t.Clear$1 = function(array, startIndex, length) {
        for (var i = startIndex; i < startIndex + length; i++) {
            array[i] = null;
        }
    };
    $p.Clear = function() {
        Array.Clear$1(this, 0, this.length);
    };
    $p.System$Collections$IList$Clear = $p.Clear;
    $p.System$Collections$IList$Insert = function(index, value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Insert = $p.System$Collections$IList$Insert;
    $p.System$Collections$IList$Remove = function(value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Remove = $p.System$Collections$IList$Remove;
    $p.System$Collections$IList$RemoveAt = function(index) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$RemoveAt = $p.System$Collections$IList$RemoveAt;
    $p.GetUpperBound = function(dimension) {
        return this.length - 1;
    };
    $p.GetLowerBound = function(dimension) {
        return 0;
    };
}).call(null, Array, Array.prototype);
$mscorlib$AssemblyTypes.push(Array);
System.ArrayEnumerator = $define("System.ArrayEnumerator");
System.ArrayEnumerator.prototype = new System.Object();
(System.ArrayEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.ArrayEnumerator;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ArrayEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArrayEnumerator", []);this.$type.Init("System.ArrayEnumerator", System.ArrayEnumerator, System.Object, [System.IDisposable, System.Collections.IEnumerator], [System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator.prototype.get_Current, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.ArrayEnumerator.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.ArrayEnumerator.prototype.Dispose, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.ArrayEnumerator.prototype.Reset, [], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArrayEnumerator.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator.prototype.get_Current, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.array = null;
    $p.index = null;
    $p.$ctor = function(array) {
        System.Object.prototype.$ctor.call(this);
        this.index = -1;
        this.array = array;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(array) {
        return new $p.$ctor.$type(this, array);
    };
    $p.get_Current = function() {
        return this.array[this.index];
    };
    $p.MoveNext = function() {
        this.index++;
        return this.index < this.array.length;
    };
    $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    $p.Dispose = function() {
    };
    $p.System$IDisposable$Dispose = $p.Dispose;
    $p.Reset = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerator$Reset = $p.Reset;
}).call(null, System.ArrayEnumerator, System.ArrayEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.ArrayEnumerator);
System.Attribute = $define("System.Attribute");
System.Attribute.prototype = new System.Object();
(System.Attribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Attribute;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Attribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Attribute", [(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(32767);$obj$.set_AllowMultiple(false);$obj$.set_Inherited(true);return $obj$;}).call(this)]);this.$type.Init("System.Attribute", System.Attribute, System.Object, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Attribute.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Attribute, System.Attribute.prototype);
$mscorlib$AssemblyTypes.push(System.Attribute);
System.AttributeTargets = $define("System.AttributeTargets");
System.AttributeTargets.prototype = new System.Enum();
(System.AttributeTargets.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.AttributeTargets;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.AttributeTargets";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AttributeTargets", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.AttributeTargets", System.AttributeTargets, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Module", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Class", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Struct", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Enum", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Constructor", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Method", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Property", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 128, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Field", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 256, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Event", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 512, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Interface", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1024, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Parameter", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2048, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Delegate", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ReturnValue", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("GenericParameter", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16384, []), System.Reflection.FieldInfo.prototype.$ctor.$new("All", System.AttributeTargets, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32767, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AttributeTargets.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Assembly = 1;
        $t.Assembly$ = $p.$ctor.$new("Assembly", System.AttributeTargets().Assembly);
        $t.Module = 2;
        $t.Module$ = $p.$ctor.$new("Module", System.AttributeTargets().Module);
        $t.Class = 4;
        $t.Class$ = $p.$ctor.$new("Class", System.AttributeTargets().Class);
        $t.Struct = 8;
        $t.Struct$ = $p.$ctor.$new("Struct", System.AttributeTargets().Struct);
        $t.Enum = 16;
        $t.Enum$ = $p.$ctor.$new("Enum", System.AttributeTargets().Enum);
        $t.Constructor = 32;
        $t.Constructor$ = $p.$ctor.$new("Constructor", System.AttributeTargets().Constructor);
        $t.Method = 64;
        $t.Method$ = $p.$ctor.$new("Method", System.AttributeTargets().Method);
        $t.Property = 128;
        $t.Property$ = $p.$ctor.$new("Property", System.AttributeTargets().Property);
        $t.Field = 256;
        $t.Field$ = $p.$ctor.$new("Field", System.AttributeTargets().Field);
        $t.Event = 512;
        $t.Event$ = $p.$ctor.$new("Event", System.AttributeTargets().Event);
        $t.Interface = 1024;
        $t.Interface$ = $p.$ctor.$new("Interface", System.AttributeTargets().Interface);
        $t.Parameter = 2048;
        $t.Parameter$ = $p.$ctor.$new("Parameter", System.AttributeTargets().Parameter);
        $t.Delegate = 4096;
        $t.Delegate$ = $p.$ctor.$new("Delegate", System.AttributeTargets().Delegate);
        $t.ReturnValue = 8192;
        $t.ReturnValue$ = $p.$ctor.$new("ReturnValue", System.AttributeTargets().ReturnValue);
        $t.GenericParameter = 16384;
        $t.GenericParameter$ = $p.$ctor.$new("GenericParameter", System.AttributeTargets().GenericParameter);
        $t.All = System.AttributeTargets().GenericParameter | System.AttributeTargets().ReturnValue | System.AttributeTargets().Delegate | System.AttributeTargets().Parameter | System.AttributeTargets().Interface | System.AttributeTargets().Event | System.AttributeTargets().Field | System.AttributeTargets().Property | System.AttributeTargets().Method | System.AttributeTargets().Constructor | System.AttributeTargets().Enum | System.AttributeTargets().Struct | System.AttributeTargets().Class | System.AttributeTargets().Module | System.AttributeTargets().Assembly;
        $t.All$ = $p.$ctor.$new("All", System.AttributeTargets().All);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.AttributeTargets, System.AttributeTargets.prototype);
$mscorlib$AssemblyTypes.push(System.AttributeTargets);
System.AttributeUsageAttribute = $define("System.AttributeUsageAttribute");
System.AttributeUsageAttribute.prototype = new System.Attribute();
(System.AttributeUsageAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.AttributeUsageAttribute;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.AttributeUsageAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AttributeUsageAttribute", [(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(4);$obj$.set_Inherited(true);return $obj$;}).call(this)]);this.$type.Init("System.AttributeUsageAttribute", System.AttributeUsageAttribute, System.Attribute, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$ValidOn$k__BackingField", System.AttributeTargets, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$AllowMultiple$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Inherited$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValidOn", System.AttributeUsageAttribute.prototype.get_ValidOn, [], System.AttributeTargets, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ValidOn", System.AttributeUsageAttribute.prototype.set_ValidOn, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.AttributeTargets, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_AllowMultiple", System.AttributeUsageAttribute.prototype.get_AllowMultiple, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AllowMultiple", System.AttributeUsageAttribute.prototype.set_AllowMultiple, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Inherited", System.AttributeUsageAttribute.prototype.get_Inherited, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Inherited", System.AttributeUsageAttribute.prototype.set_Inherited, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AttributeUsageAttribute.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("validOn", System.AttributeTargets, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("ValidOn", System.AttributeTargets, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValidOn", System.AttributeUsageAttribute.prototype.get_ValidOn, [], System.AttributeTargets, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ValidOn", System.AttributeUsageAttribute.prototype.set_ValidOn, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.AttributeTargets, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("AllowMultiple", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AllowMultiple", System.AttributeUsageAttribute.prototype.get_AllowMultiple, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AllowMultiple", System.AttributeUsageAttribute.prototype.set_AllowMultiple, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Inherited", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Inherited", System.AttributeUsageAttribute.prototype.get_Inherited, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Inherited", System.AttributeUsageAttribute.prototype.set_Inherited, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function(validOn) {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(validOn) {
        return new $p.$ctor.$type(this, validOn);
    };
    $p.$ValidOn$k__BackingField = null;
    $p.get_ValidOn = function() {
        return this.$ValidOn$k__BackingField;
    };
    $p.set_ValidOn = function(value) {
        this.$ValidOn$k__BackingField = value;
    };
    $p.$AllowMultiple$k__BackingField = null;
    $p.get_AllowMultiple = function() {
        return this.$AllowMultiple$k__BackingField;
    };
    $p.set_AllowMultiple = function(value) {
        this.$AllowMultiple$k__BackingField = value;
    };
    $p.$Inherited$k__BackingField = null;
    $p.get_Inherited = function() {
        return this.$Inherited$k__BackingField;
    };
    $p.set_Inherited = function(value) {
        this.$Inherited$k__BackingField = value;
    };
}).call(null, System.AttributeUsageAttribute, System.AttributeUsageAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.AttributeUsageAttribute);
System.Boolean = $define("bool");
System.Boolean.prototype = new System.ValueType();
(System.Boolean.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Boolean;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Boolean";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Boolean", []);this.$type.Init("System.Boolean", System.Boolean, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Boolean.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Boolean.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Parse = function(s) {
        return false;
    };
}).call(null, System.Boolean, System.Boolean.prototype);
$mscorlib$AssemblyTypes.push(System.Boolean);
System.Byte = $define("byte");
System.Byte.prototype = new System.ValueType();
(System.Byte.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Byte;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Byte";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Byte", []);this.$type.Init("System.Byte", System.Byte, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Byte.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Byte.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.Byte.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Byte.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Byte, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Byte.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Byte, System.Byte.prototype);
$mscorlib$AssemblyTypes.push(System.Byte);
System.Char = $define("char");
System.Char.prototype = new System.ValueType();
(System.Char.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Char;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Char";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Char", []);this.$type.Init("System.Char", System.Char, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("op_Explicit", System.Char.prototype.op_Explicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("ch", System.Char, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Char.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.op_Explicit = function(ch) {
        return null;
    };
}).call(null, System.Char, System.Char.prototype);
$mscorlib$AssemblyTypes.push(System.Char);
System.Collections.Comparer = $define("System.Collections.Comparer");
System.Collections.Comparer.prototype = new System.Object();
(System.Collections.Comparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Comparer;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Comparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparer", []);this.$type.Init("System.Collections.Comparer", System.Collections.Comparer, System.Object, [System.Collections.IComparer], [System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Collections.Comparer, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("DefaultInvariant", System.Collections.Comparer, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_compareInfo", System.Globalization.CompareInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("CompareInfoName", String, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "CompareInfo", [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Collections.Comparer.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Comparer.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("b", System.Object, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Comparer.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Comparer.prototype.$ctor, [], System.Reflection.MethodAttributes().Private, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Collections.Comparer.Default = System.Collections.Comparer.prototype.$ctor$1.$new(System.Globalization.CultureInfo().CurrentCulture);
        System.Collections.Comparer.DefaultInvariant = System.Collections.Comparer.prototype.$ctor$1.$new(System.Globalization.CultureInfo().InvariantCulture);
        System.Collections.Comparer.CompareInfoName = "CompareInfo";
    };
    $p.Default = null;
    $p.DefaultInvariant = null;
    $p.m_compareInfo = null;
    $p.CompareInfoName = null;
    $p.$cctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$cctor.$type = $t;
    $p.$cctor.$new = function() {
        return new $p.$cctor.$type(this);
    };
    $p.$ctor$1 = function(culture) {
        System.Object.prototype.$ctor.call(this);
        if (culture == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("culture").InternalInit(new Error());
        this.m_compareInfo = culture.get_CompareInfo();
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(culture) {
        return new $p.$ctor$1.$type(this, culture);
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.m_compareInfo = null;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(a, b) {
        if (a == b)
            return 0;
        if (a == null)
            return -1;
        if (b == null)
            return 1;
        if (this.m_compareInfo != null) {
            var string1 = (function() {
                var $as$ = a;
                if (!System.Type.prototype.IsInstanceOfType.call(String.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            var string2 = (function() {
                var $as$ = b;
                if (!System.Type.prototype.IsInstanceOfType.call(String.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (string1 != null && string2 != null)
                return this.m_compareInfo.Compare(string1, string2);
        }
        var comparable1 = (function() {
            var $as$ = a;
            if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (comparable1 != null)
            return comparable1.System$IComparable$CompareTo(b);
        var comparable2 = (function() {
            var $as$ = b;
            if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (comparable2 != null)
            return -comparable2.System$IComparable$CompareTo(a);
        else
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument_ImplementIComparable").InternalInit(new Error());
    };
    $p.System$Collections$IComparer$Compare = $p.Compare;
}).call(null, System.Collections.Comparer, System.Collections.Comparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Comparer);
System.Collections.Generic.Comparer$1 = $define("System.Collections.Generic.Comparer<T>");
System.Collections.Generic.Comparer$1.prototype = new System.Object();
(System.Collections.Generic.Comparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.Comparer$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Comparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparer", []);this.$type.Init("System.Collections.Generic.Comparer`1", System.Collections.Generic.Comparer$1, System.Object, [System.Collections.Generic.IComparer$1, System.Collections.IComparer], [System.Reflection.FieldInfo.prototype.$ctor.$new("defaultComparer", System.Collections.Generic.Comparer$1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().Static, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.Comparer$1.prototype.get_Default, [], System.Collections.Generic.Comparer$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Collections.Generic.Comparer$1.prototype.Create, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1, 0, 0, null, [])], System.Collections.Generic.Comparer$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateComparer", System.Collections.Generic.Comparer$1.prototype.CreateComparer, [], System.Collections.Generic.Comparer$1, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.Comparer$1.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IComparer$Compare", System.Collections.Generic.Comparer$1.prototype.System$Collections$IComparer$Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Comparer$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Default", System.Collections.Generic.Comparer$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.Comparer$1.prototype.get_Default, [], System.Collections.Generic.Comparer$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.Comparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.Comparer$1, arguments);
    };
    $p.defaultComparer = null;
    $t.get_Default = function() {
        var comparer = (System.Collections.Generic.Comparer$1$(T))().defaultComparer;
        if (comparer == null) {
            comparer = (System.Collections.Generic.Comparer$1$(T)).CreateComparer();
            (System.Collections.Generic.Comparer$1$(T))().defaultComparer = comparer;
        }
        return comparer;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Create = function(comparison) {
        if (comparison == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("comparison").InternalInit(new Error());
        else
            return (System.Collections.Generic.ComparisonComparer$1$(T)).prototype.$ctor.$new(comparison);
    };
    $t.CreateComparer = function() {
        var genericParameter1 = T.$GetType();
        if ((System.IComparable$1$(T)).$GetType().IsAssignableFrom(genericParameter1))
            return $cast((System.Collections.Generic.Comparer$1$(T)), System.Reflection.Activator.CreateInstance$2((System.Collections.Generic.GenericComparer$1$(System.Int32)).$GetType(), [genericParameter1]));
        return (System.Collections.Generic.ObjectComparer$1$(T)).prototype.$ctor.$new();
    };
    $p.Compare = function(x, y) {
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.System$Collections$IComparer$Compare = function(x, y) {
        if (x == null) {
            return y != null ? -1 : 0;
        }
        else {
            if (y == null)
                return 1;
            if (T.$GetType().IsInstanceOfType(x) && T.$GetType().IsInstanceOfType(y))
                return this.Compare($cast(T, x), $cast(T, y));
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument_InvalidArgumentForComparison").InternalInit(new Error());
        }
    };
    $p.System$Collections$IComparer$Compare = $p.System$Collections$IComparer$Compare;
}).call(null, System.Collections.Generic.Comparer$1, System.Collections.Generic.Comparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Comparer$1);
System.Collections.Generic.ComparisonComparer$1 = $define("System.Collections.Generic.ComparisonComparer<T>");
System.Collections.Generic.ComparisonComparer$1.prototype = new System.Collections.Generic.Comparer$1();
(System.Collections.Generic.ComparisonComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.ComparisonComparer$1;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.ComparisonComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ComparisonComparer", []);this.$type.Init("System.Collections.Generic.ComparisonComparer`1", System.Collections.Generic.ComparisonComparer$1, (System.Collections.Generic.Comparer$1$(T)), [System.Collections.Generic.IComparer$1, System.Collections.IComparer], [System.Reflection.FieldInfo.prototype.$ctor.$new("_comparison", System.Collections.Generic.Comparison$1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.ComparisonComparer$1.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.ComparisonComparer$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.ComparisonComparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.ComparisonComparer$1, arguments);
    };
    $p._comparison = null;
    $p.$ctor = function(comparison) {
        (System.Collections.Generic.Comparer$1$(T)).prototype.$ctor.call(this);
        this._comparison = comparison;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(comparison) {
        return new $p.$ctor.$type(this, comparison);
    };
    $p.Compare = function(x, y) {
        return this._comparison(x, y);
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
}).call(null, System.Collections.Generic.ComparisonComparer$1, System.Collections.Generic.ComparisonComparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ComparisonComparer$1);
System.Collections.DictionaryEntry = $define("System.Collections.DictionaryEntry");
System.Collections.DictionaryEntry.prototype = new System.ValueType();
(System.Collections.DictionaryEntry.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.DictionaryEntry;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Collections.DictionaryEntry";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DictionaryEntry", []);this.$type.Init("System.Collections.DictionaryEntry", System.Collections.DictionaryEntry, System.ValueType, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("_key", System.Object, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("_value", System.Object, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.DictionaryEntry.prototype.get_Key, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.DictionaryEntry.prototype.set_Key, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.DictionaryEntry.prototype.get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.DictionaryEntry.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.DictionaryEntry.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.DictionaryEntry.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.DictionaryEntry.prototype.get_Key, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.DictionaryEntry.prototype.set_Key, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.DictionaryEntry.prototype.get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.DictionaryEntry.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], [])], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p._key = null;
    $p._value = null;
    $p.get_Key = function() {
        return this._key;
    };
    $p.set_Key = function(value) {
        this._key = value;
    };
    $p.get_Value = function() {
        return this._value;
    };
    $p.set_Value = function(value) {
        this._value = value;
    };
    $p.$ctor$1 = function(key, value) {
        System.ValueType.prototype.$ctor.call(this);
        this._key = key;
        this._value = value;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(key, value) {
        return new $p.$ctor$1.$type(this, key, value);
    };
}).call(null, System.Collections.DictionaryEntry, System.Collections.DictionaryEntry.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.DictionaryEntry);
System.Collections.Generic.Comparison$1 = $define("System.Collections.Generic.Comparison<T>");
System.Collections.Generic.Comparison$1.prototype = new System.MulticastDelegate();
(System.Collections.Generic.Comparison$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.Comparison$1;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Collections.Generic.Comparison`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparison", []);this.$type.Init("System.Collections.Generic.Comparison`1", System.Collections.Generic.Comparison$1, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Collections.Generic.Comparison$1.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Collections.Generic.Comparison$1.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Collections.Generic.Comparison$1.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Comparison$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.Comparison$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.Comparison$1, arguments);
    };
}).call(null, System.Collections.Generic.Comparison$1, System.Collections.Generic.Comparison$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Comparison$1);
System.Collections.Generic.Dictionary$2 = $define("System.Collections.Generic.Dictionary<TKey, TValue>");
System.Collections.Generic.Dictionary$2.prototype = new System.Object();
(System.Collections.Generic.Dictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.Dictionary$2;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Dictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Dictionary", []);this.$type.Init("System.Collections.Generic.Dictionary`2", System.Collections.Generic.Dictionary$2, System.Object, [System.Collections.Generic.IReadOnlyDictionary$2, System.Collections.Generic.IReadOnlyCollection$1, System.Collections.IDictionary, System.Collections.Generic.IDictionary$2, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("buckets", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("keys", System.Collections.Generic.Dictionary$2.DictionaryKeys, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("Add$1", System.Collections.Generic.Dictionary$2.prototype.Add$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.Dictionary$2.prototype.Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ContainsKey", System.Collections.Generic.Dictionary$2.prototype.ContainsKey, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.Dictionary$2.prototype.Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("TryGetValue", System.Collections.Generic.Dictionary$2.prototype.TryGetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.Dictionary$2.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.Dictionary$2.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.Dictionary$2.prototype.get_Keys, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.Dictionary$2.prototype.get_Values, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.prototype.CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.Dictionary$2.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo$1", System.Collections.Generic.Dictionary$2.prototype.CopyTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Object.$$MakeArrayType((System.Collections.Generic.KeyValuePair$2$(TKey, TValue))), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$set_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Keys, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Values, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.Dictionary$2.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Contains", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Add", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$GetEnumerator, [], System.Collections.IDictionaryEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Remove", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.Dictionary$2.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.Dictionary$2.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.Dictionary$2.prototype.get_Keys, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.Dictionary$2.prototype.get_Values, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$set_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.Keys", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Keys, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Private, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.Values", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Values, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Private, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.Dictionary$2.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.Dictionary$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.Dictionary$2, arguments);
    };
    $p.storage = null;
    $p.buckets = null;
    $p.count = null;
    $p.keys = null;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.storage = new Object();
        this.buckets = (System.Collections.Generic.List$1$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).Bucket$()))).prototype.$ctor.$new();
        this.keys = ((System.Collections.Generic.Dictionary$2$(TKey, TValue)).DictionaryKeys$()).prototype.$ctor.$new(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Add$1 = function(key, value) {
        var hashCode = key.GetStringHashCode();
        var bucket = this.storage[hashCode];
        if (bucket == null) {
            bucket = ((System.Collections.Generic.Dictionary$2$(TKey, TValue)).Bucket$()).prototype.$ctor.$new(hashCode);
            this.storage[hashCode] = bucket;
            this.buckets.Add(bucket);
        }
        var existingItem = System.Linq.Enumerable.SingleOrDefault$1(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), bucket.Items, (function(key$closed) {
            return $delegate(this, (System.Func$2$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), System.Boolean)), function(x) {
                return x.get_Key().Equals(key$closed);
            });
        }).call(this, key));
        if (existingItem == null) {
            bucket.Items.Add(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()).prototype.$ctor.$new(key, value));
            this.count++;
        }
        else {
            existingItem.set_Value(value);
        }
    };
    $p.System$Collections$Generic$IDictionary$2$Add = $p.Add$1;
    $p.Remove = function(key) {
        var hashCode = key.GetStringHashCode();
        var bucket = this.storage[hashCode];
        if (bucket != null) {
            var items = System.Linq.Enumerable.Where(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), bucket.Items, (function(key$closed) {
                return $delegate(this, (System.Func$2$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), System.Boolean)), function(x) {
                    return x.get_Key().Equals(key$closed);
                });
            }).call(this, key)).System$Collections$Generic$IEnumerable$1$GetEnumerator();
            if (items.System$Collections$IEnumerator$MoveNext()) {
                var item = items.get_Current();
                items.System$IDisposable$Dispose();
                bucket.Items.Remove(item);
                if (bucket.Items.get_Count() == 0) {
                    delete this.storage[hashCode];
                }
                this.count--;
                return true;
            }
        }
        return false;
    };
    $p.System$Collections$Generic$IDictionary$2$Remove = $p.Remove;
    $p.ContainsKey = function(key) {
        var hashCode = key.GetStringHashCode();
        var bucket = this.storage[hashCode];
        if (bucket == null)
            return false;
        return System.Linq.Enumerable.Any$1(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), bucket.Items, (function(key$closed) {
            return $delegate(this, (System.Func$2$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), System.Boolean)), function(x) {
                return x.get_Key().Equals(key$closed);
            });
        }).call(this, key));
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey = $p.ContainsKey;
    $p.System$Collections$Generic$IDictionary$2$ContainsKey = $p.ContainsKey;
    $p.Clear = function() {
        {
            var $anon$1iterator = this.buckets;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var bucket = $anon$2enumerator.get_Current();
                var hashCode = bucket.get_HashCode();
                delete this.storage[hashCode];
            }
        }
        this.count = 0;
    };
    $p.System$Collections$IDictionary$Clear = $p.Clear;
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.TryGetValue = function(key, value) {
        var hashCode = key.GetStringHashCode();
        var bucket = this.storage[hashCode];
        if (bucket == null) {
            value.value = null;
            return false;
        }
        var items = bucket.Items.GetEnumerator();
        if (!items.System$Collections$IEnumerator$MoveNext()) {
            value.value = null;
            return false;
        }
        value.value = items.get_Current().get_Value();
        items.System$IDisposable$Dispose();
        return true;
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue = $p.TryGetValue;
    $p.System$Collections$Generic$IDictionary$2$TryGetValue = $p.TryGetValue;
    $p.get_Item = function(key) {
        var result;
        if (!(function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = this.TryGetValue(key, $anon$1);
            result = $anon$1.value;
            return $result$;
        }).call(this))
            throw System.Collections.Generic.KeyNotFoundException.prototype.$ctor$1.$new(key.ToString()).InternalInit(new Error());
        return result;
    };
    $p.set_Item = function(key, value) {
        this.Add$1(key, value);
    };
    $p.get_Keys = function() {
        return this.keys;
    };
    $p.get_Values = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.get_Count = function() {
        return this.count;
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.CopyTo = function(array, index) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.GetEnumerator = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.Add = function(item) {
        this.Add$1(item.get_Key(), item.get_Value());
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
    $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains = function(item) {
        return this.ContainsKey(item.get_Key()) && this.get_Item(item.get_Key()).Equals(item.get_Value());
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove = function(item) {
        return false;
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove;
    $p.System$Collections$IDictionary$get_Item = function(key) {
        return this.get_Item($cast(TKey, key));
    };
    $p.System$Collections$IDictionary$set_Item = function(key, value) {
        this.set_Item($cast(TKey, key), $cast(TValue, value));
    };
    $p.get_System$Collections$IDictionary$Keys = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_System$Collections$IDictionary$Values = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsFixedSize = function() {
        return false;
    };
    $p.System$Collections$IDictionary$Contains = function(key) {
        return false;
    };
    $p.System$Collections$IDictionary$Contains = $p.System$Collections$IDictionary$Contains;
    $p.System$Collections$IDictionary$Add = function(key, value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$Add = $p.System$Collections$IDictionary$Add;
    $p.System$Collections$IDictionary$GetEnumerator = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$GetEnumerator = $p.System$Collections$IDictionary$GetEnumerator;
    $p.System$Collections$IDictionary$Remove = function(key) {
        this.Remove($cast(TKey, key));
    };
    $p.System$Collections$IDictionary$Remove = $p.System$Collections$IDictionary$Remove;
    $p.get_System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$Keys = function() {
        return this.get_Keys();
    };
    $p.get_System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$Values = function() {
        return this.get_Values();
    };
    function Bucket($constructor) {
        if (!$t.Bucket.$isStaticInitialized && ($constructor != null || !(this instanceof System.Collections.Generic.Dictionary$2.Bucket))) {
            $t.Bucket.$isStaticInitialized = true;
            $t.Bucket.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Collections.Generic.Dictionary$2.Bucket))
            return $t.Bucket;
    }
    $t.Bucket = Bucket;
    $t.Bucket.prototype = new System.Object();
    ($t.Bucket.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Collections.Generic.Dictionary$2.Bucket;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.Bucket";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Bucket", []);this.$type.Init("System.Collections.Generic.Dictionary`2.Bucket", System.Collections.Generic.Dictionary$2.Bucket, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$HashCode$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Items", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Public, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.get_HashCode, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.set_HashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.Bucket.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("hashCode", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("HashCode", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.get_HashCode, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.set_HashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], [])], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.Bucket$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.Bucket, arguments);
        };
        $p.$HashCode$k__BackingField = null;
        $p.get_HashCode = function() {
            return this.$HashCode$k__BackingField;
        };
        $p.set_HashCode = function(value) {
            this.$HashCode$k__BackingField = value;
        };
        $p.Items = null;
        $p.$ctor = function(hashCode) {
            System.Object.prototype.$ctor.call(this);
            this.Items = (System.Collections.Generic.List$1$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()))).prototype.$ctor.$new();
            this.set_HashCode(hashCode);
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(hashCode) {
            return new $p.$ctor.$type(this, hashCode);
        };
    }).call($t, $t.Bucket, $t.Bucket.prototype);
    $mscorlib$AssemblyTypes.push($t.Bucket);
    function BucketItem($constructor) {
        if (!$t.BucketItem.$isStaticInitialized && ($constructor != null || !(this instanceof System.Collections.Generic.Dictionary$2.BucketItem))) {
            $t.BucketItem.$isStaticInitialized = true;
            $t.BucketItem.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Collections.Generic.Dictionary$2.BucketItem))
            return $t.BucketItem;
    }
    $t.BucketItem = BucketItem;
    $t.BucketItem.prototype = new System.Object();
    ($t.BucketItem.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Collections.Generic.Dictionary$2.BucketItem;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.BucketItem";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BucketItem", []);this.$type.Init("System.Collections.Generic.Dictionary`2.BucketItem", System.Collections.Generic.Dictionary$2.BucketItem, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Key$k__BackingField", TKey, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Value$k__BackingField", TValue, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Key, [], TKey, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Key, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TKey, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Value, [], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.BucketItem.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Key, [], TKey, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Key, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TKey, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Value, [], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], [])], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.BucketItem$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.BucketItem, arguments);
        };
        $p.$Key$k__BackingField = null;
        $p.get_Key = function() {
            return this.$Key$k__BackingField;
        };
        $p.set_Key = function(value) {
            this.$Key$k__BackingField = value;
        };
        $p.$Value$k__BackingField = null;
        $p.get_Value = function() {
            return this.$Value$k__BackingField;
        };
        $p.set_Value = function(value) {
            this.$Value$k__BackingField = value;
        };
        $p.$ctor = function(key, value) {
            System.Object.prototype.$ctor.call(this);
            this.set_Key(key);
            this.set_Value(value);
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(key, value) {
            return new $p.$ctor.$type(this, key, value);
        };
    }).call($t, $t.BucketItem, $t.BucketItem.prototype);
    $mscorlib$AssemblyTypes.push($t.BucketItem);
    function DictionaryKeys($constructor) {
        if (!$t.DictionaryKeys.$isStaticInitialized && ($constructor != null || !(this instanceof System.Collections.Generic.Dictionary$2.DictionaryKeys))) {
            $t.DictionaryKeys.$isStaticInitialized = true;
            $t.DictionaryKeys.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Collections.Generic.Dictionary$2.DictionaryKeys))
            return $t.DictionaryKeys;
    }
    $t.DictionaryKeys = DictionaryKeys;
    $t.DictionaryKeys.prototype = new System.Object();
    ($t.DictionaryKeys.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Collections.Generic.Dictionary$2.DictionaryKeys;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.DictionaryKeys";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DictionaryKeys", []);this.$type.Init("System.Collections.Generic.Dictionary`2.DictionaryKeys", System.Collections.Generic.Dictionary$2.DictionaryKeys, System.Object, [System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo$1", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.CopyTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Object.$$MakeArrayType(TKey), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.DictionaryKeys$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.DictionaryKeys, arguments);
        };
        $p.dictionary = null;
        $p.$ctor = function(dictionary) {
            System.Object.prototype.$ctor.call(this);
            this.dictionary = dictionary;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(dictionary) {
            return new $p.$ctor.$type(this, dictionary);
        };
        $p.Contains = function(item) {
            return this.dictionary.ContainsKey(item);
        };
        $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
        $p.get_Count = function() {
            return this.dictionary.get_Count();
        };
        $p.GetEnumerator = function() {
            return System.Linq.Enumerable.Select(
                ((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), 
                TKey, 
                System.Linq.Enumerable.SelectMany(
                    ((System.Collections.Generic.Dictionary$2$(TKey, TValue)).Bucket$()), 
                    ((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), 
                    this.dictionary.buckets, 
                    $delegate(this, (System.Func$2$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).Bucket$()), (System.Collections.Generic.IEnumerable$1$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()))))), function(x) {
                        return x.Items;
                    })
                ), 
                $delegate(this, (System.Func$2$(((System.Collections.Generic.Dictionary$2$(TKey, TValue)).BucketItem$()), TKey)), function(x) {
                    return x.get_Key();
                })
            ).System$Collections$Generic$IEnumerable$1$GetEnumerator();
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.System$Collections$IEnumerable$GetEnumerator = function() {
            return this.GetEnumerator();
        };
        $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
        $p.get_SyncRoot = function() {
            return this.dictionary.get_SyncRoot();
        };
        $p.get_IsSynchronized = function() {
            return this.dictionary.get_IsSynchronized();
        };
        $p.CopyTo = function(array, index) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
        $p.get_IsReadOnly = function() {
            return true;
        };
        $p.Add = function(item) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
        $p.Clear = function() {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
        $p.CopyTo$1 = function(array, arrayIndex) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
        $p.Remove = function(item) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    }).call($t, $t.DictionaryKeys, $t.DictionaryKeys.prototype);
    $mscorlib$AssemblyTypes.push($t.DictionaryKeys);
}).call(null, System.Collections.Generic.Dictionary$2, System.Collections.Generic.Dictionary$2.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Dictionary$2);
System.Collections.Generic.GenericComparer$1 = $define("System.Collections.Generic.GenericComparer<T>");
System.Collections.Generic.GenericComparer$1.prototype = new System.Collections.Generic.Comparer$1();
(System.Collections.Generic.GenericComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.GenericComparer$1;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.GenericComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GenericComparer", []);this.$type.Init("System.Collections.Generic.GenericComparer`1", System.Collections.Generic.GenericComparer$1, (System.Collections.Generic.Comparer$1$(T)), [System.Collections.Generic.IComparer$1, System.Collections.IComparer], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.GenericComparer$1.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.GenericComparer$1.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.GenericComparer$1.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.GenericComparer$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.GenericComparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.GenericComparer$1, arguments);
    };
    $p.$ctor = function() {
        (System.Collections.Generic.Comparer$1$(T)).prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(x, y) {
        if ($cast(System.Object, x) != null) {
            if ($cast(System.Object, y) != null)
                return x.System$IComparable$1$CompareTo(y);
            else
                return 1;
        }
        else
            return $cast(System.Object, y) != null ? -1 : 0;
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.Equals = function(obj) {
        return (System.Collections.Generic.GenericComparer$1$(T)).$GetType().IsInstanceOfType(obj);
    };
    $p.GetHashCode = function() {
        return this.GetType().get_Name().GetHashCode();
    };
}).call(null, System.Collections.Generic.GenericComparer$1, System.Collections.Generic.GenericComparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.GenericComparer$1);
System.Collections.Generic.HashSet$1 = $define("System.Collections.Generic.HashSet<T>");
System.Collections.Generic.HashSet$1.prototype = new System.Object();
(System.Collections.Generic.HashSet$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.HashSet$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.HashSet`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("HashSet", []);this.$type.Init("System.Collections.Generic.HashSet`1", System.Collections.Generic.HashSet$1, System.Object, [System.Collections.Generic.ISet$1, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("storage", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.Collections.Generic.HashSet$1.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.HashSet$1.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.HashSet$1.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.HashSet$1.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.HashSet$1.prototype.CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.HashSet$1.prototype.GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.HashSet$1.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$T$$Add", System.Collections.Generic.HashSet$1.prototype.System$Collections$Generic$ICollection$T$$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.HashSet$1.prototype.Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.HashSet$1.prototype.Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo$1", System.Collections.Generic.HashSet$1.prototype.CopyTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Object.$$MakeArrayType(T), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.HashSet$1.prototype.Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.HashSet$1.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("UnionWith", System.Collections.Generic.HashSet$1.prototype.UnionWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IntersectWith", System.Collections.Generic.HashSet$1.prototype.IntersectWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ExceptWith", System.Collections.Generic.HashSet$1.prototype.ExceptWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SymmetricExceptWith", System.Collections.Generic.HashSet$1.prototype.SymmetricExceptWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSubsetOf", System.Collections.Generic.HashSet$1.prototype.IsSubsetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSupersetOf", System.Collections.Generic.HashSet$1.prototype.IsSupersetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSupersetOf", System.Collections.Generic.HashSet$1.prototype.IsProperSupersetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSubsetOf", System.Collections.Generic.HashSet$1.prototype.IsProperSubsetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Overlaps", System.Collections.Generic.HashSet$1.prototype.Overlaps, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetEquals", System.Collections.Generic.HashSet$1.prototype.SetEquals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.HashSet$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.HashSet$1.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.HashSet$1.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.HashSet$1.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.HashSet$1.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.HashSet$1.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.HashSet$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.HashSet$1, arguments);
    };
    $p.storage = null;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.storage = (System.Collections.Generic.Dictionary$2$(T, T)).prototype.$ctor.$new();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(source) {
        System.Object.prototype.$ctor.call(this);
        this.storage = (System.Collections.Generic.Dictionary$2$(T, T)).prototype.$ctor.$new();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                this.Add(item);
            }
        }
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(source) {
        return new $p.$ctor$1.$type(this, source);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.get_Count = function() {
        return this.storage.get_Count();
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.CopyTo = function(array, index) {
        var i = 0;
        {
            var $anon$1iterator = this;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                array[i++] = item;
            }
        }
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.GetEnumerator = function() {
        return this.storage.get_Keys().System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.System$Collections$Generic$ICollection$T$$Add = function(item) {
        this.storage.set_Item(item, item);
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.System$Collections$Generic$ICollection$T$$Add;
    $p.Clear = function() {
        this.storage.Clear();
    };
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.Contains = function(item) {
        return this.storage.ContainsKey(item);
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {
        var i = 0;
        {
            var $anon$1iterator = this;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                array[i++] = item;
            }
        }
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.Remove = function(item) {
        return this.storage.Remove(item);
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    $p.Add = function(item) {
        if (!this.storage.ContainsKey(item)) {
            this.storage.set_Item(item, item);
            return true;
        }
        return false;
    };
    $p.System$Collections$Generic$ISet$1$Add = $p.Add;
    $p.UnionWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$UnionWith = $p.UnionWith;
    $p.IntersectWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IntersectWith = $p.IntersectWith;
    $p.ExceptWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$ExceptWith = $p.ExceptWith;
    $p.SymmetricExceptWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$SymmetricExceptWith = $p.SymmetricExceptWith;
    $p.IsSubsetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsSubsetOf = $p.IsSubsetOf;
    $p.IsSupersetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsSupersetOf = $p.IsSupersetOf;
    $p.IsProperSupersetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsProperSupersetOf = $p.IsProperSupersetOf;
    $p.IsProperSubsetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsProperSubsetOf = $p.IsProperSubsetOf;
    $p.Overlaps = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$Overlaps = $p.Overlaps;
    $p.SetEquals = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$SetEquals = $p.SetEquals;
}).call(null, System.Collections.Generic.HashSet$1, System.Collections.Generic.HashSet$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.HashSet$1);
System.Collections.Generic.ICollection$1 = $define("System.Collections.Generic.ICollection<T>");
System.Collections.Generic.ICollection$1.prototype = new System.Object();
(System.Collections.Generic.ICollection$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.ICollection$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.ICollection`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICollection", []);this.$type.Init("System.Collections.Generic.ICollection`1", System.Collections.Generic.ICollection$1, null, [System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$get_Count", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$get_IsReadOnly", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$Add", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$Clear", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$Contains", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$CopyTo", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Object.$$MakeArrayType(T), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$Remove", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$get_Count", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ICollection$1$get_IsReadOnly", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.ICollection$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.ICollection$1, arguments);
    };
    $p.get_Count = function() {
    };
    $p.get_IsReadOnly = function() {
    };
    $p.System$Collections$Generic$ICollection$1$Add = function(item) {
    };
    $p.System$Collections$Generic$ICollection$1$Clear = function() {
    };
    $p.System$Collections$Generic$ICollection$1$Contains = function(item) {
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = function(array, arrayIndex) {
    };
    $p.System$Collections$Generic$ICollection$1$Remove = function(item) {
    };
}).call(null, System.Collections.Generic.ICollection$1, System.Collections.Generic.ICollection$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ICollection$1);
System.Collections.Generic.IComparer$1 = $define("System.Collections.Generic.IComparer<T>");
System.Collections.Generic.IComparer$1.prototype = new System.Object();
(System.Collections.Generic.IComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IComparer$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparer", []);this.$type.Init("System.Collections.Generic.IComparer`1", System.Collections.Generic.IComparer$1, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IComparer$1$Compare", System.Collections.Generic.IComparer$1.prototype.System$Collections$Generic$IComparer$1$Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IComparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IComparer$1, arguments);
    };
    $p.System$Collections$Generic$IComparer$1$Compare = function(x, y) {
    };
}).call(null, System.Collections.Generic.IComparer$1, System.Collections.Generic.IComparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IComparer$1);
System.Collections.Generic.IDictionary$2 = $define("System.Collections.Generic.IDictionary<TKey, TValue>");
System.Collections.Generic.IDictionary$2.prototype = new System.Object();
(System.Collections.Generic.IDictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IDictionary$2;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IDictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionary", []);this.$type.Init("System.Collections.Generic.IDictionary`2", System.Collections.Generic.IDictionary$2, null, [System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$set_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Keys", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Keys, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Values", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Values, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$ContainsKey", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$ContainsKey, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$Add", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$Remove", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$TryGetValue", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$TryGetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$set_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Keys", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Keys, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IDictionary$2$get_Values", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Values, [], System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IDictionary$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IDictionary$2, arguments);
    };
    $p.System$Collections$Generic$IDictionary$2$get_Item = function(key) {
    };
    $p.System$Collections$Generic$IDictionary$2$set_Item = function(key, value) {
    };
    $p.get_Keys = function() {
    };
    $p.get_Values = function() {
    };
    $p.System$Collections$Generic$IDictionary$2$ContainsKey = function(key) {
    };
    $p.System$Collections$Generic$IDictionary$2$Add = function(key, value) {
    };
    $p.System$Collections$Generic$IDictionary$2$Remove = function(key) {
    };
    $p.System$Collections$Generic$IDictionary$2$TryGetValue = function(key, value) {
    };
}).call(null, System.Collections.Generic.IDictionary$2, System.Collections.Generic.IDictionary$2.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IDictionary$2);
System.Collections.Generic.IEnumerable$1 = $define("System.Collections.Generic.IEnumerable<T>");
System.Collections.Generic.IEnumerable$1.prototype = new System.Object();
(System.Collections.Generic.IEnumerable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IEnumerable$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEnumerable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerable", []);this.$type.Init("System.Collections.Generic.IEnumerable`1", System.Collections.Generic.IEnumerable$1, null, [System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEnumerable$1$GetEnumerator", System.Collections.Generic.IEnumerable$1.prototype.System$Collections$Generic$IEnumerable$1$GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IEnumerable$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IEnumerable$1, arguments);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = function() {
    };
}).call(null, System.Collections.Generic.IEnumerable$1, System.Collections.Generic.IEnumerable$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEnumerable$1);
System.Collections.Generic.IEnumerator$1 = $define("System.Collections.Generic.IEnumerator<T>");
System.Collections.Generic.IEnumerator$1.prototype = new System.Object();
(System.Collections.Generic.IEnumerator$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IEnumerator$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEnumerator`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerator", []);this.$type.Init("System.Collections.Generic.IEnumerator`1", System.Collections.Generic.IEnumerator$1, null, [System.Collections.IEnumerator, System.IDisposable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEnumerator$1$get_Current", System.Collections.Generic.IEnumerator$1.prototype.System$Collections$Generic$IEnumerator$1$get_Current, [], T, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEnumerator$1$get_Current", System.Collections.Generic.IEnumerator$1.prototype.System$Collections$Generic$IEnumerator$1$get_Current, [], T, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IEnumerator$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IEnumerator$1, arguments);
    };
    $p.get_Current = function() {
    };
}).call(null, System.Collections.Generic.IEnumerator$1, System.Collections.Generic.IEnumerator$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEnumerator$1);
System.Collections.Generic.IEqualityComparer$1 = $define("System.Collections.Generic.IEqualityComparer<T>");
System.Collections.Generic.IEqualityComparer$1.prototype = new System.Object();
(System.Collections.Generic.IEqualityComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IEqualityComparer$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEqualityComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEqualityComparer", []);this.$type.Init("System.Collections.Generic.IEqualityComparer`1", System.Collections.Generic.IEqualityComparer$1, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEqualityComparer$1$Equals", System.Collections.Generic.IEqualityComparer$1.prototype.System$Collections$Generic$IEqualityComparer$1$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IEqualityComparer$1$GetHashCode", System.Collections.Generic.IEqualityComparer$1.prototype.System$Collections$Generic$IEqualityComparer$1$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", T, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IEqualityComparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IEqualityComparer$1, arguments);
    };
    $p.System$Collections$Generic$IEqualityComparer$1$Equals = function(x, y) {
    };
    $p.System$Collections$Generic$IEqualityComparer$1$GetHashCode = function(obj) {
    };
}).call(null, System.Collections.Generic.IEqualityComparer$1, System.Collections.Generic.IEqualityComparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEqualityComparer$1);
System.Collections.Generic.IReadOnlyCollection$1 = $define("System.Collections.Generic.IReadOnlyCollection<T>");
System.Collections.Generic.IReadOnlyCollection$1.prototype = new System.Object();
(System.Collections.Generic.IReadOnlyCollection$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IReadOnlyCollection$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IReadOnlyCollection`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IReadOnlyCollection", []);this.$type.Init("System.Collections.Generic.IReadOnlyCollection`1", System.Collections.Generic.IReadOnlyCollection$1, null, [System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyCollection$1$get_Count", System.Collections.Generic.IReadOnlyCollection$1.prototype.System$Collections$Generic$IReadOnlyCollection$1$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyCollection$1$get_Count", System.Collections.Generic.IReadOnlyCollection$1.prototype.System$Collections$Generic$IReadOnlyCollection$1$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IReadOnlyCollection$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IReadOnlyCollection$1, arguments);
    };
    $p.get_Count = function() {
    };
}).call(null, System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IReadOnlyCollection$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IReadOnlyCollection$1);
System.Collections.Generic.IReadOnlyDictionary$2 = $define("System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>");
System.Collections.Generic.IReadOnlyDictionary$2.prototype = new System.Object();
(System.Collections.Generic.IReadOnlyDictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IReadOnlyDictionary$2;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IReadOnlyDictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IReadOnlyDictionary", []);this.$type.Init("System.Collections.Generic.IReadOnlyDictionary`2", System.Collections.Generic.IReadOnlyDictionary$2, null, [System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Item", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Keys", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Values", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Values, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Item", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], TValue, System.Reflection.MethodAttributes().Public, []), null, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Keys", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IReadOnlyDictionary$2$get_Values", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Values, [], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IReadOnlyDictionary$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IReadOnlyDictionary$2, arguments);
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Item = function(key) {
    };
    $p.get_Keys = function() {
    };
    $p.get_Values = function() {
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey = function(key) {
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue = function(key, value) {
    };
}).call(null, System.Collections.Generic.IReadOnlyDictionary$2, System.Collections.Generic.IReadOnlyDictionary$2.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IReadOnlyDictionary$2);
System.Collections.Generic.KeyNotFoundException = $define("System.Collections.Generic.KeyNotFoundException");
System.Collections.Generic.KeyNotFoundException.prototype = new System.Exception();
(System.Collections.Generic.KeyNotFoundException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.KeyNotFoundException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.Collections.Generic.KeyNotFoundException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("KeyNotFoundException", []);this.$type.Init("System.Collections.Generic.KeyNotFoundException", System.Collections.Generic.KeyNotFoundException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.KeyNotFoundException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.KeyNotFoundException.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Collections.Generic.KeyNotFoundException.prototype.$ctor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.Collections.Generic.KeyNotFoundException, System.Collections.Generic.KeyNotFoundException.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.KeyNotFoundException);
System.Collections.Generic.KeyValuePair$2 = $define("System.Collections.Generic.KeyValuePair<TKey, TValue>");
System.Collections.Generic.KeyValuePair$2.prototype = new System.ValueType();
(System.Collections.Generic.KeyValuePair$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.KeyValuePair$2;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Collections.Generic.KeyValuePair`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("KeyValuePair", []);this.$type.Init("System.Collections.Generic.KeyValuePair`2", System.Collections.Generic.KeyValuePair$2, System.ValueType, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("key", TKey, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("value", TValue, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.KeyValuePair$2.prototype.get_Key, [], TKey, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.KeyValuePair$2.prototype.get_Value, [], TValue, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Collections.Generic.KeyValuePair$2.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.KeyValuePair$2.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.KeyValuePair$2.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.KeyValuePair$2.prototype.get_Key, [], TKey, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.KeyValuePair$2.prototype.get_Value, [], TValue, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.KeyValuePair$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.KeyValuePair$2, arguments);
    };
    $p.key = null;
    $p.value = null;
    $p.get_Key = function() {
        return this.key;
    };
    $p.get_Value = function() {
        return this.value;
    };
    $p.$ctor$1 = function(key, value) {
        System.ValueType.prototype.$ctor.call(this);
        this.key = key;
        this.value = value;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(key, value) {
        return new $p.$ctor$1.$type(this, key, value);
    };
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append("[");
        if (this.get_Key() != null)
            sb.Append$2(this.get_Key().ToString());
        sb.Append$2(", ");
        if (this.get_Value() != null)
            sb.Append$2(this.get_Value().ToString());
        sb.Append("]");
        return sb.ToString();
    };
}).call(null, System.Collections.Generic.KeyValuePair$2, System.Collections.Generic.KeyValuePair$2.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.KeyValuePair$2);
System.Collections.Generic.ObjectComparer$1 = $define("System.Collections.Generic.ObjectComparer<T>");
System.Collections.Generic.ObjectComparer$1.prototype = new System.Collections.Generic.Comparer$1();
(System.Collections.Generic.ObjectComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.ObjectComparer$1;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.ObjectComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ObjectComparer", []);this.$type.Init("System.Collections.Generic.ObjectComparer`1", System.Collections.Generic.ObjectComparer$1, (System.Collections.Generic.Comparer$1$(T)), [System.Collections.Generic.IComparer$1, System.Collections.IComparer], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.ObjectComparer$1.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.ObjectComparer$1.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.ObjectComparer$1.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.ObjectComparer$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.ObjectComparer$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.ObjectComparer$1, arguments);
    };
    $p.$ctor = function() {
        (System.Collections.Generic.Comparer$1$(T)).prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(x, y) {
        return System.Collections.Comparer().Default.Compare($cast(System.Object, x), $cast(System.Object, y));
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.Equals = function(obj) {
        return (System.Collections.Generic.ObjectComparer$1$(T)).$GetType().IsInstanceOfType(obj);
    };
    $p.GetHashCode = function() {
        return this.GetType().get_Name().GetHashCode();
    };
}).call(null, System.Collections.Generic.ObjectComparer$1, System.Collections.Generic.ObjectComparer$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ObjectComparer$1);
System.Collections.IComparer = $define("System.Collections.IComparer");
System.Collections.IComparer.prototype = new System.Object();
(System.Collections.IComparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IComparer;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IComparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparer", []);this.$type.Init("System.Collections.IComparer", System.Collections.IComparer, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IComparer$Compare", System.Collections.IComparer.prototype.System$Collections$IComparer$Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IComparer$Compare = function(x, y) {
    };
}).call(null, System.Collections.IComparer, System.Collections.IComparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IComparer);
System.Collections.IDictionary = $define("System.Collections.IDictionary");
System.Collections.IDictionary.prototype = new System.Object();
(System.Collections.IDictionary.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IDictionary;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IDictionary";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionary", []);this.$type.Init("System.Collections.IDictionary", System.Collections.IDictionary, null, [System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$set_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Keys", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Keys, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Values", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Values, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_IsReadOnly", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_IsFixedSize", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Contains", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Add", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Clear", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$GetEnumerator", System.Collections.IDictionary.prototype.System$Collections$IDictionary$GetEnumerator, [], System.Collections.IDictionaryEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$Remove", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$set_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Keys", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Keys, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_Values", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Values, [], System.Collections.ICollection, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_IsReadOnly", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionary$get_IsFixedSize", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IDictionary$get_Item = function(key) {
    };
    $p.System$Collections$IDictionary$set_Item = function(key, value) {
    };
    $p.get_Keys = function() {
    };
    $p.get_Values = function() {
    };
    $p.get_IsReadOnly = function() {
    };
    $p.get_IsFixedSize = function() {
    };
    $p.System$Collections$IDictionary$Contains = function(key) {
    };
    $p.System$Collections$IDictionary$Add = function(key, value) {
    };
    $p.System$Collections$IDictionary$Clear = function() {
    };
    $p.System$Collections$IDictionary$GetEnumerator = function() {
    };
    $p.System$Collections$IDictionary$Remove = function(key) {
    };
}).call(null, System.Collections.IDictionary, System.Collections.IDictionary.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IDictionary);
System.Collections.IDictionaryEnumerator = $define("System.Collections.IDictionaryEnumerator");
System.Collections.IDictionaryEnumerator.prototype = new System.Object();
(System.Collections.IDictionaryEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IDictionaryEnumerator;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IDictionaryEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionaryEnumerator", []);this.$type.Init("System.Collections.IDictionaryEnumerator", System.Collections.IDictionaryEnumerator, null, [System.Collections.IEnumerator], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Key", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Key, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Value", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Entry", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Entry, [], System.Collections.DictionaryEntry, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Key", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Key, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Value", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Entry", System.Collections.DictionaryEntry, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IDictionaryEnumerator$get_Entry", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Entry, [], System.Collections.DictionaryEntry, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.get_Key = function() {
    };
    $p.get_Value = function() {
    };
    $p.get_Entry = function() {
    };
}).call(null, System.Collections.IDictionaryEnumerator, System.Collections.IDictionaryEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IDictionaryEnumerator);
System.Collections.IEqualityComparer = $define("System.Collections.IEqualityComparer");
System.Collections.IEqualityComparer.prototype = new System.Object();
(System.Collections.IEqualityComparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IEqualityComparer;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEqualityComparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEqualityComparer", []);this.$type.Init("System.Collections.IEqualityComparer", System.Collections.IEqualityComparer, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEqualityComparer$Equals", System.Collections.IEqualityComparer.prototype.System$Collections$IEqualityComparer$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEqualityComparer$GetHashCode", System.Collections.IEqualityComparer.prototype.System$Collections$IEqualityComparer$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IEqualityComparer$Equals = function(x, y) {
    };
    $p.System$Collections$IEqualityComparer$GetHashCode = function(obj) {
    };
}).call(null, System.Collections.IEqualityComparer, System.Collections.IEqualityComparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEqualityComparer);
System.Collections.Generic.IList$1 = $define("System.Collections.Generic.IList<T>");
System.Collections.Generic.IList$1.prototype = new System.Object();
(System.Collections.Generic.IList$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.IList$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IList`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IList", []);this.$type.Init("System.Collections.Generic.IList`1", System.Collections.Generic.IList$1, null, [System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$get_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$set_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$IndexOf", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$IndexOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$Insert", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$Insert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$RemoveAt", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$RemoveAt, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$get_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$IList$1$set_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.IList$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.IList$1, arguments);
    };
    $p.System$Collections$Generic$IList$1$get_Item = function(index) {
    };
    $p.System$Collections$Generic$IList$1$set_Item = function(index, value) {
    };
    $p.System$Collections$Generic$IList$1$IndexOf = function(item) {
    };
    $p.System$Collections$Generic$IList$1$Insert = function(index, item) {
    };
    $p.System$Collections$Generic$IList$1$RemoveAt = function(index) {
    };
}).call(null, System.Collections.Generic.IList$1, System.Collections.Generic.IList$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IList$1);
System.Collections.Generic.ISet$1 = $define("System.Collections.Generic.ISet<T>");
System.Collections.Generic.ISet$1.prototype = new System.Object();
(System.Collections.Generic.ISet$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.ISet$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.ISet`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ISet", []);this.$type.Init("System.Collections.Generic.ISet`1", System.Collections.Generic.ISet$1, null, [System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$Add", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$UnionWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$UnionWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$IntersectWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IntersectWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$ExceptWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$ExceptWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$SymmetricExceptWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$SymmetricExceptWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$IsSubsetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsSubsetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$IsSupersetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsSupersetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$IsProperSupersetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsProperSupersetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$IsProperSubsetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsProperSubsetOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$Overlaps", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$Overlaps, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$Generic$ISet$1$SetEquals", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$SetEquals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.ISet$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.ISet$1, arguments);
    };
    $p.System$Collections$Generic$ISet$1$Add = function(item) {
    };
    $p.System$Collections$Generic$ISet$1$UnionWith = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$IntersectWith = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$ExceptWith = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$SymmetricExceptWith = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$IsSubsetOf = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$IsSupersetOf = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$IsProperSupersetOf = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$IsProperSubsetOf = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$Overlaps = function(other) {
    };
    $p.System$Collections$Generic$ISet$1$SetEquals = function(other) {
    };
}).call(null, System.Collections.Generic.ISet$1, System.Collections.Generic.ISet$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ISet$1);
System.Collections.Generic.List$1 = $define("System.Collections.Generic.List<T>");
System.Collections.Generic.List$1.prototype = new System.Object();
(System.Collections.Generic.List$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.Generic.List$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.List`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("List", []);this.$type.Init("System.Collections.Generic.List`1", System.Collections.Generic.List$1, System.Object, [System.Collections.Generic.IList$1, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.List$1.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.List$1.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.List$1.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.Collections.Generic.List$1.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.List$1.prototype.CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$set_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.List$1.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.List$1.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add$1", System.Collections.Generic.List$1.prototype.Add$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains$1", System.Collections.Generic.List$1.prototype.Contains$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.List$1.prototype.Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf$1", System.Collections.Generic.List$1.prototype.IndexOf$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert$1", System.Collections.Generic.List$1.prototype.Insert$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove$1", System.Collections.Generic.List$1.prototype.Remove$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveAt", System.Collections.Generic.List$1.prototype.RemoveAt, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.List$1.prototype.GetEnumerator, [], System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.List$1.prototype.Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.List$1.prototype.Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo$1", System.Collections.Generic.List$1.prototype.CopyTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Object.$$MakeArrayType(T), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.List$1.prototype.Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.List$1.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.List$1.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.Generic.List$1.prototype.IndexOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert", System.Collections.Generic.List$1.prototype.Insert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.List$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.List$1.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("collection", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.List$1.prototype.get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.List$1.prototype.get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.List$1.prototype.get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IList.this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$set_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.List$1.prototype.get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.List$1.prototype.get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.List$1.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.List$1.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Collections.Generic.List$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Collections.Generic.List$1, arguments);
    };
    $p.storage = null;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.storage = new Array();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(collection) {
        System.Object.prototype.$ctor.call(this);
        this.storage = new Array();
        {
            var $anon$1iterator = collection;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                this.Add(item);
            }
        }
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(collection) {
        return new $p.$ctor$1.$type(this, collection);
    };
    $p.get_Count = function() {
        return this.storage.length;
    };
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.CopyTo = function(array, index) {
        for (var i = index; i < array.length; i++) {
            array[i] = this.get_Item(i - index);
        }
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.System$Collections$IList$get_Item = function(index) {
        return this.get_Item(index);
    };
    $p.System$Collections$IList$set_Item = function(index, value) {
        this.set_Item(index, $cast(T, value));
    };
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.get_IsFixedSize = function() {
        return false;
    };
    $p.Add$1 = function(value) {
        this.storage.push(value);
        return this.storage.length;
    };
    $p.System$Collections$IList$Add = $p.Add$1;
    $p.Contains$1 = function(value) {
        return this.storage.indexOf(value) >= 0;
    };
    $p.System$Collections$IList$Contains = $p.Contains$1;
    $p.Clear = function() {
        this.storage.length = 0;
    };
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.System$Collections$IList$Clear = $p.Clear;
    $p.IndexOf$1 = function(value) {
        return this.storage.indexOf(value);
    };
    $p.System$Collections$IList$IndexOf = $p.IndexOf$1;
    $p.Insert$1 = function(index, value) {
        this.storage.splice(index, 0, value);
    };
    $p.System$Collections$IList$Insert = $p.Insert$1;
    $p.Remove$1 = function(value) {
        var index = this.IndexOf$1(value);
        if (index >= 0)
            this.RemoveAt(index);
    };
    $p.System$Collections$IList$Remove = $p.Remove$1;
    $p.RemoveAt = function(index) {
        this.storage.splice(index, 1);
    };
    $p.System$Collections$Generic$IList$1$RemoveAt = $p.RemoveAt;
    $p.System$Collections$IList$RemoveAt = $p.RemoveAt;
    $p.GetEnumerator = function() {
        return ((System.Collections.Generic.List$1$(T)).ListEnumerator$()).prototype.$ctor.$new(this);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.Add = function(item) {
        this.storage.push(item);
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
    $p.Contains = function(item) {
        return this.storage.indexOf(item) >= 0;
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {
        for (var i = arrayIndex; i < array.length; i++) {
            array[i] = this.get_Item(i - arrayIndex);
        }
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.Remove = function(item) {
        var index = this.IndexOf(item);
        if (index >= 0) {
            this.RemoveAt(index);
            return true;
        }
        return false;
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    $p.get_Item = function(index) {
        return this.storage[index];
    };
    $p.set_Item = function(index, value) {
        this.storage[index] = value;
    };
    $p.IndexOf = function(item) {
        return this.storage.indexOf(item);
    };
    $p.System$Collections$Generic$IList$1$IndexOf = $p.IndexOf;
    $p.Insert = function(index, item) {
        this.storage.splice(index, 0, item);
    };
    $p.System$Collections$Generic$IList$1$Insert = $p.Insert;
    function ListEnumerator($constructor) {
        if (!$t.ListEnumerator.$isStaticInitialized && ($constructor != null || !(this instanceof System.Collections.Generic.List$1.ListEnumerator))) {
            $t.ListEnumerator.$isStaticInitialized = true;
            $t.ListEnumerator.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Collections.Generic.List$1.ListEnumerator))
            return $t.ListEnumerator;
    }
    $t.ListEnumerator = ListEnumerator;
    $t.ListEnumerator.prototype = new System.Object();
    ($t.ListEnumerator.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Collections.Generic.List$1.ListEnumerator;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.List`1.ListEnumerator";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ListEnumerator", []);this.$type.Init("System.Collections.Generic.List`1.ListEnumerator", System.Collections.Generic.List$1.ListEnumerator, System.Object, [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable], [System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("list", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.Collections.Generic.List$1.ListEnumerator.prototype.Dispose, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.Generic.List$1.ListEnumerator.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.Collections.Generic.List$1.ListEnumerator.prototype.Reset, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.get_Current, [], T, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.List$1.ListEnumerator.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("list", System.Collections.Generic.List$1, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Private, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.get_Current, [], T, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.ListEnumerator$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.ListEnumerator, arguments);
        };
        $p.index = null;
        $p.list = null;
        $p.$ctor = function(list) {
            System.Object.prototype.$ctor.call(this);
            this.index = -1;
            this.list = list;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(list) {
            return new $p.$ctor.$type(this, list);
        };
        $p.Dispose = function() {
        };
        $p.System$IDisposable$Dispose = $p.Dispose;
        $p.get_System$Collections$IEnumerator$Current = function() {
            return this.get_Current();
        };
        $p.MoveNext = function() {
            this.index++;
            return this.index < this.list.get_Count();
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Reset = function() {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$IEnumerator$Reset = $p.Reset;
        $p.get_Current = function() {
            return this.list.get_Item(this.index);
        };
    }).call($t, $t.ListEnumerator, $t.ListEnumerator.prototype);
    $mscorlib$AssemblyTypes.push($t.ListEnumerator);
}).call(null, System.Collections.Generic.List$1, System.Collections.Generic.List$1.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.List$1);
System.Collections.ICollection = $define("System.Collections.ICollection");
System.Collections.ICollection.prototype = new System.Object();
(System.Collections.ICollection.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.ICollection;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.ICollection";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICollection", []);this.$type.Init("System.Collections.ICollection", System.Collections.ICollection, null, [System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_Count", System.Collections.ICollection.prototype.System$Collections$ICollection$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_SyncRoot", System.Collections.ICollection.prototype.System$Collections$ICollection$get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_IsSynchronized", System.Collections.ICollection.prototype.System$Collections$ICollection$get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$CopyTo", System.Collections.ICollection.prototype.System$Collections$ICollection$CopyTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_Count", System.Collections.ICollection.prototype.System$Collections$ICollection$get_Count, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_SyncRoot", System.Collections.ICollection.prototype.System$Collections$ICollection$get_SyncRoot, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$ICollection$get_IsSynchronized", System.Collections.ICollection.prototype.System$Collections$ICollection$get_IsSynchronized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.get_Count = function() {
    };
    $p.get_SyncRoot = function() {
    };
    $p.get_IsSynchronized = function() {
    };
    $p.System$Collections$ICollection$CopyTo = function(array, index) {
    };
}).call(null, System.Collections.ICollection, System.Collections.ICollection.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.ICollection);
System.Collections.IEnumerable = $define("System.Collections.IEnumerable");
System.Collections.IEnumerable.prototype = new System.Object();
(System.Collections.IEnumerable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IEnumerable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEnumerable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerable", []);this.$type.Init("System.Collections.IEnumerable", System.Collections.IEnumerable, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerable$GetEnumerator", System.Collections.IEnumerable.prototype.System$Collections$IEnumerable$GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
    };
}).call(null, System.Collections.IEnumerable, System.Collections.IEnumerable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEnumerable);
System.Collections.IEnumerator = $define("System.Collections.IEnumerator");
System.Collections.IEnumerator.prototype = new System.Object();
(System.Collections.IEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IEnumerator;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerator", []);this.$type.Init("System.Collections.IEnumerator", System.Collections.IEnumerator, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$MoveNext", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$Reset", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$Reset, [], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IEnumerator$get_Current", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$get_Current, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.get_Current = function() {
    };
    $p.System$Collections$IEnumerator$MoveNext = function() {
    };
    $p.System$Collections$IEnumerator$Reset = function() {
    };
}).call(null, System.Collections.IEnumerator, System.Collections.IEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEnumerator);
System.Collections.IList = $define("System.Collections.IList");
System.Collections.IList.prototype = new System.Object();
(System.Collections.IList.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IList;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IList";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IList", []);this.$type.Init("System.Collections.IList", System.Collections.IList, null, [System.Collections.ICollection, System.Collections.IEnumerable], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_Item", System.Collections.IList.prototype.System$Collections$IList$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$set_Item", System.Collections.IList.prototype.System$Collections$IList$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_IsReadOnly", System.Collections.IList.prototype.System$Collections$IList$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_IsFixedSize", System.Collections.IList.prototype.System$Collections$IList$get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Add", System.Collections.IList.prototype.System$Collections$IList$Add, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Contains", System.Collections.IList.prototype.System$Collections$IList$Contains, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Clear", System.Collections.IList.prototype.System$Collections$IList$Clear, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$IndexOf", System.Collections.IList.prototype.System$Collections$IList$IndexOf, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Insert", System.Collections.IList.prototype.System$Collections$IList$Insert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$Remove", System.Collections.IList.prototype.System$Collections$IList$Remove, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$RemoveAt", System.Collections.IList.prototype.System$Collections$IList$RemoveAt, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_Item", System.Collections.IList.prototype.System$Collections$IList$get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$set_Item", System.Collections.IList.prototype.System$Collections$IList$set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_IsReadOnly", System.Collections.IList.prototype.System$Collections$IList$get_IsReadOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IList$get_IsFixedSize", System.Collections.IList.prototype.System$Collections$IList$get_IsFixedSize, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IList$get_Item = function(index) {
    };
    $p.System$Collections$IList$set_Item = function(index, value) {
    };
    $p.get_IsReadOnly = function() {
    };
    $p.get_IsFixedSize = function() {
    };
    $p.System$Collections$IList$Add = function(value) {
    };
    $p.System$Collections$IList$Contains = function(value) {
    };
    $p.System$Collections$IList$Clear = function() {
    };
    $p.System$Collections$IList$IndexOf = function(value) {
    };
    $p.System$Collections$IList$Insert = function(index, value) {
    };
    $p.System$Collections$IList$Remove = function(value) {
    };
    $p.System$Collections$IList$RemoveAt = function(index) {
    };
}).call(null, System.Collections.IList, System.Collections.IList.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IList);
System.Collections.IStructuralComparable = $define("System.Collections.IStructuralComparable");
System.Collections.IStructuralComparable.prototype = new System.Object();
(System.Collections.IStructuralComparable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IStructuralComparable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IStructuralComparable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IStructuralComparable", []);this.$type.Init("System.Collections.IStructuralComparable", System.Collections.IStructuralComparable, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Collections.IStructuralComparable.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
    };
}).call(null, System.Collections.IStructuralComparable, System.Collections.IStructuralComparable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IStructuralComparable);
System.Collections.IStructuralEquatable = $define("System.Collections.IStructuralEquatable");
System.Collections.IStructuralEquatable.prototype = new System.Object();
(System.Collections.IStructuralEquatable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Collections.IStructuralEquatable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IStructuralEquatable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IStructuralEquatable", []);this.$type.Init("System.Collections.IStructuralEquatable", System.Collections.IStructuralEquatable, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Collections.IStructuralEquatable.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Collections.IStructuralEquatable.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
    };
}).call(null, System.Collections.IStructuralEquatable, System.Collections.IStructuralEquatable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IStructuralEquatable);
System.Console = $define("System.Console");
System.Console.prototype = new System.Object();
(System.Console.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Console;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Console";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Console", []);this.$type.Init("System.Console", System.Console, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("WriteLine$1", System.Console.prototype.WriteLine$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("WriteLine", System.Console.prototype.WriteLine, [System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Console.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.WriteLine$1 = function(s) {
        console.log(s);
    };
    $t.WriteLine = function(o) {
        System.Console.WriteLine$1(o.ToString());
    };
}).call(null, System.Console, System.Console.prototype);
$mscorlib$AssemblyTypes.push(System.Console);
System.Double = $define("double");
System.Double.prototype = new System.ValueType();
(System.Double.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Double;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Double";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Double", []);this.$type.Init("System.Double", System.Double, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Double.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Double.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Double.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Double, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", System.Double.prototype.ToExponential, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential$1", System.Double.prototype.ToExponential$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", System.Double.prototype.ToFixed, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed$1", System.Double.prototype.ToFixed$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", System.Double.prototype.ToPrecision, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision$1", System.Double.prototype.ToPrecision$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("precision", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Double.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Double, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Double.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $t.Parse = function(s) {
        return 0;
    };
    $p.ToExponential = function() {
        return null;
    };
    $p.ToExponential$1 = function(fractionDigits) {
        return null;
    };
    $p.ToFixed = function() {
        return null;
    };
    $p.ToFixed$1 = function(fractionDigits) {
        return null;
    };
    $p.ToPrecision = function() {
        return null;
    };
    $p.ToPrecision$1 = function(precision) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Double, System.Double.prototype);
$mscorlib$AssemblyTypes.push(System.Double);
System.Environment = $define("System.Environment");
System.Environment.prototype = new System.Object();
(System.Environment.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Environment;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Environment";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Environment", []);this.$type.Init("System.Environment", System.Environment, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentManagedThreadId", System.Environment.prototype.get_CurrentManagedThreadId, [], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Environment.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("CurrentManagedThreadId", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentManagedThreadId", System.Environment.prototype.get_CurrentManagedThreadId, [], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.get_CurrentManagedThreadId = function() {
        return 1;
    };
}).call(null, System.Environment, System.Environment.prototype);
$mscorlib$AssemblyTypes.push(System.Environment);
System.FlagsAttribute = $define("System.FlagsAttribute");
System.FlagsAttribute.prototype = new System.Attribute();
(System.FlagsAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.FlagsAttribute;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.FlagsAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FlagsAttribute", [(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(16);$obj$.set_Inherited(false);$obj$.set_AllowMultiple(false);return $obj$;}).call(this)]);this.$type.Init("System.FlagsAttribute", System.FlagsAttribute, System.Attribute, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.FlagsAttribute.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.FlagsAttribute, System.FlagsAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.FlagsAttribute);
System.FormatException = $define("System.FormatException");
System.FormatException.prototype = new System.Exception();
(System.FormatException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.FormatException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.FormatException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FormatException", []);this.$type.Init("System.FormatException", System.FormatException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.FormatException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.FormatException.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.FormatException.prototype.$ctor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.FormatException, System.FormatException.prototype);
$mscorlib$AssemblyTypes.push(System.FormatException);
System.Func$1 = $define("System.Func<TResult>");
System.Func$1.prototype = new System.MulticastDelegate();
(System.Func$1.$TypeInitializer = function($t, $p, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$1;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`1", System.Func$1, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$1.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 1, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$1.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$1.prototype.Invoke, [], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$1, arguments);
    };
}).call(null, System.Func$1, System.Func$1.prototype);
$mscorlib$AssemblyTypes.push(System.Func$1);
System.Func$2 = $define("System.Func<T1, TResult>");
System.Func$2.prototype = new System.MulticastDelegate();
(System.Func$2.$TypeInitializer = function($t, $p, T1, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$2;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`2", System.Func$2, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$2.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 2, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$2.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$2.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$2, arguments);
    };
}).call(null, System.Func$2, System.Func$2.prototype);
$mscorlib$AssemblyTypes.push(System.Func$2);
System.Func$3 = $define("System.Func<T1, T2, TResult>");
System.Func$3.prototype = new System.MulticastDelegate();
(System.Func$3.$TypeInitializer = function($t, $p, T1, T2, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$3;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`3", System.Func$3, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$3.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$3.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$3.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$3.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$3$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$3, arguments);
    };
}).call(null, System.Func$3, System.Func$3.prototype);
$mscorlib$AssemblyTypes.push(System.Func$3);
System.Func$4 = $define("System.Func<T1, T2, T3, TResult>");
System.Func$4.prototype = new System.MulticastDelegate();
(System.Func$4.$TypeInitializer = function($t, $p, T1, T2, T3, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$4;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`4", System.Func$4, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$4.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 4, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$4.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$4.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$4.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$4$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$4, arguments);
    };
}).call(null, System.Func$4, System.Func$4.prototype);
$mscorlib$AssemblyTypes.push(System.Func$4);
System.Func$5 = $define("System.Func<T1, T2, T3, T4, TResult>");
System.Func$5.prototype = new System.MulticastDelegate();
(System.Func$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$5;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`5", System.Func$5, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$5.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 5, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$5.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$5.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$5.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$5$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$5, arguments);
    };
}).call(null, System.Func$5, System.Func$5.prototype);
$mscorlib$AssemblyTypes.push(System.Func$5);
System.Func$6 = $define("System.Func<T1, T2, T3, T4, T5, TResult>");
System.Func$6.prototype = new System.MulticastDelegate();
(System.Func$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$6;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`6", System.Func$6, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$6.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 6, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$6.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$6.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$6.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$6$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$6, arguments);
    };
}).call(null, System.Func$6, System.Func$6.prototype);
$mscorlib$AssemblyTypes.push(System.Func$6);
System.Func$7 = $define("System.Func<T1, T2, T3, T4, T5, T6, TResult>");
System.Func$7.prototype = new System.MulticastDelegate();
(System.Func$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$7;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`7", System.Func$7, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$7.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 7, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$7.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$7.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$7.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$7$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$7, arguments);
    };
}).call(null, System.Func$7, System.Func$7.prototype);
$mscorlib$AssemblyTypes.push(System.Func$7);
System.Func$8 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>");
System.Func$8.prototype = new System.MulticastDelegate();
(System.Func$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$8;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`8", System.Func$8, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$8.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 8, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$8.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$8.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$8.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$8$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$8, arguments);
    };
}).call(null, System.Func$8, System.Func$8.prototype);
$mscorlib$AssemblyTypes.push(System.Func$8);
System.Func$9 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>");
System.Func$9.prototype = new System.MulticastDelegate();
(System.Func$9.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$9;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`9";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`9", System.Func$9, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$9.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 8, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 9, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$9.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$9.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$9.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$9$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$9, arguments);
    };
}).call(null, System.Func$9, System.Func$9.prototype);
$mscorlib$AssemblyTypes.push(System.Func$9);
System.Func$10 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>");
System.Func$10.prototype = new System.MulticastDelegate();
(System.Func$10.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Func$10;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`10";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", []);this.$type.Init("System.Func`10", System.Func$10, System.MulticastDelegate, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$10.prototype.BeginInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 9, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 10, 0, null, [])], System.IAsyncResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$10.prototype.EndInvoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$10.prototype.Invoke, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, [])], TResult, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$10.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Func$10$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Func$10, arguments);
    };
}).call(null, System.Func$10, System.Func$10.prototype);
$mscorlib$AssemblyTypes.push(System.Func$10);
System.Globalization.CompareInfo = $define("System.Globalization.CompareInfo");
System.Globalization.CompareInfo.prototype = new System.Object();
(System.Globalization.CompareInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Globalization.CompareInfo;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Globalization.CompareInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CompareInfo", []);this.$type.Init("System.Globalization.CompareInfo", System.Globalization.CompareInfo, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$1", System.Globalization.CompareInfo.prototype.Compare$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 2, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$4", System.Globalization.CompareInfo.prototype.Compare$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length1", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length2", System.Int32, 5, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$3", System.Globalization.CompareInfo.prototype.Compare$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 4, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$2", System.Globalization.CompareInfo.prototype.Compare$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 3, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$5", System.Globalization.CompareInfo.prototype.Compare$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length1", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length2", System.Int32, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 6, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CompareInfo.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(string1, string2) {
        return this.Compare$1(string1, string2, System.Globalization.CompareOptions().None);
    };
    $p.Compare$1 = function(string1, string2, options) {
        return String.Compare(string1, string2);
    };
    $p.Compare$4 = function(string1, offset1, length1, string2, offset2, length2) {
        return this.Compare$5(
            string1, 
            offset1, 
            length1, 
            string2, 
            offset2, 
            length2, 
            System.Globalization.CompareOptions().None
        );
    };
    $p.Compare$3 = function(string1, offset1, string2, offset2, options) {
        return this.Compare$5(
            string1, 
            offset1, 
            string1 == null ? 0 : string1.length - offset1, 
            string2, 
            offset2, 
            string2 == null ? 0 : string2.length - offset2, 
            options
        );
    };
    $p.Compare$2 = function(string1, offset1, string2, offset2) {
        return this.Compare$3(
            string1, 
            offset1, 
            string2, 
            offset2, 
            System.Globalization.CompareOptions().None
        );
    };
    $p.Compare$5 = function(string1, offset1, length1, string2, offset2, length2, options) {
        return String.Compare$1(String.prototype.Substring.call(string1, offset1, length1), String.prototype.Substring.call(string2, offset2, length2), System.StringComparison().OrdinalIgnoreCase);
    };
}).call(null, System.Globalization.CompareInfo, System.Globalization.CompareInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CompareInfo);
System.Globalization.CompareOptions = $define("System.Globalization.CompareOptions");
System.Globalization.CompareOptions.prototype = new System.Enum();
(System.Globalization.CompareOptions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Globalization.CompareOptions;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Globalization.CompareOptions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CompareOptions", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Globalization.CompareOptions", System.Globalization.CompareOptions, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreCase", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreNonSpace", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreSymbols", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreKanaType", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreWidth", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 268435456, []), System.Reflection.FieldInfo.prototype.$ctor.$new("StringSort", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 536870912, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.Globalization.CompareOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1073741824, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CompareOptions.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.None = 0;
        $t.None$ = $p.$ctor.$new("None", System.Globalization.CompareOptions().None);
        $t.IgnoreCase = 1;
        $t.IgnoreCase$ = $p.$ctor.$new("IgnoreCase", System.Globalization.CompareOptions().IgnoreCase);
        $t.IgnoreNonSpace = 2;
        $t.IgnoreNonSpace$ = $p.$ctor.$new("IgnoreNonSpace", System.Globalization.CompareOptions().IgnoreNonSpace);
        $t.IgnoreSymbols = 4;
        $t.IgnoreSymbols$ = $p.$ctor.$new("IgnoreSymbols", System.Globalization.CompareOptions().IgnoreSymbols);
        $t.IgnoreKanaType = 8;
        $t.IgnoreKanaType$ = $p.$ctor.$new("IgnoreKanaType", System.Globalization.CompareOptions().IgnoreKanaType);
        $t.IgnoreWidth = 16;
        $t.IgnoreWidth$ = $p.$ctor.$new("IgnoreWidth", System.Globalization.CompareOptions().IgnoreWidth);
        $t.OrdinalIgnoreCase = 268435456;
        $t.OrdinalIgnoreCase$ = $p.$ctor.$new("OrdinalIgnoreCase", System.Globalization.CompareOptions().OrdinalIgnoreCase);
        $t.StringSort = 536870912;
        $t.StringSort$ = $p.$ctor.$new("StringSort", System.Globalization.CompareOptions().StringSort);
        $t.Ordinal = 1073741824;
        $t.Ordinal$ = $p.$ctor.$new("Ordinal", System.Globalization.CompareOptions().Ordinal);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Globalization.CompareOptions, System.Globalization.CompareOptions.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CompareOptions);
System.Globalization.CultureInfo = $define("System.Globalization.CultureInfo");
System.Globalization.CultureInfo.prototype = new System.Object();
(System.Globalization.CultureInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Globalization.CultureInfo;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Globalization.CultureInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CultureInfo", []);this.$type.Init("System.Globalization.CultureInfo", System.Globalization.CultureInfo, System.Object, [System.IFormatProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCulture", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCulture", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$CompareInfo$k__BackingField", System.Globalization.CompareInfo, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Globalization.CultureInfo.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Globalization.CultureInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Globalization.CultureInfo.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CompareInfo", System.Globalization.CultureInfo.prototype.get_CompareInfo, [], System.Globalization.CompareInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CompareInfo", System.Globalization.CultureInfo.prototype.set_CompareInfo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CompareInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFormat", System.Globalization.CultureInfo.prototype.GetFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("formatType", System.Type, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CultureInfo.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Globalization.CultureInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Globalization.CultureInfo.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CompareInfo", System.Globalization.CompareInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CompareInfo", System.Globalization.CultureInfo.prototype.get_CompareInfo, [], System.Globalization.CompareInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CompareInfo", System.Globalization.CultureInfo.prototype.set_CompareInfo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CompareInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Globalization.CultureInfo.CurrentCulture = System.Globalization.CultureInfo.prototype.$ctor.$new();
        System.Globalization.CultureInfo.InvariantCulture = System.Globalization.CultureInfo.prototype.$ctor.$new();
        System.Globalization.CultureInfo.Ordinal = System.Globalization.CultureInfo.prototype.$ctor.$new();
        System.Globalization.CultureInfo.OrdinalIgnoreCase = System.Globalization.CultureInfo.prototype.$ctor.$new();
    };
    $p.CurrentCulture = null;
    $p.InvariantCulture = null;
    $p.Ordinal = null;
    $p.OrdinalIgnoreCase = null;
    $p.$Name$k__BackingField = null;
    $p.get_Name = function() {
        return this.$Name$k__BackingField;
    };
    $p.set_Name = function(value) {
        this.$Name$k__BackingField = value;
    };
    $p.$CompareInfo$k__BackingField = null;
    $p.get_CompareInfo = function() {
        return this.$CompareInfo$k__BackingField;
    };
    $p.set_CompareInfo = function(value) {
        this.$CompareInfo$k__BackingField = value;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.set_CompareInfo(System.Globalization.CompareInfo.prototype.$ctor.$new());
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetFormat = function(formatType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$IFormatProvider$GetFormat = $p.GetFormat;
}).call(null, System.Globalization.CultureInfo, System.Globalization.CultureInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CultureInfo);
System.IComparable = $define("System.IComparable");
System.IComparable.prototype = new System.Object();
(System.IComparable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.IComparable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IComparable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparable", []);this.$type.Init("System.IComparable", System.IComparable, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.IComparable.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$IComparable$CompareTo = function(obj) {
    };
}).call(null, System.IComparable, System.IComparable.prototype);
$mscorlib$AssemblyTypes.push(System.IComparable);
System.IComparable$1 = $define("System.IComparable<T>");
System.IComparable$1.prototype = new System.Object();
(System.IComparable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.IComparable$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IComparable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparable", []);this.$type.Init("System.IComparable`1", System.IComparable$1, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$1$CompareTo", System.IComparable$1.prototype.System$IComparable$1$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", T, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.IComparable$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.IComparable$1, arguments);
    };
    $p.System$IComparable$1$CompareTo = function(other) {
    };
}).call(null, System.IComparable$1, System.IComparable$1.prototype);
$mscorlib$AssemblyTypes.push(System.IComparable$1);
System.IDisposable = $define("System.IDisposable");
System.IDisposable.prototype = new System.Object();
(System.IDisposable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.IDisposable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IDisposable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDisposable", []);this.$type.Init("System.IDisposable", System.IDisposable, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$IDisposable$Dispose", System.IDisposable.prototype.System$IDisposable$Dispose, [], System.Void, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$IDisposable$Dispose = function() {
    };
}).call(null, System.IDisposable, System.IDisposable.prototype);
$mscorlib$AssemblyTypes.push(System.IDisposable);
System.IFormatProvider = $define("System.IFormatProvider");
System.IFormatProvider.prototype = new System.Object();
(System.IFormatProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.IFormatProvider;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IFormatProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IFormatProvider", []);this.$type.Init("System.IFormatProvider", System.IFormatProvider, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$IFormatProvider$GetFormat", System.IFormatProvider.prototype.System$IFormatProvider$GetFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("formatType", System.Type, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$IFormatProvider$GetFormat = function(formatType) {
    };
}).call(null, System.IFormatProvider, System.IFormatProvider.prototype);
$mscorlib$AssemblyTypes.push(System.IFormatProvider);
System.Int16 = $define("short");
System.Int16.prototype = new System.ValueType();
(System.Int16.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Int16;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Int16";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int16", []);this.$type.Init("System.Int16", System.Int16, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Int16.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Int16.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.Int16.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Int16.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Int16, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int16.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Int16, System.Int16.prototype);
$mscorlib$AssemblyTypes.push(System.Int16);
System.Int32 = $define("int");
System.Int32.prototype = new System.ValueType();
(System.Int32.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Int32;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Int32";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int32", []);this.$type.Init("System.Int32", System.Int32, System.ValueType, [System.IComparable$1, System.IComparable], [System.Reflection.FieldInfo.prototype.$ctor.$new("MaxValue", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2147483647, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MinValue", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, -2147483648, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Int32.prototype.GetType, [], System.Type, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Int32.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Int32.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Int32.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse$1", System.Int32.prototype.Parse$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.Int32.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Int32.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Int32, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo$1", System.Int32.prototype.CompareTo$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Int32.prototype.CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Int32, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int32.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.MaxValue = null;
    $p.MinValue = null;
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $t.Parse = function(s) {
        var result = parseInt(s);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $t.Parse$1 = function(s, radix) {
        var result = parseInt(s, radix);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
    $p.CompareTo$1 = function(obj) {
        return this.CompareTo($cast(System.Int32, obj));
    };
    $p.System$IComparable$CompareTo = $p.CompareTo$1;
    $p.CompareTo = function(other) {
        return this - other;
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo;
}).call(null, System.Int32, System.Int32.prototype);
$mscorlib$AssemblyTypes.push(System.Int32);
System.Int64 = $define("long");
System.Int64.prototype = new System.ValueType();
(System.Int64.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Int64;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Int64";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int64", []);this.$type.Init("System.Int64", System.Int64, System.ValueType, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("MaxValue", System.Int64, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Int64.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Int64.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Int64.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.Int64.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Int64.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Int64, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int64.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.MaxValue = null;
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Int64, System.Int64.prototype);
$mscorlib$AssemblyTypes.push(System.Int64);
System.InvalidCastException = $define("System.InvalidCastException");
System.InvalidCastException.prototype = new System.Exception();
(System.InvalidCastException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.InvalidCastException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.InvalidCastException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvalidCastException", []);this.$type.Init("System.InvalidCastException", System.InvalidCastException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.InvalidCastException.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(message) {
        return new $p.$ctor.$type(this, message);
    };
}).call(null, System.InvalidCastException, System.InvalidCastException.prototype);
$mscorlib$AssemblyTypes.push(System.InvalidCastException);
System.InvalidOperationException = $define("System.InvalidOperationException");
System.InvalidOperationException.prototype = new System.Exception();
(System.InvalidOperationException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.InvalidOperationException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.InvalidOperationException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvalidOperationException", []);this.$type.Init("System.InvalidOperationException", System.InvalidOperationException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.InvalidOperationException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.InvalidOperationException.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
}).call(null, System.InvalidOperationException, System.InvalidOperationException.prototype);
$mscorlib$AssemblyTypes.push(System.InvalidOperationException);
System.Linq.Enumerable = $define("System.Linq.Enumerable");
System.Linq.Enumerable.prototype = new System.Object();
(System.Linq.Enumerable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Enumerable;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Enumerable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Enumerable", []);this.$type.Init("System.Linq.Enumerable", System.Linq.Enumerable, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate", System.Linq.Enumerable.prototype.Aggregate, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate$1", System.Linq.Enumerable.prototype.Aggregate$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("seed", TAccumulate, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3, 2, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate$2", System.Linq.Enumerable.prototype.Aggregate$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("seed", TAccumulate, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$2, 3, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("All", System.Linq.Enumerable.prototype.All, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Where", System.Linq.Enumerable.prototype.Where, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Where$1", System.Linq.Enumerable.prototype.Where$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Single$1", System.Linq.Enumerable.prototype.Single$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault$1", System.Linq.Enumerable.prototype.SingleOrDefault$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Single", System.Linq.Enumerable.prototype.Single, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault", System.Linq.Enumerable.prototype.SingleOrDefault, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault$2", System.Linq.Enumerable.prototype.SingleOrDefault$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Func$1, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToArray", System.Linq.Enumerable.prototype.ToArray, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Object.$$MakeArrayType(TSource), System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToList", System.Linq.Enumerable.prototype.ToList, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Select", System.Linq.Enumerable.prototype.Select, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Select$1", System.Linq.Enumerable.prototype.Select$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany", System.Linq.Enumerable.prototype.SelectMany, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany$1", System.Linq.Enumerable.prototype.SelectMany$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany$3", System.Linq.Enumerable.prototype.SelectMany$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$3, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 2, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany$2", System.Linq.Enumerable.prototype.SelectMany$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 2, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Take", System.Linq.Enumerable.prototype.Take, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("TakeWhile", System.Linq.Enumerable.prototype.TakeWhile, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("TakeWhile$1", System.Linq.Enumerable.prototype.TakeWhile$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Skip", System.Linq.Enumerable.prototype.Skip, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SkipWhile", System.Linq.Enumerable.prototype.SkipWhile, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SkipWhile$1", System.Linq.Enumerable.prototype.SkipWhile$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Join", System.Linq.Enumerable.prototype.Join, [System.Reflection.ParameterInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 4, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Any", System.Linq.Enumerable.prototype.Any, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Any$1", System.Linq.Enumerable.prototype.Any$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Linq.Enumerable.prototype.Max, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Linq.Enumerable.prototype.Min, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", System.Linq.Enumerable.prototype.Concat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Except", System.Linq.Enumerable.prototype.Except, [System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $t.Aggregate = function(TSource, source, func) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        try {
            if (!enumerator.System$Collections$IEnumerator$MoveNext())
                throw System.InvalidOperationException.prototype.$ctor$1.$new("No elements").InternalInit(new Error());
            var current = enumerator.get_Current();
            while (enumerator.System$Collections$IEnumerator$MoveNext()) {
                current = func(current, enumerator.get_Current());
            }
            return current;
        }
        finally {
            enumerator.System$IDisposable$Dispose();
        }

    };
    $t.Aggregate$1 = function(TSource, TAccumulate, source, seed, func) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        var accumulate = seed;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.get_Current();
                accumulate = func(accumulate, current);
            }
        }
        return accumulate;
    };
    $t.Aggregate$2 = function(TSource, TAccumulate, TResult, source, seed, func, resultSelector) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        if (resultSelector == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
        var accumulate = seed;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.get_Current();
                accumulate = func(accumulate, current);
            }
        }
        return resultSelector(accumulate);
    };
    $t.All = function(TSource, source, predicate) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (predicate == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.get_Current();
                if (!predicate(current))
                    return false;
            }
        }
        return true;
    };
    $t.Where = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$Where$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.Where$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$Where$1$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.Single$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.Single(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.SingleOrDefault$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.SingleOrDefault(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.Single = function(TSource, source) {
        return System.Linq.Enumerable.SingleOrDefault$2(TSource, source, $delegate(this, (System.Func$1$(TSource)), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Sequence contains no elements").InternalInit(new Error());
        }));
    };
    $t.SingleOrDefault = function(TSource, source) {
        return System.Linq.Enumerable.SingleOrDefault$2(TSource, source, $delegate(this, (System.Func$1$(TSource)), function() {
            return null;
        }));
    };
    $t.SingleOrDefault$2 = function(TSource, source, defaultValue) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        if (!enumerator.System$Collections$IEnumerator$MoveNext())
            return defaultValue();
        var result = enumerator.get_Current();
        enumerator.System$IDisposable$Dispose();
        return result;
    };
    $t.ToArray = function(TSource, source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var result = new Array();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                result.push(item);
            }
        }
        return result;
    };
    $t.ToList = function(TSource, source) {
        var list = (System.Collections.Generic.List$1$(TSource)).prototype.$ctor.$new();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                list.Add(item);
            }
        }
        return list;
    };
    $t.Select = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$Select$2$(TSource, TResult).prototype.$ctor.$new(this, source, selector);
    };
    $t.Select$1 = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$Select$1$2$(TSource, TResult).prototype.$ctor.$new(this, source, selector);
    };
    $t.SelectMany = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$(TSource, TResult).prototype.$ctor.$new(this, source, selector);
    };
    $t.SelectMany$1 = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2$(TSource, TResult).prototype.$ctor.$new(this, source, selector);
    };
    $t.SelectMany$3 = function(TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3$(TSource, TCollection, TResult).prototype.$ctor.$new(
            this, 
            source, 
            collectionSelector, 
            resultSelector
        );
    };
    $t.SelectMany$2 = function(TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3$(TSource, TCollection, TResult).prototype.$ctor.$new(
            this, 
            source, 
            collectionSelector, 
            resultSelector
        );
    };
    $t.Take = function(TSource, source, count) {
        return System.Linq.Enumerable.YieldEnumerator$Take$1$(TSource).prototype.$ctor.$new(this, source, count);
    };
    $t.TakeWhile = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.TakeWhile$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.Skip = function(TSource, source, count) {
        return System.Linq.Enumerable.YieldEnumerator$Skip$1$(TSource).prototype.$ctor.$new(this, source, count);
    };
    $t.SkipWhile = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.SkipWhile$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1$(TSource).prototype.$ctor.$new(this, source, predicate);
    };
    $t.Join = function(TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$Join$4$(
            TOuter, 
            TInner, 
            TKey, 
            TResult
        ).prototype.$ctor.$new(
            this, 
            outer, 
            inner, 
            outerKeySelector, 
            innerKeySelector, 
            resultSelector
        );
    };
    $t.Any = function(TSource, source) {
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        var result = enumerator.System$Collections$IEnumerator$MoveNext();
        enumerator.System$IDisposable$Dispose();
        return result;
    };
    $t.Any$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.Any(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.Max = function(TSource, source) {
        var current = null;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                if (item == null)
                    continue;
                if (current == null) {
                    current = item;
                    continue;
                }
                var comparable = (function() {
                    var $as$ = item;
                    if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (comparable.System$IComparable$CompareTo(current) > 0)
                    current = item;
            }
        }
        return current;
    };
    $t.Min = function(TSource, source) {
        var current = null;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                if (item == null)
                    continue;
                if (current == null) {
                    current = item;
                    continue;
                }
                var comparable = (function() {
                    var $as$ = item;
                    if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (comparable.System$IComparable$CompareTo(current) < 0)
                    current = item;
            }
        }
        return current;
    };
    $t.Concat = function(T, source, other) {
        return System.Linq.Enumerable.YieldEnumerator$Concat$1$(T).prototype.$ctor.$new(this, source, other);
    };
    $t.Except = function(TSource, first, second) {
        return System.Linq.Enumerable.YieldEnumerator$Except$1$(TSource).prototype.$ctor.$new(this, first, second);
    };
    function YieldEnumerator$Where$1($constructor) {
        if (!$t.YieldEnumerator$Where$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Where$1))) {
            $t.YieldEnumerator$Where$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Where$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Where$1))
            return $t.YieldEnumerator$Where$1;
    }
    $t.YieldEnumerator$Where$1 = YieldEnumerator$Where$1;
    $t.YieldEnumerator$Where$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Where$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Where$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Where`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Where", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Where`1", System.Linq.Enumerable.YieldEnumerator$Where$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Where$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Where$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (this.predicate(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Where$1, $t.YieldEnumerator$Where$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Where$1);
    function YieldEnumerator$Where$1$1($constructor) {
        if (!$t.YieldEnumerator$Where$1$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Where$1$1))) {
            $t.YieldEnumerator$Where$1$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Where$1$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Where$1$1))
            return $t.YieldEnumerator$Where$1$1;
    }
    $t.YieldEnumerator$Where$1$1 = YieldEnumerator$Where$1$1;
    $t.YieldEnumerator$Where$1$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Where$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Where$1$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Where$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Where$1", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Where$1`1", System.Linq.Enumerable.YieldEnumerator$Where$1$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Where$1$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Where$1$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (this.predicate(this.item, this.index)) {
                                this.$state = 3;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Where$1$1, $t.YieldEnumerator$Where$1$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Where$1$1);
    function YieldEnumerator$Select$2($constructor) {
        if (!$t.YieldEnumerator$Select$2.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Select$2))) {
            $t.YieldEnumerator$Select$2.$isStaticInitialized = true;
            $t.YieldEnumerator$Select$2.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Select$2))
            return $t.YieldEnumerator$Select$2;
    }
    $t.YieldEnumerator$Select$2 = YieldEnumerator$Select$2;
    $t.YieldEnumerator$Select$2.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Select$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Select$2;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Select`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Select", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Select`2", System.Linq.Enumerable.YieldEnumerator$Select$2, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Select$2$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Select$2, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.selector = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, selector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, selector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                selector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.$state = 2;
                            this.set_Current(this.selector(this.item));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Select$2, $t.YieldEnumerator$Select$2.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Select$2);
    function YieldEnumerator$Select$1$2($constructor) {
        if (!$t.YieldEnumerator$Select$1$2.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Select$1$2))) {
            $t.YieldEnumerator$Select$1$2.$isStaticInitialized = true;
            $t.YieldEnumerator$Select$1$2.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Select$1$2))
            return $t.YieldEnumerator$Select$1$2;
    }
    $t.YieldEnumerator$Select$1$2 = YieldEnumerator$Select$1$2;
    $t.YieldEnumerator$Select$1$2.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Select$1$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Select$1$2;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Select$1`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Select$1", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Select$1`2", System.Linq.Enumerable.YieldEnumerator$Select$1$2, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Select$1$2$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Select$1$2, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.selector = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, selector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, selector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                selector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.selector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("selector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.selector(this.item, this.index));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Select$1$2, $t.YieldEnumerator$Select$1$2.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Select$1$2);
    function YieldEnumerator$SelectMany$2($constructor) {
        if (!$t.YieldEnumerator$SelectMany$2.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$2))) {
            $t.YieldEnumerator$SelectMany$2.$isStaticInitialized = true;
            $t.YieldEnumerator$SelectMany$2.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$2))
            return $t.YieldEnumerator$SelectMany$2;
    }
    $t.YieldEnumerator$SelectMany$2 = YieldEnumerator$SelectMany$2;
    $t.YieldEnumerator$SelectMany$2.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SelectMany$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SelectMany$2;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany`2", System.Linq.Enumerable.YieldEnumerator$SelectMany$2, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TResult, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SelectMany$2$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SelectMany$2, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.selector = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.subitem = null;
        $p.subitem$enumerator = null;
        $p.$ctor = function($this, source, selector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, selector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                selector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.subitem$enumerator = this.selector(this.item).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.subitem);
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SelectMany$2, $t.YieldEnumerator$SelectMany$2.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$2);
    function YieldEnumerator$SelectMany$1$2($constructor) {
        if (!$t.YieldEnumerator$SelectMany$1$2.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2))) {
            $t.YieldEnumerator$SelectMany$1$2.$isStaticInitialized = true;
            $t.YieldEnumerator$SelectMany$1$2.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2))
            return $t.YieldEnumerator$SelectMany$1$2;
    }
    $t.YieldEnumerator$SelectMany$1$2 = YieldEnumerator$SelectMany$1$2;
    $t.YieldEnumerator$SelectMany$1$2.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SelectMany$1$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$1`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$1", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$1`2", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TResult, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SelectMany$1$2$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SelectMany$1$2, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.selector = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.subitem = null;
        $p.subitem$enumerator = null;
        $p.$ctor = function($this, source, selector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, selector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                selector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            System.ArgumentNullException.prototype.$ctor.$new("source");
                        if (this.selector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("selector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.subitem$enumerator = this.selector(this.item, this.index).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.subitem);
                            return true;
                        }
                        this.$state = 4;
                        continue $top;
                    case 4:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SelectMany$1$2, $t.YieldEnumerator$SelectMany$1$2.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$1$2);
    function YieldEnumerator$SelectMany$3$3($constructor) {
        if (!$t.YieldEnumerator$SelectMany$3$3.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3))) {
            $t.YieldEnumerator$SelectMany$3$3.$isStaticInitialized = true;
            $t.YieldEnumerator$SelectMany$3$3.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3))
            return $t.YieldEnumerator$SelectMany$3$3;
    }
    $t.YieldEnumerator$SelectMany$3$3 = YieldEnumerator$SelectMany$3$3;
    $t.YieldEnumerator$SelectMany$3$3.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SelectMany$3$3.$TypeInitializer = function($t, $p, TSource, TCollection, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$3`3";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$3", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$3`3", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("collectionSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TCollection, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SelectMany$3$3$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SelectMany$3$3, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.collectionSelector = null;
        $p.resultSelector = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.subitem = null;
        $p.subitem$enumerator = null;
        $p.$ctor = function($this, source, collectionSelector, resultSelector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.collectionSelector = collectionSelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, collectionSelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                collectionSelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.collectionSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("collectionSelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.subitem$enumerator = this.collectionSelector(this.item, this.index).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.item, this.subitem));
                            return true;
                        }
                        this.$state = 4;
                        continue $top;
                    case 4:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SelectMany$3$3, $t.YieldEnumerator$SelectMany$3$3.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$3$3);
    function YieldEnumerator$SelectMany$2$3($constructor) {
        if (!$t.YieldEnumerator$SelectMany$2$3.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3))) {
            $t.YieldEnumerator$SelectMany$2$3.$isStaticInitialized = true;
            $t.YieldEnumerator$SelectMany$2$3.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3))
            return $t.YieldEnumerator$SelectMany$2$3;
    }
    $t.YieldEnumerator$SelectMany$2$3 = YieldEnumerator$SelectMany$2$3;
    $t.YieldEnumerator$SelectMany$2$3.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SelectMany$2$3.$TypeInitializer = function($t, $p, TSource, TCollection, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$2`3";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$2", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$2`3", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("collectionSelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TCollection, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$2, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SelectMany$2$3$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SelectMany$2$3, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.collectionSelector = null;
        $p.resultSelector = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.subitem = null;
        $p.subitem$enumerator = null;
        $p.$ctor = function($this, source, collectionSelector, resultSelector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.collectionSelector = collectionSelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, collectionSelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                collectionSelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.collectionSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("collectionSelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.subitem$enumerator = this.collectionSelector(this.item).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.item, this.subitem));
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SelectMany$2$3, $t.YieldEnumerator$SelectMany$2$3.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$2$3);
    function YieldEnumerator$Take$1($constructor) {
        if (!$t.YieldEnumerator$Take$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Take$1))) {
            $t.YieldEnumerator$Take$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Take$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Take$1))
            return $t.YieldEnumerator$Take$1;
    }
    $t.YieldEnumerator$Take$1 = YieldEnumerator$Take$1;
    $t.YieldEnumerator$Take$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Take$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Take$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Take`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Take", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Take`1", System.Linq.Enumerable.YieldEnumerator$Take$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Take$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Take$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.count = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, count) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, count) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                count
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (this.index >= this.count)
                                break;
                            this.$state = 3;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Take$1, $t.YieldEnumerator$Take$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Take$1);
    function YieldEnumerator$TakeWhile$1($constructor) {
        if (!$t.YieldEnumerator$TakeWhile$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$TakeWhile$1))) {
            $t.YieldEnumerator$TakeWhile$1.$isStaticInitialized = true;
            $t.YieldEnumerator$TakeWhile$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$TakeWhile$1))
            return $t.YieldEnumerator$TakeWhile$1;
    }
    $t.YieldEnumerator$TakeWhile$1 = YieldEnumerator$TakeWhile$1;
    $t.YieldEnumerator$TakeWhile$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$TakeWhile$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$TakeWhile$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$TakeWhile`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$TakeWhile", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$TakeWhile`1", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$TakeWhile$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$TakeWhile$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (!this.predicate(this.item))
                                break;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$TakeWhile$1, $t.YieldEnumerator$TakeWhile$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$TakeWhile$1);
    function YieldEnumerator$TakeWhile$1$1($constructor) {
        if (!$t.YieldEnumerator$TakeWhile$1$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1))) {
            $t.YieldEnumerator$TakeWhile$1$1.$isStaticInitialized = true;
            $t.YieldEnumerator$TakeWhile$1$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1))
            return $t.YieldEnumerator$TakeWhile$1$1;
    }
    $t.YieldEnumerator$TakeWhile$1$1 = YieldEnumerator$TakeWhile$1$1;
    $t.YieldEnumerator$TakeWhile$1$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$TakeWhile$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$TakeWhile$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$TakeWhile$1", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$TakeWhile$1`1", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$TakeWhile$1$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$TakeWhile$1$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (!this.predicate(this.item, this.index))
                                break;
                            this.$state = 3;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$TakeWhile$1$1, $t.YieldEnumerator$TakeWhile$1$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$TakeWhile$1$1);
    function YieldEnumerator$Skip$1($constructor) {
        if (!$t.YieldEnumerator$Skip$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Skip$1))) {
            $t.YieldEnumerator$Skip$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Skip$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Skip$1))
            return $t.YieldEnumerator$Skip$1;
    }
    $t.YieldEnumerator$Skip$1 = YieldEnumerator$Skip$1;
    $t.YieldEnumerator$Skip$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Skip$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Skip$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Skip`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Skip", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Skip`1", System.Linq.Enumerable.YieldEnumerator$Skip$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Skip$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Skip$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.count = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, count) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, count) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                count
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.index = -1;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.index++;
                            if (this.index < this.count)
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Skip$1, $t.YieldEnumerator$Skip$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Skip$1);
    function YieldEnumerator$SkipWhile$1($constructor) {
        if (!$t.YieldEnumerator$SkipWhile$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SkipWhile$1))) {
            $t.YieldEnumerator$SkipWhile$1.$isStaticInitialized = true;
            $t.YieldEnumerator$SkipWhile$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SkipWhile$1))
            return $t.YieldEnumerator$SkipWhile$1;
    }
    $t.YieldEnumerator$SkipWhile$1 = YieldEnumerator$SkipWhile$1;
    $t.YieldEnumerator$SkipWhile$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SkipWhile$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SkipWhile$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SkipWhile`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SkipWhile", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SkipWhile`1", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SkipWhile$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SkipWhile$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (this.predicate(this.item))
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SkipWhile$1, $t.YieldEnumerator$SkipWhile$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SkipWhile$1);
    function YieldEnumerator$SkipWhile$1$1($constructor) {
        if (!$t.YieldEnumerator$SkipWhile$1$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1))) {
            $t.YieldEnumerator$SkipWhile$1$1.$isStaticInitialized = true;
            $t.YieldEnumerator$SkipWhile$1$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1))
            return $t.YieldEnumerator$SkipWhile$1$1;
    }
    $t.YieldEnumerator$SkipWhile$1$1 = YieldEnumerator$SkipWhile$1$1;
    $t.YieldEnumerator$SkipWhile$1$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$SkipWhile$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SkipWhile$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SkipWhile$1", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SkipWhile$1`1", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$SkipWhile$1$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$SkipWhile$1$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.predicate = null;
        $p.index = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, source, predicate) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, predicate) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                predicate
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = -1;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.index++;
                            if (this.predicate(this.item, this.index))
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$SkipWhile$1$1, $t.YieldEnumerator$SkipWhile$1$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SkipWhile$1$1);
    function YieldEnumerator$Join$4($constructor) {
        if (!$t.YieldEnumerator$Join$4.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Join$4))) {
            $t.YieldEnumerator$Join$4.$isStaticInitialized = true;
            $t.YieldEnumerator$Join$4.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Join$4))
            return $t.YieldEnumerator$Join$4;
    }
    $t.YieldEnumerator$Join$4 = YieldEnumerator$Join$4;
    $t.YieldEnumerator$Join$4.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Join$4.$TypeInitializer = function($t, $p, TOuter, TInner, TKey, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Join$4;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Join`4";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Join", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Join`4", System.Linq.Enumerable.YieldEnumerator$Join$4, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("outers", System.Object.$$MakeArrayType(TOuter), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("outerItem", TOuter, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("outerItem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("key", TKey, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Tuple$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("innerItem", TInner, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("innerItem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3, 5, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Join$4$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Join$4, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.outer = null;
        $p.inner = null;
        $p.outerKeySelector = null;
        $p.innerKeySelector = null;
        $p.resultSelector = null;
        $p.outers = null;
        $p.dictionary = null;
        $p.outerItem = null;
        $p.outerItem$enumerator = null;
        $p.key = null;
        $p.set = null;
        $p.innerItem = null;
        $p.innerItem$enumerator = null;
        $p.$ctor = function($this, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.outer = outer;
            this.inner = inner;
            this.outerKeySelector = outerKeySelector;
            this.innerKeySelector = innerKeySelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                outer, 
                inner, 
                outerKeySelector, 
                innerKeySelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.outers = System.Linq.Enumerable.ToArray(TOuter, this.outer);
                        if (this.outer == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("outer").InternalInit(new Error());
                        if (this.inner == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("inner").InternalInit(new Error());
                        if (this.outerKeySelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("outerKeySelector").InternalInit(new Error());
                        if (this.innerKeySelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("innerKeySelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.dictionary = (System.Collections.Generic.Dictionary$2$(TKey, (System.Tuple$2$((System.Collections.Generic.List$1$(TOuter)), (System.Collections.Generic.List$1$(TInner)))))).prototype.$ctor.$new();
                        {
                            var $anon$1iterator = this.outers;
                            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                                var item = $anon$2enumerator.get_Current();
                                var key = this.outerKeySelector(item);
                                var lists;
                                if (!(function() {
                                    var $anon$3 = {
                                        value: null
                                    };
                                    var $result$ = this.dictionary.TryGetValue(key, $anon$3);
                                    lists = $anon$3.value;
                                    return $result$;
                                }).call(this)) {
                                    lists = (System.Tuple$2$((System.Collections.Generic.List$1$(TOuter)), (System.Collections.Generic.List$1$(TInner)))).prototype.$ctor.$new((System.Collections.Generic.List$1$(TOuter)).prototype.$ctor.$new(), (System.Collections.Generic.List$1$(TInner)).prototype.$ctor.$new());
                                    this.dictionary.set_Item(key, lists);
                                }
                                lists.get_Item1().Add(item);
                            }
                        }{
                            var $anon$4iterator = this.inner;
                            var $anon$5enumerator = $anon$4iterator.System$Collections$IEnumerable$GetEnumerator();
                            while ($anon$5enumerator.System$Collections$IEnumerator$MoveNext()) {
                                var item = $anon$5enumerator.get_Current();
                                var key = this.innerKeySelector(item);
                                var lists;
                                if (!(function() {
                                    var $anon$6 = {
                                        value: null
                                    };
                                    var $result$ = this.dictionary.TryGetValue(key, $anon$6);
                                    lists = $anon$6.value;
                                    return $result$;
                                }).call(this))
                                    continue;
                                lists.get_Item2().Add(item);
                            }
                        }this.outerItem$enumerator = this.outers.GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.outerItem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.outerItem = this.outerItem$enumerator.get_Current();
                            this.key = this.outerKeySelector(this.outerItem);
                            this.set = this.dictionary.get_Item(this.key);
                            this.innerItem$enumerator = this.set.get_Item2().GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.innerItem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.innerItem = this.innerItem$enumerator.get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.outerItem, this.innerItem));
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Join$4, $t.YieldEnumerator$Join$4.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Join$4);
    function YieldEnumerator$Concat$1($constructor) {
        if (!$t.YieldEnumerator$Concat$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Concat$1))) {
            $t.YieldEnumerator$Concat$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Concat$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Concat$1))
            return $t.YieldEnumerator$Concat$1;
    }
    $t.YieldEnumerator$Concat$1 = YieldEnumerator$Concat$1;
    $t.YieldEnumerator$Concat$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Concat$1.$TypeInitializer = function($t, $p, T) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Concat$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Concat`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Concat", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Concat`1", System.Linq.Enumerable.YieldEnumerator$Concat$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", T, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item2", T, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item2$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Concat$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Concat$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.source = null;
        $p.other = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.item2 = null;
        $p.item2$enumerator = null;
        $p.$ctor = function($this, source, other) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.source = source;
            this.other = other;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, source, other) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                source, 
                other
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 3;
                        continue $top;
                    case 3:
                        this.item2$enumerator = this.other.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 4;
                        continue $top;
                    case 4:
                        while (this.item2$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item2 = this.item2$enumerator.get_Current();
                            this.$state = 4;
                            this.set_Current(this.item2);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Concat$1, $t.YieldEnumerator$Concat$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Concat$1);
    function YieldEnumerator$Except$1($constructor) {
        if (!$t.YieldEnumerator$Except$1.$isStaticInitialized && ($constructor != null || !(this instanceof System.Linq.Enumerable.YieldEnumerator$Except$1))) {
            $t.YieldEnumerator$Except$1.$isStaticInitialized = true;
            $t.YieldEnumerator$Except$1.$StaticInitializer();
        }
        if ($constructor != null)
            $constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof System.Linq.Enumerable.YieldEnumerator$Except$1))
            return $t.YieldEnumerator$Except$1;
    }
    $t.YieldEnumerator$Except$1 = YieldEnumerator$Except$1;
    $t.YieldEnumerator$Except$1.prototype = new System.YieldIterator$1();
    ($t.YieldEnumerator$Except$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = System.Linq.Enumerable.YieldEnumerator$Except$1;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Except`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Except", []);this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Except`1", System.Linq.Enumerable.YieldEnumerator$Except$1, (System.YieldIterator$1$(System.Object)), [System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], [System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Except$1.prototype.GetEnumerator, [], System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Except$1.prototype.MoveNext, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Except$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Linq.Enumerable, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
        $t.$StaticInitializer = function() {
        };
        this.YieldEnumerator$Except$1$ = function() {
            return System.Object.$$MakeGenericType.call(this, this.YieldEnumerator$Except$1, arguments);
        };
        $p.$state = null;
        $p.$this = null;
        $p.first = null;
        $p.second = null;
        $p.set = null;
        $p.item = null;
        $p.item$enumerator = null;
        $p.$ctor = function($this, first, second) {
            (System.YieldIterator$1$(System.Object)).prototype.$ctor.call(this);
            this.$this = $this;
            this.first = first;
            this.second = second;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this, first, second) {
            return new $p.$ctor.$type(
                this, 
                $this, 
                first, 
                second
            );
        };
        $p.GetEnumerator = function() {
            return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.first == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
                        if (this.second == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
                        this.set = (System.Collections.Generic.HashSet$1$(TSource)).prototype.$ctor$1.$new(this.second);
                        this.item$enumerator = this.first.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.get_Current();
                            if (!this.set.Contains(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    }).call($t, $t.YieldEnumerator$Except$1, $t.YieldEnumerator$Except$1.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Except$1);
}).call(null, System.Linq.Enumerable, System.Linq.Enumerable.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Enumerable);
System.Linq.Expressions.BinaryExpression = $define("System.Linq.Expressions.BinaryExpression");
System.Linq.Expressions.BinaryExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.BinaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.BinaryExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.BinaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BinaryExpression", []);this.$type.Init("System.Linq.Expressions.BinaryExpression", System.Linq.Expressions.BinaryExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Left$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Right$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Conversion$k__BackingField", System.Linq.Expressions.LambdaExpression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$IsLifted$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Left", System.Linq.Expressions.BinaryExpression.prototype.get_Left, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Left", System.Linq.Expressions.BinaryExpression.prototype.set_Left, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Right", System.Linq.Expressions.BinaryExpression.prototype.get_Right, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Right", System.Linq.Expressions.BinaryExpression.prototype.set_Right, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.BinaryExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.BinaryExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Conversion", System.Linq.Expressions.BinaryExpression.prototype.get_Conversion, [], System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Conversion", System.Linq.Expressions.BinaryExpression.prototype.set_Conversion, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.LambdaExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.set_IsLifted, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.BinaryExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.BinaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.BinaryExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("conversion", System.Linq.Expressions.LambdaExpression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReferenceComparison", System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison, [], System.Boolean, System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiftedToNull", System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull, [], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.BinaryExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.BinaryExpression.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("liftToNull", System.Boolean, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 4, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Left", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Left", System.Linq.Expressions.BinaryExpression.prototype.get_Left, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Left", System.Linq.Expressions.BinaryExpression.prototype.set_Left, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Right", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Right", System.Linq.Expressions.BinaryExpression.prototype.get_Right, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Right", System.Linq.Expressions.BinaryExpression.prototype.set_Right, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.BinaryExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.BinaryExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Conversion", System.Linq.Expressions.LambdaExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Conversion", System.Linq.Expressions.BinaryExpression.prototype.get_Conversion, [], System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Conversion", System.Linq.Expressions.BinaryExpression.prototype.set_Conversion, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.LambdaExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLifted", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.set_IsLifted, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.BinaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReferenceComparison", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReferenceComparison", System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison, [], System.Boolean, System.Reflection.MethodAttributes().Assembly, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLiftedToNull", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiftedToNull", System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Left$k__BackingField = null;
    $p.get_Left = function() {
        return this.$Left$k__BackingField;
    };
    $p.set_Left = function(value) {
        this.$Left$k__BackingField = value;
    };
    $p.$Right$k__BackingField = null;
    $p.get_Right = function() {
        return this.$Right$k__BackingField;
    };
    $p.set_Right = function(value) {
        this.$Right$k__BackingField = value;
    };
    $p.$Method$k__BackingField = null;
    $p.get_Method = function() {
        return this.$Method$k__BackingField;
    };
    $p.set_Method = function(value) {
        this.$Method$k__BackingField = value;
    };
    $p.$Conversion$k__BackingField = null;
    $p.get_Conversion = function() {
        return this.$Conversion$k__BackingField;
    };
    $p.set_Conversion = function(value) {
        this.$Conversion$k__BackingField = value;
    };
    $p.$IsLifted$k__BackingField = null;
    $p.get_IsLifted = function() {
        return this.$IsLifted$k__BackingField;
    };
    $p.set_IsLifted = function(value) {
        this.$IsLifted$k__BackingField = value;
    };
    $p.$ctor = function(left, right, nodeType) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Left(left);
        this.set_Right(right);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(left, right, nodeType) {
        return new $p.$ctor.$type(
            this, 
            left, 
            right, 
            nodeType
        );
    };
    $p.$ctor$1 = function(left, right, nodeType, liftToNull, method) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Left(left);
        this.set_Right(right);
        this.set_Method(method);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(left, right, nodeType, liftToNull, method) {
        return new $p.$ctor$1.$type(
            this, 
            left, 
            right, 
            nodeType, 
            liftToNull, 
            method
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitBinary(this);
    };
    $p.get_Type = function() {
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Add:
            case System.Linq.Expressions.ExpressionType().AddAssign:
            case System.Linq.Expressions.ExpressionType().AddAssignChecked:
            case System.Linq.Expressions.ExpressionType().AddChecked:
            case System.Linq.Expressions.ExpressionType().And:
            case System.Linq.Expressions.ExpressionType().AndAlso:
            case System.Linq.Expressions.ExpressionType().AndAssign:
            case System.Linq.Expressions.ExpressionType().Assign:
            case System.Linq.Expressions.ExpressionType().Divide:
            case System.Linq.Expressions.ExpressionType().DivideAssign:
            case System.Linq.Expressions.ExpressionType().ExclusiveOr:
            case System.Linq.Expressions.ExpressionType().ExclusiveOrAssign:
            case System.Linq.Expressions.ExpressionType().LeftShift:
            case System.Linq.Expressions.ExpressionType().LeftShiftAssign:
            case System.Linq.Expressions.ExpressionType().Modulo:
            case System.Linq.Expressions.ExpressionType().ModuloAssign:
            case System.Linq.Expressions.ExpressionType().Multiply:
            case System.Linq.Expressions.ExpressionType().MultiplyAssign:
            case System.Linq.Expressions.ExpressionType().MultiplyAssignChecked:
            case System.Linq.Expressions.ExpressionType().MultiplyChecked:
            case System.Linq.Expressions.ExpressionType().Or:
            case System.Linq.Expressions.ExpressionType().OrAssign:
            case System.Linq.Expressions.ExpressionType().OrElse:
            case System.Linq.Expressions.ExpressionType().RightShift:
            case System.Linq.Expressions.ExpressionType().RightShiftAssign:
            case System.Linq.Expressions.ExpressionType().Subtract:
            case System.Linq.Expressions.ExpressionType().SubtractAssign:
            case System.Linq.Expressions.ExpressionType().SubtractAssignChecked:
            case System.Linq.Expressions.ExpressionType().SubtractChecked:
                return this.get_Left().get_Type();
            case System.Linq.Expressions.ExpressionType().Equal:
            case System.Linq.Expressions.ExpressionType().GreaterThan:
            case System.Linq.Expressions.ExpressionType().GreaterThanOrEqual:
            case System.Linq.Expressions.ExpressionType().LessThan:
            case System.Linq.Expressions.ExpressionType().LessThanOrEqual:
            case System.Linq.Expressions.ExpressionType().NotEqual:
            case System.Linq.Expressions.ExpressionType().TypeIs:
                return System.Boolean.$GetType();
            case System.Linq.Expressions.ExpressionType().ArrayIndex:
                return System.Object.$GetType();
            default:
                throw System.Exception.prototype.$ctor$1.$new("Unexpected node type: " + this.get_NodeType()).InternalInit(new Error());
        }
    };
    $p.Update = function(left, conversion, right) {
        return this;
    };
    $p.get_IsReferenceComparison = function() {
        var type1 = this.get_Left().get_Type();
        var type2 = this.get_Right().get_Type();
        var method = this.get_Method();
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Equal:
            case System.Linq.Expressions.ExpressionType().NotEqual:
                if (method == null && !type1.get_IsValueType())
                    return !type2.get_IsValueType();
                else
                    break;
        }
        return false;
    };
    $p.get_IsLiftedToNull = function() {
        if (this.get_IsLifted())
            return this.get_Type() == System.Nullable$1.$GetType();
        else
            return false;
    };
}).call(null, System.Linq.Expressions.BinaryExpression, System.Linq.Expressions.BinaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.BinaryExpression);
System.Linq.Expressions.ConditionalExpression = $define("System.Linq.Expressions.ConditionalExpression");
System.Linq.Expressions.ConditionalExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.ConditionalExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ConditionalExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ConditionalExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConditionalExpression", []);this.$type.Init("System.Linq.Expressions.ConditionalExpression", System.Linq.Expressions.ConditionalExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Test$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$IfTrue$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$IfFalse$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Test", System.Linq.Expressions.ConditionalExpression.prototype.get_Test, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Test", System.Linq.Expressions.ConditionalExpression.prototype.set_Test, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.set_IfTrue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.set_IfFalse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ConditionalExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConditionalExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ConditionalExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ConditionalExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Test", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Test", System.Linq.Expressions.ConditionalExpression.prototype.get_Test, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Test", System.Linq.Expressions.ConditionalExpression.prototype.set_Test, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IfTrue", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.set_IfTrue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IfFalse", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.set_IfFalse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConditionalExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Test$k__BackingField = null;
    $p.get_Test = function() {
        return this.$Test$k__BackingField;
    };
    $p.set_Test = function(value) {
        this.$Test$k__BackingField = value;
    };
    $p.$IfTrue$k__BackingField = null;
    $p.get_IfTrue = function() {
        return this.$IfTrue$k__BackingField;
    };
    $p.set_IfTrue = function(value) {
        this.$IfTrue$k__BackingField = value;
    };
    $p.$IfFalse$k__BackingField = null;
    $p.get_IfFalse = function() {
        return this.$IfFalse$k__BackingField;
    };
    $p.set_IfFalse = function(value) {
        this.$IfFalse$k__BackingField = value;
    };
    $p.type = null;
    $p.$ctor = function(test, ifTrue, ifFalse) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Conditional);
        this.set_Test(test);
        this.set_IfTrue(ifTrue);
        this.set_IfFalse(ifFalse);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(test, ifTrue, ifFalse) {
        return new $p.$ctor.$type(
            this, 
            test, 
            ifTrue, 
            ifFalse
        );
    };
    $p.$ctor$1 = function(test, ifTrue, ifFalse, type) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Conditional);
        this.set_Test(test);
        this.set_IfTrue(ifTrue);
        this.set_IfFalse(ifFalse);
        this.type = type;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(test, ifTrue, ifFalse, type) {
        return new $p.$ctor$1.$type(
            this, 
            test, 
            ifTrue, 
            ifFalse, 
            type
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitConditional(this);
    };
    $p.get_Type = function() {
        return this.type || this.get_IfTrue().get_Type();
    };
    $p.Update = function(test, ifTrue, ifFalse) {
        return this;
    };
}).call(null, System.Linq.Expressions.ConditionalExpression, System.Linq.Expressions.ConditionalExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ConditionalExpression);
System.Linq.Expressions.ConstantExpression = $define("System.Linq.Expressions.ConstantExpression");
System.Linq.Expressions.ConstantExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.ConstantExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ConstantExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ConstantExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConstantExpression", []);this.$type.Init("System.Linq.Expressions.ConstantExpression", System.Linq.Expressions.ConstantExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Value$k__BackingField", System.Object, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Linq.Expressions.ConstantExpression.prototype.get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Linq.Expressions.ConstantExpression.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ConstantExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConstantExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ConstantExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.ConstantExpression.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Linq.Expressions.ConstantExpression.prototype.get_Value, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Linq.Expressions.ConstantExpression.prototype.set_Value, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConstantExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Value$k__BackingField = null;
    $p.get_Value = function() {
        return this.$Value$k__BackingField;
    };
    $p.set_Value = function(value) {
        this.$Value$k__BackingField = value;
    };
    $p.type = null;
    $p.$ctor = function(value) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Constant);
        this.set_Value(value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(value) {
        return new $p.$ctor.$type(this, value);
    };
    $p.$ctor$1 = function(value, type) {
        System.Linq.Expressions.ConstantExpression.prototype.$ctor.call(this, value);
        this.type = type;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(value, type) {
        return new $p.$ctor$1.$type(this, value, type);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitConstant(this);
    };
    $p.get_Type = function() {
        return this.type || (this.get_Value() != null ? this.get_Value().GetType() : System.Object.$GetType());
    };
}).call(null, System.Linq.Expressions.ConstantExpression, System.Linq.Expressions.ConstantExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ConstantExpression);
System.Linq.Expressions.DefaultExpression = $define("System.Linq.Expressions.DefaultExpression");
System.Linq.Expressions.DefaultExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.DefaultExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.DefaultExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.DefaultExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DefaultExpression", []);this.$type.Init("System.Linq.Expressions.DefaultExpression", System.Linq.Expressions.DefaultExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.DefaultExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.DefaultExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.DefaultExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.DefaultExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.type = null;
    $p.$ctor = function(type) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Default);
        this.type = type;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(type) {
        return new $p.$ctor.$type(this, type);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitDefault(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
}).call(null, System.Linq.Expressions.DefaultExpression, System.Linq.Expressions.DefaultExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.DefaultExpression);
System.Linq.Expressions.ElementInit = $define("System.Linq.Expressions.ElementInit");
System.Linq.Expressions.ElementInit.prototype = new System.Object();
(System.Linq.Expressions.ElementInit.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ElementInit;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.ElementInit";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ElementInit", []);this.$type.Init("System.Linq.Expressions.ElementInit", System.Linq.Expressions.ElementInit, System.Object, [System.Linq.Expressions.IArgumentProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("$AddMethod$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Linq.Expressions.ElementInit.prototype.get_AddMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AddMethod", System.Linq.Expressions.ElementInit.prototype.set_AddMethod, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.ElementInit.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.ElementInit.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ElementInit.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1, 0, 0, null, [])], System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ElementInit.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("AddMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Linq.Expressions.ElementInit.prototype.get_AddMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AddMethod", System.Linq.Expressions.ElementInit.prototype.set_AddMethod, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.ElementInit.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.ElementInit.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$AddMethod$k__BackingField = null;
    $p.get_AddMethod = function() {
        return this.$AddMethod$k__BackingField;
    };
    $p.set_AddMethod = function(value) {
        this.$AddMethod$k__BackingField = value;
    };
    $p.$Arguments$k__BackingField = null;
    $p.get_Arguments = function() {
        return this.$Arguments$k__BackingField;
    };
    $p.set_Arguments = function(value) {
        this.$Arguments$k__BackingField = value;
    };
    $p.$ctor = function(addMethod, args) {
        System.Object.prototype.$ctor.call(this);
        this.set_AddMethod(addMethod);
        this.set_Arguments(args);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(addMethod, args) {
        return new $p.$ctor.$type(this, addMethod, args);
    };
    $p.Update = function(args) {
        return this;
    };
}).call(null, System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ElementInit);
System.Linq.Expressions.Expression$1 = $define("System.Linq.Expressions.Expression<TDelegate>");
System.Linq.Expressions.Expression$1.prototype = new System.Linq.Expressions.LambdaExpression();
(System.Linq.Expressions.Expression$1.$TypeInitializer = function($t, $p, TDelegate) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.Expression$1;
    $t.$baseType = System.Linq.Expressions.LambdaExpression;
    $p.$typeName = "System.Linq.Expressions.Expression`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Expression", []);this.$type.Init("System.Linq.Expressions.Expression`1", System.Linq.Expressions.Expression$1, System.Linq.Expressions.LambdaExpression, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.Expression$1.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.Expression$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Linq.Expressions.ParameterExpression), 3, 0, null, [])], System.Reflection.MethodAttributes().Assembly, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Linq.Expressions.Expression$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Linq.Expressions.Expression$1, arguments);
    };
    $p.$ctor = function(body, name, tailCall, parameters) {
        System.Linq.Expressions.LambdaExpression.prototype.$ctor.call(
            this, 
            TDelegate.$GetType(), 
            name, 
            body, 
            tailCall, 
            parameters
        );
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(body, name, tailCall, parameters) {
        return new $p.$ctor.$type(
            this, 
            body, 
            name, 
            tailCall, 
            parameters
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitLambda(TDelegate, this);
    };
}).call(null, System.Linq.Expressions.Expression$1, System.Linq.Expressions.Expression$1.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.Expression$1);
System.Linq.Expressions.ExpressionType = $define("System.Linq.Expressions.ExpressionType");
System.Linq.Expressions.ExpressionType.prototype = new System.Enum();
(System.Linq.Expressions.ExpressionType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ExpressionType;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Linq.Expressions.ExpressionType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ExpressionType", []);this.$type.Init("System.Linq.Expressions.ExpressionType", System.Linq.Expressions.ExpressionType, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Add", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("AddChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("And", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("AndAlso", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayLength", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 5, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Call", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 6, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Coalesce", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 7, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Conditional", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Constant", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 9, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Convert", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 10, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ConvertChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 11, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Divide", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 12, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Equal", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 13, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ExclusiveOr", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 14, []), System.Reflection.FieldInfo.prototype.$ctor.$new("GreaterThan", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 15, []), System.Reflection.FieldInfo.prototype.$ctor.$new("GreaterThanOrEqual", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Invoke", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 17, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 18, []), System.Reflection.FieldInfo.prototype.$ctor.$new("LeftShift", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 19, []), System.Reflection.FieldInfo.prototype.$ctor.$new("LessThan", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 20, []), System.Reflection.FieldInfo.prototype.$ctor.$new("LessThanOrEqual", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 21, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 22, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberAccess", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 23, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberInit", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 24, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Modulo", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 25, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Multiply", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 26, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 27, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Negate", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 28, []), System.Reflection.FieldInfo.prototype.$ctor.$new("UnaryPlus", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 29, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NegateChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 30, []), System.Reflection.FieldInfo.prototype.$ctor.$new("New", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 31, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NewArrayInit", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NewArrayBounds", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 33, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Not", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 34, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NotEqual", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 35, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Or", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 36, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OrElse", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 37, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Parameter", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 38, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Power", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 39, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Quote", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 40, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RightShift", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 41, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Subtract", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 42, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 43, []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeAs", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 44, []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeIs", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 45, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Assign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 46, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Block", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 47, []), System.Reflection.FieldInfo.prototype.$ctor.$new("DebugInfo", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 48, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Decrement", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 49, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Dynamic", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 50, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 51, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Extension", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 52, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Goto", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 53, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Increment", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 54, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Index", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 55, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Label", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 56, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RuntimeVariables", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 57, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Loop", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 58, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Switch", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 59, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Throw", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 60, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Try", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 61, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Unbox", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 62, []), System.Reflection.FieldInfo.prototype.$ctor.$new("AddAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 63, []), System.Reflection.FieldInfo.prototype.$ctor.$new("AndAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("DivideAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 65, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ExclusiveOrAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 66, []), System.Reflection.FieldInfo.prototype.$ctor.$new("LeftShiftAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 67, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ModuloAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 68, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 69, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OrAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 70, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PowerAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 71, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RightShiftAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 72, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 73, []), System.Reflection.FieldInfo.prototype.$ctor.$new("AddAssignChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 74, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyAssignChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 75, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractAssignChecked", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 76, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PreIncrementAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 77, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PreDecrementAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 78, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PostIncrementAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 79, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PostDecrementAssign", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 80, []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeEqual", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 81, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OnesComplement", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 82, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IsTrue", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 83, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IsFalse", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 84, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ExpressionType.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Add = 0;
        $t.Add$ = $p.$ctor.$new("Add", System.Linq.Expressions.ExpressionType().Add);
        $t.AddChecked = System.Linq.Expressions.ExpressionType().Add + 1;
        $t.AddChecked$ = $p.$ctor.$new("AddChecked", System.Linq.Expressions.ExpressionType().AddChecked);
        $t.And = System.Linq.Expressions.ExpressionType().AddChecked + 1;
        $t.And$ = $p.$ctor.$new("And", System.Linq.Expressions.ExpressionType().And);
        $t.AndAlso = System.Linq.Expressions.ExpressionType().And + 1;
        $t.AndAlso$ = $p.$ctor.$new("AndAlso", System.Linq.Expressions.ExpressionType().AndAlso);
        $t.ArrayLength = System.Linq.Expressions.ExpressionType().AndAlso + 1;
        $t.ArrayLength$ = $p.$ctor.$new("ArrayLength", System.Linq.Expressions.ExpressionType().ArrayLength);
        $t.ArrayIndex = System.Linq.Expressions.ExpressionType().ArrayLength + 1;
        $t.ArrayIndex$ = $p.$ctor.$new("ArrayIndex", System.Linq.Expressions.ExpressionType().ArrayIndex);
        $t.Call = System.Linq.Expressions.ExpressionType().ArrayIndex + 1;
        $t.Call$ = $p.$ctor.$new("Call", System.Linq.Expressions.ExpressionType().Call);
        $t.Coalesce = System.Linq.Expressions.ExpressionType().Call + 1;
        $t.Coalesce$ = $p.$ctor.$new("Coalesce", System.Linq.Expressions.ExpressionType().Coalesce);
        $t.Conditional = System.Linq.Expressions.ExpressionType().Coalesce + 1;
        $t.Conditional$ = $p.$ctor.$new("Conditional", System.Linq.Expressions.ExpressionType().Conditional);
        $t.Constant = System.Linq.Expressions.ExpressionType().Conditional + 1;
        $t.Constant$ = $p.$ctor.$new("Constant", System.Linq.Expressions.ExpressionType().Constant);
        $t.Convert = System.Linq.Expressions.ExpressionType().Constant + 1;
        $t.Convert$ = $p.$ctor.$new("Convert", System.Linq.Expressions.ExpressionType().Convert);
        $t.ConvertChecked = System.Linq.Expressions.ExpressionType().Convert + 1;
        $t.ConvertChecked$ = $p.$ctor.$new("ConvertChecked", System.Linq.Expressions.ExpressionType().ConvertChecked);
        $t.Divide = System.Linq.Expressions.ExpressionType().ConvertChecked + 1;
        $t.Divide$ = $p.$ctor.$new("Divide", System.Linq.Expressions.ExpressionType().Divide);
        $t.Equal = System.Linq.Expressions.ExpressionType().Divide + 1;
        $t.Equal$ = $p.$ctor.$new("Equal", System.Linq.Expressions.ExpressionType().Equal);
        $t.ExclusiveOr = System.Linq.Expressions.ExpressionType().Equal + 1;
        $t.ExclusiveOr$ = $p.$ctor.$new("ExclusiveOr", System.Linq.Expressions.ExpressionType().ExclusiveOr);
        $t.GreaterThan = System.Linq.Expressions.ExpressionType().ExclusiveOr + 1;
        $t.GreaterThan$ = $p.$ctor.$new("GreaterThan", System.Linq.Expressions.ExpressionType().GreaterThan);
        $t.GreaterThanOrEqual = System.Linq.Expressions.ExpressionType().GreaterThan + 1;
        $t.GreaterThanOrEqual$ = $p.$ctor.$new("GreaterThanOrEqual", System.Linq.Expressions.ExpressionType().GreaterThanOrEqual);
        $t.Invoke = System.Linq.Expressions.ExpressionType().GreaterThanOrEqual + 1;
        $t.Invoke$ = $p.$ctor.$new("Invoke", System.Linq.Expressions.ExpressionType().Invoke);
        $t.Lambda = System.Linq.Expressions.ExpressionType().Invoke + 1;
        $t.Lambda$ = $p.$ctor.$new("Lambda", System.Linq.Expressions.ExpressionType().Lambda);
        $t.LeftShift = System.Linq.Expressions.ExpressionType().Lambda + 1;
        $t.LeftShift$ = $p.$ctor.$new("LeftShift", System.Linq.Expressions.ExpressionType().LeftShift);
        $t.LessThan = System.Linq.Expressions.ExpressionType().LeftShift + 1;
        $t.LessThan$ = $p.$ctor.$new("LessThan", System.Linq.Expressions.ExpressionType().LessThan);
        $t.LessThanOrEqual = System.Linq.Expressions.ExpressionType().LessThan + 1;
        $t.LessThanOrEqual$ = $p.$ctor.$new("LessThanOrEqual", System.Linq.Expressions.ExpressionType().LessThanOrEqual);
        $t.ListInit = System.Linq.Expressions.ExpressionType().LessThanOrEqual + 1;
        $t.ListInit$ = $p.$ctor.$new("ListInit", System.Linq.Expressions.ExpressionType().ListInit);
        $t.MemberAccess = System.Linq.Expressions.ExpressionType().ListInit + 1;
        $t.MemberAccess$ = $p.$ctor.$new("MemberAccess", System.Linq.Expressions.ExpressionType().MemberAccess);
        $t.MemberInit = System.Linq.Expressions.ExpressionType().MemberAccess + 1;
        $t.MemberInit$ = $p.$ctor.$new("MemberInit", System.Linq.Expressions.ExpressionType().MemberInit);
        $t.Modulo = System.Linq.Expressions.ExpressionType().MemberInit + 1;
        $t.Modulo$ = $p.$ctor.$new("Modulo", System.Linq.Expressions.ExpressionType().Modulo);
        $t.Multiply = System.Linq.Expressions.ExpressionType().Modulo + 1;
        $t.Multiply$ = $p.$ctor.$new("Multiply", System.Linq.Expressions.ExpressionType().Multiply);
        $t.MultiplyChecked = System.Linq.Expressions.ExpressionType().Multiply + 1;
        $t.MultiplyChecked$ = $p.$ctor.$new("MultiplyChecked", System.Linq.Expressions.ExpressionType().MultiplyChecked);
        $t.Negate = System.Linq.Expressions.ExpressionType().MultiplyChecked + 1;
        $t.Negate$ = $p.$ctor.$new("Negate", System.Linq.Expressions.ExpressionType().Negate);
        $t.UnaryPlus = System.Linq.Expressions.ExpressionType().Negate + 1;
        $t.UnaryPlus$ = $p.$ctor.$new("UnaryPlus", System.Linq.Expressions.ExpressionType().UnaryPlus);
        $t.NegateChecked = System.Linq.Expressions.ExpressionType().UnaryPlus + 1;
        $t.NegateChecked$ = $p.$ctor.$new("NegateChecked", System.Linq.Expressions.ExpressionType().NegateChecked);
        $t.New = System.Linq.Expressions.ExpressionType().NegateChecked + 1;
        $t.New$ = $p.$ctor.$new("New", System.Linq.Expressions.ExpressionType().New);
        $t.NewArrayInit = System.Linq.Expressions.ExpressionType().New + 1;
        $t.NewArrayInit$ = $p.$ctor.$new("NewArrayInit", System.Linq.Expressions.ExpressionType().NewArrayInit);
        $t.NewArrayBounds = System.Linq.Expressions.ExpressionType().NewArrayInit + 1;
        $t.NewArrayBounds$ = $p.$ctor.$new("NewArrayBounds", System.Linq.Expressions.ExpressionType().NewArrayBounds);
        $t.Not = System.Linq.Expressions.ExpressionType().NewArrayBounds + 1;
        $t.Not$ = $p.$ctor.$new("Not", System.Linq.Expressions.ExpressionType().Not);
        $t.NotEqual = System.Linq.Expressions.ExpressionType().Not + 1;
        $t.NotEqual$ = $p.$ctor.$new("NotEqual", System.Linq.Expressions.ExpressionType().NotEqual);
        $t.Or = System.Linq.Expressions.ExpressionType().NotEqual + 1;
        $t.Or$ = $p.$ctor.$new("Or", System.Linq.Expressions.ExpressionType().Or);
        $t.OrElse = System.Linq.Expressions.ExpressionType().Or + 1;
        $t.OrElse$ = $p.$ctor.$new("OrElse", System.Linq.Expressions.ExpressionType().OrElse);
        $t.Parameter = System.Linq.Expressions.ExpressionType().OrElse + 1;
        $t.Parameter$ = $p.$ctor.$new("Parameter", System.Linq.Expressions.ExpressionType().Parameter);
        $t.Power = System.Linq.Expressions.ExpressionType().Parameter + 1;
        $t.Power$ = $p.$ctor.$new("Power", System.Linq.Expressions.ExpressionType().Power);
        $t.Quote = System.Linq.Expressions.ExpressionType().Power + 1;
        $t.Quote$ = $p.$ctor.$new("Quote", System.Linq.Expressions.ExpressionType().Quote);
        $t.RightShift = System.Linq.Expressions.ExpressionType().Quote + 1;
        $t.RightShift$ = $p.$ctor.$new("RightShift", System.Linq.Expressions.ExpressionType().RightShift);
        $t.Subtract = System.Linq.Expressions.ExpressionType().RightShift + 1;
        $t.Subtract$ = $p.$ctor.$new("Subtract", System.Linq.Expressions.ExpressionType().Subtract);
        $t.SubtractChecked = System.Linq.Expressions.ExpressionType().Subtract + 1;
        $t.SubtractChecked$ = $p.$ctor.$new("SubtractChecked", System.Linq.Expressions.ExpressionType().SubtractChecked);
        $t.TypeAs = System.Linq.Expressions.ExpressionType().SubtractChecked + 1;
        $t.TypeAs$ = $p.$ctor.$new("TypeAs", System.Linq.Expressions.ExpressionType().TypeAs);
        $t.TypeIs = System.Linq.Expressions.ExpressionType().TypeAs + 1;
        $t.TypeIs$ = $p.$ctor.$new("TypeIs", System.Linq.Expressions.ExpressionType().TypeIs);
        $t.Assign = System.Linq.Expressions.ExpressionType().TypeIs + 1;
        $t.Assign$ = $p.$ctor.$new("Assign", System.Linq.Expressions.ExpressionType().Assign);
        $t.Block = System.Linq.Expressions.ExpressionType().Assign + 1;
        $t.Block$ = $p.$ctor.$new("Block", System.Linq.Expressions.ExpressionType().Block);
        $t.DebugInfo = System.Linq.Expressions.ExpressionType().Block + 1;
        $t.DebugInfo$ = $p.$ctor.$new("DebugInfo", System.Linq.Expressions.ExpressionType().DebugInfo);
        $t.Decrement = System.Linq.Expressions.ExpressionType().DebugInfo + 1;
        $t.Decrement$ = $p.$ctor.$new("Decrement", System.Linq.Expressions.ExpressionType().Decrement);
        $t.Dynamic = System.Linq.Expressions.ExpressionType().Decrement + 1;
        $t.Dynamic$ = $p.$ctor.$new("Dynamic", System.Linq.Expressions.ExpressionType().Dynamic);
        $t.Default = System.Linq.Expressions.ExpressionType().Dynamic + 1;
        $t.Default$ = $p.$ctor.$new("Default", System.Linq.Expressions.ExpressionType().Default);
        $t.Extension = System.Linq.Expressions.ExpressionType().Default + 1;
        $t.Extension$ = $p.$ctor.$new("Extension", System.Linq.Expressions.ExpressionType().Extension);
        $t.Goto = System.Linq.Expressions.ExpressionType().Extension + 1;
        $t.Goto$ = $p.$ctor.$new("Goto", System.Linq.Expressions.ExpressionType().Goto);
        $t.Increment = System.Linq.Expressions.ExpressionType().Goto + 1;
        $t.Increment$ = $p.$ctor.$new("Increment", System.Linq.Expressions.ExpressionType().Increment);
        $t.Index = System.Linq.Expressions.ExpressionType().Increment + 1;
        $t.Index$ = $p.$ctor.$new("Index", System.Linq.Expressions.ExpressionType().Index);
        $t.Label = System.Linq.Expressions.ExpressionType().Index + 1;
        $t.Label$ = $p.$ctor.$new("Label", System.Linq.Expressions.ExpressionType().Label);
        $t.RuntimeVariables = System.Linq.Expressions.ExpressionType().Label + 1;
        $t.RuntimeVariables$ = $p.$ctor.$new("RuntimeVariables", System.Linq.Expressions.ExpressionType().RuntimeVariables);
        $t.Loop = System.Linq.Expressions.ExpressionType().RuntimeVariables + 1;
        $t.Loop$ = $p.$ctor.$new("Loop", System.Linq.Expressions.ExpressionType().Loop);
        $t.Switch = System.Linq.Expressions.ExpressionType().Loop + 1;
        $t.Switch$ = $p.$ctor.$new("Switch", System.Linq.Expressions.ExpressionType().Switch);
        $t.Throw = System.Linq.Expressions.ExpressionType().Switch + 1;
        $t.Throw$ = $p.$ctor.$new("Throw", System.Linq.Expressions.ExpressionType().Throw);
        $t.Try = System.Linq.Expressions.ExpressionType().Throw + 1;
        $t.Try$ = $p.$ctor.$new("Try", System.Linq.Expressions.ExpressionType().Try);
        $t.Unbox = System.Linq.Expressions.ExpressionType().Try + 1;
        $t.Unbox$ = $p.$ctor.$new("Unbox", System.Linq.Expressions.ExpressionType().Unbox);
        $t.AddAssign = System.Linq.Expressions.ExpressionType().Unbox + 1;
        $t.AddAssign$ = $p.$ctor.$new("AddAssign", System.Linq.Expressions.ExpressionType().AddAssign);
        $t.AndAssign = System.Linq.Expressions.ExpressionType().AddAssign + 1;
        $t.AndAssign$ = $p.$ctor.$new("AndAssign", System.Linq.Expressions.ExpressionType().AndAssign);
        $t.DivideAssign = System.Linq.Expressions.ExpressionType().AndAssign + 1;
        $t.DivideAssign$ = $p.$ctor.$new("DivideAssign", System.Linq.Expressions.ExpressionType().DivideAssign);
        $t.ExclusiveOrAssign = System.Linq.Expressions.ExpressionType().DivideAssign + 1;
        $t.ExclusiveOrAssign$ = $p.$ctor.$new("ExclusiveOrAssign", System.Linq.Expressions.ExpressionType().ExclusiveOrAssign);
        $t.LeftShiftAssign = System.Linq.Expressions.ExpressionType().ExclusiveOrAssign + 1;
        $t.LeftShiftAssign$ = $p.$ctor.$new("LeftShiftAssign", System.Linq.Expressions.ExpressionType().LeftShiftAssign);
        $t.ModuloAssign = System.Linq.Expressions.ExpressionType().LeftShiftAssign + 1;
        $t.ModuloAssign$ = $p.$ctor.$new("ModuloAssign", System.Linq.Expressions.ExpressionType().ModuloAssign);
        $t.MultiplyAssign = System.Linq.Expressions.ExpressionType().ModuloAssign + 1;
        $t.MultiplyAssign$ = $p.$ctor.$new("MultiplyAssign", System.Linq.Expressions.ExpressionType().MultiplyAssign);
        $t.OrAssign = System.Linq.Expressions.ExpressionType().MultiplyAssign + 1;
        $t.OrAssign$ = $p.$ctor.$new("OrAssign", System.Linq.Expressions.ExpressionType().OrAssign);
        $t.PowerAssign = System.Linq.Expressions.ExpressionType().OrAssign + 1;
        $t.PowerAssign$ = $p.$ctor.$new("PowerAssign", System.Linq.Expressions.ExpressionType().PowerAssign);
        $t.RightShiftAssign = System.Linq.Expressions.ExpressionType().PowerAssign + 1;
        $t.RightShiftAssign$ = $p.$ctor.$new("RightShiftAssign", System.Linq.Expressions.ExpressionType().RightShiftAssign);
        $t.SubtractAssign = System.Linq.Expressions.ExpressionType().RightShiftAssign + 1;
        $t.SubtractAssign$ = $p.$ctor.$new("SubtractAssign", System.Linq.Expressions.ExpressionType().SubtractAssign);
        $t.AddAssignChecked = System.Linq.Expressions.ExpressionType().SubtractAssign + 1;
        $t.AddAssignChecked$ = $p.$ctor.$new("AddAssignChecked", System.Linq.Expressions.ExpressionType().AddAssignChecked);
        $t.MultiplyAssignChecked = System.Linq.Expressions.ExpressionType().AddAssignChecked + 1;
        $t.MultiplyAssignChecked$ = $p.$ctor.$new("MultiplyAssignChecked", System.Linq.Expressions.ExpressionType().MultiplyAssignChecked);
        $t.SubtractAssignChecked = System.Linq.Expressions.ExpressionType().MultiplyAssignChecked + 1;
        $t.SubtractAssignChecked$ = $p.$ctor.$new("SubtractAssignChecked", System.Linq.Expressions.ExpressionType().SubtractAssignChecked);
        $t.PreIncrementAssign = System.Linq.Expressions.ExpressionType().SubtractAssignChecked + 1;
        $t.PreIncrementAssign$ = $p.$ctor.$new("PreIncrementAssign", System.Linq.Expressions.ExpressionType().PreIncrementAssign);
        $t.PreDecrementAssign = System.Linq.Expressions.ExpressionType().PreIncrementAssign + 1;
        $t.PreDecrementAssign$ = $p.$ctor.$new("PreDecrementAssign", System.Linq.Expressions.ExpressionType().PreDecrementAssign);
        $t.PostIncrementAssign = System.Linq.Expressions.ExpressionType().PreDecrementAssign + 1;
        $t.PostIncrementAssign$ = $p.$ctor.$new("PostIncrementAssign", System.Linq.Expressions.ExpressionType().PostIncrementAssign);
        $t.PostDecrementAssign = System.Linq.Expressions.ExpressionType().PostIncrementAssign + 1;
        $t.PostDecrementAssign$ = $p.$ctor.$new("PostDecrementAssign", System.Linq.Expressions.ExpressionType().PostDecrementAssign);
        $t.TypeEqual = System.Linq.Expressions.ExpressionType().PostDecrementAssign + 1;
        $t.TypeEqual$ = $p.$ctor.$new("TypeEqual", System.Linq.Expressions.ExpressionType().TypeEqual);
        $t.OnesComplement = System.Linq.Expressions.ExpressionType().TypeEqual + 1;
        $t.OnesComplement$ = $p.$ctor.$new("OnesComplement", System.Linq.Expressions.ExpressionType().OnesComplement);
        $t.IsTrue = System.Linq.Expressions.ExpressionType().OnesComplement + 1;
        $t.IsTrue$ = $p.$ctor.$new("IsTrue", System.Linq.Expressions.ExpressionType().IsTrue);
        $t.IsFalse = System.Linq.Expressions.ExpressionType().IsTrue + 1;
        $t.IsFalse$ = $p.$ctor.$new("IsFalse", System.Linq.Expressions.ExpressionType().IsFalse);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Linq.Expressions.ExpressionType, System.Linq.Expressions.ExpressionType.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ExpressionType);
System.Linq.Expressions.ExpressionVisitor = $define("System.Linq.Expressions.ExpressionVisitor");
System.Linq.Expressions.ExpressionVisitor.prototype = new System.Object();
(System.Linq.Expressions.ExpressionVisitor.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ExpressionVisitor;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.ExpressionVisitor";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ExpressionVisitor", []);this.$type.Init("System.Linq.Expressions.ExpressionVisitor", System.Linq.Expressions.ExpressionVisitor, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Visit$1", System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Visit", System.Linq.Expressions.ExpressionVisitor.prototype.Visit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1, 0, 0, null, [])], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitArguments", System.Linq.Expressions.ExpressionVisitor.prototype.VisitArguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Linq.Expressions.IArgumentProvider, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Visit$2", System.Linq.Expressions.ExpressionVisitor.prototype.Visit$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementVisitor", System.Func$2, 1, 0, null, [])], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitAndConvert$1", System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", T, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callerName", String, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitAndConvert", System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callerName", String, 1, 0, null, [])], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitBinary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitBinary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.BinaryExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConditional", System.Linq.Expressions.ExpressionVisitor.prototype.VisitConditional, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConditionalExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConstant", System.Linq.Expressions.ExpressionVisitor.prototype.VisitConstant, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConstantExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitDefault", System.Linq.Expressions.ExpressionVisitor.prototype.VisitDefault, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.DefaultExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitInvocation", System.Linq.Expressions.ExpressionVisitor.prototype.VisitInvocation, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.InvocationExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitLambda", System.Linq.Expressions.ExpressionVisitor.prototype.VisitLambda, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.Expression$1, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMember", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMember, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitIndex", System.Linq.Expressions.ExpressionVisitor.prototype.VisitIndex, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.IndexExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMethodCall", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMethodCall, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MethodCallExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNewArray", System.Linq.Expressions.ExpressionVisitor.prototype.VisitNewArray, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewArrayExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNew", System.Linq.Expressions.ExpressionVisitor.prototype.VisitNew, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitParameter", System.Linq.Expressions.ExpressionVisitor.prototype.VisitParameter, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ParameterExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitTypeBinary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitTypeBinary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.TypeBinaryExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitUnary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitUnary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.UnaryExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberInitExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitListInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitListInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ListInitExpression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitElementInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitElementInit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ElementInit, 0, 0, null, [])], System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberBinding, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberBinding, 0, 0, null, [])], System.Linq.Expressions.MemberBinding, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberAssignment", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberAssignment, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberAssignment, 0, 0, null, [])], System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberMemberBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberMemberBinding, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberMemberBinding, 0, 0, null, [])], System.Linq.Expressions.MemberMemberBinding, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberListBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberListBinding, [System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberListBinding, 0, 0, null, [])], System.Linq.Expressions.MemberListBinding, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateUnary", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateUnary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Linq.Expressions.UnaryExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Linq.Expressions.UnaryExpression, 1, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateBinary", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateBinary, [System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Linq.Expressions.BinaryExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Linq.Expressions.BinaryExpression, 1, 0, null, [])], System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateChildType", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateChildType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodName", String, 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ExpressionVisitor.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Visit$1 = function(node) {
        if (node != null) {
            return node.Accept(this);
        }
        return null;
    };
    $p.Visit = function(nodes) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = this.Visit$1(nodes.get_Item(i));
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = new Array(n);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return (System.Collections.Generic.List$1$(System.Linq.Expressions.Expression)).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitArguments = function(nodes) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Arguments().get_Count(); i < n; i++) {
            var curNode = nodes.get_Arguments().get_Item(i);
            var node = this.Visit$1(curNode);
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == curNode) {
                    newNodes = new Array(n);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Arguments().get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        return newNodes;
    };
    $t.Visit$2 = function(T, nodes, elementVisitor) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = elementVisitor(nodes.get_Item(i));
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = new Array(n);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return (System.Collections.Generic.List$1$(T)).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitAndConvert$1 = function(T, node, callerName) {
        if (node == null) {
            return null;
        }
        node = (function() {
            var $as$ = this.Visit$1(node);
            if (!System.Type.prototype.IsInstanceOfType.call(T.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (node == null) {
            throw System.Exception.prototype.$ctor$1.$new("MustRewriteToSameNode").InternalInit(new Error());
        }
        return node;
    };
    $p.VisitAndConvert = function(T, nodes, callerName) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = (function() {
                var $as$ = this.Visit$1(nodes.get_Item(i));
                if (!System.Type.prototype.IsInstanceOfType.call(T.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (node == null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteToSameNode").InternalInit(new Error());
            }
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = new Array(n);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return (System.Collections.Generic.List$1$(T)).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitBinary = function(node) {
        return System.Linq.Expressions.ExpressionVisitor.ValidateBinary(node, node.Update(this.Visit$1(node.get_Left()), this.VisitAndConvert$1(System.Linq.Expressions.LambdaExpression, node.get_Conversion(), "VisitBinary"), this.Visit$1(node.get_Right())));
    };
    $p.VisitConditional = function(node) {
        return node.Update(this.Visit$1(node.get_Test()), this.Visit$1(node.get_IfTrue()), this.Visit$1(node.get_IfFalse()));
    };
    $p.VisitConstant = function(node) {
        return node;
    };
    $p.VisitDefault = function(node) {
        return node;
    };
    $p.VisitInvocation = function(node) {
        var e = this.Visit$1(node.get_Expression());
        var a = this.VisitArguments(node);
        if (e == node.get_Expression() && a == null) {
            return node;
        }
        return node.Rewrite(e, a);
    };
    $p.VisitLambda = function(T, node) {
        return node.Update(this.Visit$1(node.get_Body()), this.VisitAndConvert(System.Linq.Expressions.ParameterExpression, node.get_Parameters(), "VisitLambda"));
    };
    $p.VisitMember = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitIndex = function(node) {
        var o = this.Visit$1(node.get_Object());
        var a = this.VisitArguments(node);
        if (o == node.get_Object() && a == null) {
            return node;
        }
        return node;
    };
    $p.VisitMethodCall = function(node) {
        var o = this.Visit$1(node.get_Object());
        var a = this.VisitArguments(node);
        if (o == node.get_Object() && a == null) {
            return node;
        }
        return node;
    };
    $p.VisitNewArray = function(node) {
        return node.Update(this.Visit(node.get_Expressions()));
    };
    $p.VisitNew = function(node) {
        return node.Update(this.Visit(node.get_Arguments()));
    };
    $p.VisitParameter = function(node) {
        return node;
    };
    $p.VisitTypeBinary = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitUnary = function(node) {
        return System.Linq.Expressions.ExpressionVisitor.ValidateUnary(node, node.Update(this.Visit$1(node.get_Operand())));
    };
    $p.VisitMemberInit = function(node) {
        return node.Update(this.VisitAndConvert$1(System.Linq.Expressions.NewExpression, node.get_NewExpression(), "VisitMemberInit"), System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.MemberBinding, node.get_Bindings(), this.VisitMemberBinding));
    };
    $p.VisitListInit = function(node) {
        return node.Update(this.VisitAndConvert$1(System.Linq.Expressions.NewExpression, node.get_NewExpression(), "VisitListInit"), System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.ElementInit, node.get_Initializers(), this.VisitElementInit));
    };
    $p.VisitElementInit = function(node) {
        return node.Update(this.Visit(node.get_Arguments()));
    };
    $p.VisitMemberBinding = function(node) {
        switch (node.get_BindingType()) {
            case System.Linq.Expressions.MemberBindingType().Assignment:
                return this.VisitMemberAssignment($cast(System.Linq.Expressions.MemberAssignment, node));
            case System.Linq.Expressions.MemberBindingType().MemberBinding:
                return this.VisitMemberMemberBinding($cast(System.Linq.Expressions.MemberMemberBinding, node));
            case System.Linq.Expressions.MemberBindingType().ListBinding:
                return this.VisitMemberListBinding($cast(System.Linq.Expressions.MemberListBinding, node));
            default:
                throw System.Exception.prototype.$ctor$1.$new("UnhandledBindingType").InternalInit(new Error());
        }
    };
    $p.VisitMemberAssignment = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitMemberMemberBinding = function(node) {
        return node.Update(System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.MemberBinding, node.get_Bindings(), this.VisitMemberBinding));
    };
    $p.VisitMemberListBinding = function(node) {
        return node.Update(System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.ElementInit, node.get_Initializers(), this.VisitElementInit));
    };
    $t.ValidateUnary = function(before, after) {
        if (before != after && before.get_Method() == null) {
            if (after.get_Method() != null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteWithoutMethod").InternalInit(new Error());
            }
            if (before.get_Operand() != null && after.get_Operand() != null) {
                System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Operand().get_Type(), after.get_Operand().get_Type(), "VisitUnary");
            }
        }
        return after;
    };
    $t.ValidateBinary = function(before, after) {
        if (before != after && before.get_Method() == null) {
            if (after.get_Method() != null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteWithoutMethod").InternalInit(new Error());
            }
            System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Left().get_Type(), after.get_Left().get_Type(), "VisitBinary");
            System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Right().get_Type(), after.get_Right().get_Type(), "VisitBinary");
        }
        return after;
    };
    $t.ValidateChildType = function(before, after, methodName) {
        if (before.get_IsValueType()) {
            if (before == after) {
                return;
            }
        }
        else
            if (!after.get_IsValueType()) {
                return;
            }
        throw System.Exception.prototype.$ctor$1.$new("MustRewriteChildToSameType").InternalInit(new Error());
    };
}).call(null, System.Linq.Expressions.ExpressionVisitor, System.Linq.Expressions.ExpressionVisitor.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ExpressionVisitor);
System.Linq.Expressions.FieldExpression = $define("System.Linq.Expressions.FieldExpression");
System.Linq.Expressions.FieldExpression.prototype = new System.Linq.Expressions.MemberExpression();
(System.Linq.Expressions.FieldExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.FieldExpression;
    $t.$baseType = System.Linq.Expressions.MemberExpression;
    $p.$typeName = "System.Linq.Expressions.FieldExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldExpression", []);this.$type.Init("System.Linq.Expressions.FieldExpression", System.Linq.Expressions.FieldExpression, System.Linq.Expressions.MemberExpression, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.FieldExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.FieldExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.FieldInfo, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.FieldExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function(expression, member) {
        System.Linq.Expressions.MemberExpression.prototype.$ctor.call(this, expression, member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.get_Type = function() {
        return ($cast(System.Reflection.FieldInfo, this.get_Member())).get_FieldType();
    };
}).call(null, System.Linq.Expressions.FieldExpression, System.Linq.Expressions.FieldExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.FieldExpression);
System.Linq.Expressions.IArgumentProvider = $define("System.Linq.Expressions.IArgumentProvider");
System.Linq.Expressions.IArgumentProvider.prototype = new System.Object();
(System.Linq.Expressions.IArgumentProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.IArgumentProvider;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.IArgumentProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IArgumentProvider", []);this.$type.Init("System.Linq.Expressions.IArgumentProvider", System.Linq.Expressions.IArgumentProvider, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Linq$Expressions$IArgumentProvider$get_Arguments", System.Linq.Expressions.IArgumentProvider.prototype.System$Linq$Expressions$IArgumentProvider$get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System$Linq$Expressions$IArgumentProvider$get_Arguments", System.Linq.Expressions.IArgumentProvider.prototype.System$Linq$Expressions$IArgumentProvider$get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.get_Arguments = function() {
    };
}).call(null, System.Linq.Expressions.IArgumentProvider, System.Linq.Expressions.IArgumentProvider.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.IArgumentProvider);
System.Linq.Expressions.IndexExpression = $define("System.Linq.Expressions.IndexExpression");
System.Linq.Expressions.IndexExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.IndexExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.IndexExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.IndexExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IndexExpression", []);this.$type.Init("System.Linq.Expressions.IndexExpression", System.Linq.Expressions.IndexExpression, System.Linq.Expressions.Expression, [System.Linq.Expressions.IArgumentProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Object$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Indexer$k__BackingField", System.Reflection.PropertyInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("elementType", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.IndexExpression.prototype.get_Object, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.IndexExpression.prototype.set_Object, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Indexer", System.Linq.Expressions.IndexExpression.prototype.get_Indexer, [], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Indexer", System.Linq.Expressions.IndexExpression.prototype.set_Indexer, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.PropertyInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IndexExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.IndexExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.IndexExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.IndexExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.IndexExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", System.Type, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Object", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.IndexExpression.prototype.get_Object, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.IndexExpression.prototype.set_Object, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Indexer", System.Reflection.PropertyInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Indexer", System.Linq.Expressions.IndexExpression.prototype.get_Indexer, [], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Indexer", System.Linq.Expressions.IndexExpression.prototype.set_Indexer, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.PropertyInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IndexExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.IndexExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.IndexExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Object$k__BackingField = null;
    $p.get_Object = function() {
        return this.$Object$k__BackingField;
    };
    $p.set_Object = function(value) {
        this.$Object$k__BackingField = value;
    };
    $p.$Indexer$k__BackingField = null;
    $p.get_Indexer = function() {
        return this.$Indexer$k__BackingField;
    };
    $p.set_Indexer = function(value) {
        this.$Indexer$k__BackingField = value;
    };
    $p.$Arguments$k__BackingField = null;
    $p.get_Arguments = function() {
        return this.$Arguments$k__BackingField;
    };
    $p.set_Arguments = function(value) {
        this.$Arguments$k__BackingField = value;
    };
    $p.elementType = null;
    $p.$ctor = function(obj, indexer, elementType, args) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Index);
        this.set_Object(obj);
        this.set_Indexer(indexer);
        this.set_Arguments(args);
        this.elementType = elementType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(obj, indexer, elementType, args) {
        return new $p.$ctor.$type(
            this, 
            obj, 
            indexer, 
            elementType, 
            args
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitIndex(this);
    };
    $p.get_Type = function() {
        return this.elementType;
    };
}).call(null, System.Linq.Expressions.IndexExpression, System.Linq.Expressions.IndexExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.IndexExpression);
System.Linq.Expressions.InvocationExpression = $define("System.Linq.Expressions.InvocationExpression");
System.Linq.Expressions.InvocationExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.InvocationExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.InvocationExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.InvocationExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvocationExpression", []);this.$type.Init("System.Linq.Expressions.InvocationExpression", System.Linq.Expressions.InvocationExpression, System.Linq.Expressions.Expression, [System.Linq.Expressions.IArgumentProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("returnType", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.InvocationExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.InvocationExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.InvocationExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.InvocationExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.InvocationExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.InvocationExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Rewrite", System.Linq.Expressions.InvocationExpression.prototype.Rewrite, [System.Reflection.ParameterInfo.prototype.$ctor.$new("lambda", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 1, 0, null, [])], System.Linq.Expressions.InvocationExpression, System.Reflection.MethodAttributes().Assembly, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.InvocationExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.InvocationExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.InvocationExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.InvocationExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.InvocationExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.InvocationExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Expression$k__BackingField = null;
    $p.get_Expression = function() {
        return this.$Expression$k__BackingField;
    };
    $p.set_Expression = function(value) {
        this.$Expression$k__BackingField = value;
    };
    $p.$Arguments$k__BackingField = null;
    $p.get_Arguments = function() {
        return this.$Arguments$k__BackingField;
    };
    $p.set_Arguments = function(value) {
        this.$Arguments$k__BackingField = value;
    };
    $p.returnType = null;
    $p.$ctor = function(expression, args, returnType) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Invoke);
        this.set_Expression(expression);
        this.set_Arguments(args);
        this.returnType = returnType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, args, returnType) {
        return new $p.$ctor.$type(
            this, 
            expression, 
            args, 
            returnType
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitInvocation(this);
    };
    $p.get_Type = function() {
        return this.returnType;
    };
    $p.Rewrite = function(lambda, args) {
        return this;
    };
}).call(null, System.Linq.Expressions.InvocationExpression, System.Linq.Expressions.InvocationExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.InvocationExpression);
System.Linq.Expressions.ListInitExpression = $define("System.Linq.Expressions.ListInitExpression");
System.Linq.Expressions.ListInitExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.ListInitExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ListInitExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ListInitExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ListInitExpression", []);this.$type.Init("System.Linq.Expressions.ListInitExpression", System.Linq.Expressions.ListInitExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$NewExpression$k__BackingField", System.Linq.Expressions.NewExpression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Initializers$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression, [], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.set_NewExpression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.ListInitExpression.prototype.get_Initializers, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.ListInitExpression.prototype.set_Initializers, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ListInitExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ListInitExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ListInitExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1, 1, 0, null, [])], System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ListInitExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression, [], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.set_NewExpression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Initializers", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.ListInitExpression.prototype.get_Initializers, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.ListInitExpression.prototype.set_Initializers, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ListInitExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$NewExpression$k__BackingField = null;
    $p.get_NewExpression = function() {
        return this.$NewExpression$k__BackingField;
    };
    $p.set_NewExpression = function(value) {
        this.$NewExpression$k__BackingField = value;
    };
    $p.$Initializers$k__BackingField = null;
    $p.get_Initializers = function() {
        return this.$Initializers$k__BackingField;
    };
    $p.set_Initializers = function(value) {
        this.$Initializers$k__BackingField = value;
    };
    $p.$ctor = function(newExpression, initializers) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().ListInit);
        this.set_NewExpression(newExpression);
        this.set_Initializers(initializers);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(newExpression, initializers) {
        return new $p.$ctor.$type(this, newExpression, initializers);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitListInit(this);
    };
    $p.get_Type = function() {
        return this.get_NewExpression().get_Type();
    };
    $p.Update = function(NewExpression, initializers) {
        return this;
    };
}).call(null, System.Linq.Expressions.ListInitExpression, System.Linq.Expressions.ListInitExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ListInitExpression);
System.Linq.Expressions.MemberAssignment = $define("System.Linq.Expressions.MemberAssignment");
System.Linq.Expressions.MemberAssignment.prototype = new System.Linq.Expressions.MemberBinding();
(System.Linq.Expressions.MemberAssignment.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberAssignment;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberAssignment";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberAssignment", []);this.$type.Init("System.Linq.Expressions.MemberAssignment", System.Linq.Expressions.MemberAssignment, System.Linq.Expressions.MemberBinding, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberAssignment.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberAssignment.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberAssignment.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberAssignment.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberAssignment.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberAssignment.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Expression$k__BackingField = null;
    $p.get_Expression = function() {
        return this.$Expression$k__BackingField;
    };
    $p.set_Expression = function(value) {
        this.$Expression$k__BackingField = value;
    };
    $p.$ctor = function(member, expression) {
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, System.Linq.Expressions.MemberBindingType().Assignment, member);
        this.set_Expression(expression);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(member, expression) {
        return new $p.$ctor.$type(this, member, expression);
    };
    $p.Update = function(Expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberAssignment, System.Linq.Expressions.MemberAssignment.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberAssignment);
System.Linq.Expressions.MemberBindingType = $define("System.Linq.Expressions.MemberBindingType");
System.Linq.Expressions.MemberBindingType.prototype = new System.Enum();
(System.Linq.Expressions.MemberBindingType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberBindingType;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Linq.Expressions.MemberBindingType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberBindingType", []);this.$type.Init("System.Linq.Expressions.MemberBindingType", System.Linq.Expressions.MemberBindingType, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Assignment", System.Linq.Expressions.MemberBindingType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberBinding", System.Linq.Expressions.MemberBindingType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ListBinding", System.Linq.Expressions.MemberBindingType, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberBindingType.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Assignment = 0;
        $t.Assignment$ = $p.$ctor.$new("Assignment", System.Linq.Expressions.MemberBindingType().Assignment);
        $t.MemberBinding = System.Linq.Expressions.MemberBindingType().Assignment + 1;
        $t.MemberBinding$ = $p.$ctor.$new("MemberBinding", System.Linq.Expressions.MemberBindingType().MemberBinding);
        $t.ListBinding = System.Linq.Expressions.MemberBindingType().MemberBinding + 1;
        $t.ListBinding$ = $p.$ctor.$new("ListBinding", System.Linq.Expressions.MemberBindingType().ListBinding);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Linq.Expressions.MemberBindingType, System.Linq.Expressions.MemberBindingType.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberBindingType);
System.Linq.Expressions.MemberInitExpression = $define("System.Linq.Expressions.MemberInitExpression");
System.Linq.Expressions.MemberInitExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.MemberInitExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberInitExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MemberInitExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberInitExpression", []);this.$type.Init("System.Linq.Expressions.MemberInitExpression", System.Linq.Expressions.MemberInitExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$NewExpression$k__BackingField", System.Linq.Expressions.NewExpression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Bindings$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression, [], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.set_NewExpression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.set_Bindings, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MemberInitExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MemberInitExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberInitExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1, 1, 0, null, [])], System.Linq.Expressions.MemberInitExpression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberInitExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression, [], System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.set_NewExpression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Bindings", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.set_Bindings, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MemberInitExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$NewExpression$k__BackingField = null;
    $p.get_NewExpression = function() {
        return this.$NewExpression$k__BackingField;
    };
    $p.set_NewExpression = function(value) {
        this.$NewExpression$k__BackingField = value;
    };
    $p.$Bindings$k__BackingField = null;
    $p.get_Bindings = function() {
        return this.$Bindings$k__BackingField;
    };
    $p.set_Bindings = function(value) {
        this.$Bindings$k__BackingField = value;
    };
    $p.$ctor = function(newExpression, bindings) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().MemberInit);
        this.set_NewExpression(newExpression);
        this.set_Bindings(bindings);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(newExpression, bindings) {
        return new $p.$ctor.$type(this, newExpression, bindings);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMemberInit(this);
    };
    $p.get_Type = function() {
        return this.get_NewExpression().get_Type();
    };
    $p.Update = function(newExpression, bindings) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberInitExpression, System.Linq.Expressions.MemberInitExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberInitExpression);
System.Linq.Expressions.MemberListBinding = $define("System.Linq.Expressions.MemberListBinding");
System.Linq.Expressions.MemberListBinding.prototype = new System.Linq.Expressions.MemberBinding();
(System.Linq.Expressions.MemberListBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberListBinding;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberListBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberListBinding", []);this.$type.Init("System.Linq.Expressions.MemberListBinding", System.Linq.Expressions.MemberListBinding, System.Linq.Expressions.MemberBinding, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Initializers$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.MemberListBinding.prototype.get_Initializers, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.MemberListBinding.prototype.set_Initializers, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberListBinding.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1, 0, 0, null, [])], System.Linq.Expressions.MemberListBinding, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberListBinding.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Initializers", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.MemberListBinding.prototype.get_Initializers, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.MemberListBinding.prototype.set_Initializers, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Initializers$k__BackingField = null;
    $p.get_Initializers = function() {
        return this.$Initializers$k__BackingField;
    };
    $p.set_Initializers = function(value) {
        this.$Initializers$k__BackingField = value;
    };
    $p.$ctor = function(bindingType, member, initializers) {
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, bindingType, member);
        this.set_Initializers(initializers);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member, initializers) {
        return new $p.$ctor.$type(
            this, 
            bindingType, 
            member, 
            initializers
        );
    };
    $p.Update = function(initializers) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberListBinding, System.Linq.Expressions.MemberListBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberListBinding);
System.Linq.Expressions.MemberMemberBinding = $define("System.Linq.Expressions.MemberMemberBinding");
System.Linq.Expressions.MemberMemberBinding.prototype = new System.Linq.Expressions.MemberBinding();
(System.Linq.Expressions.MemberMemberBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MemberMemberBinding;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberMemberBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberMemberBinding", []);this.$type.Init("System.Linq.Expressions.MemberMemberBinding", System.Linq.Expressions.MemberMemberBinding, System.Linq.Expressions.MemberBinding, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Bindings$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.set_Bindings, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberMemberBinding.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1, 0, 0, null, [])], System.Linq.Expressions.MemberMemberBinding, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberMemberBinding.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Bindings", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.set_Bindings, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Bindings$k__BackingField = null;
    $p.get_Bindings = function() {
        return this.$Bindings$k__BackingField;
    };
    $p.set_Bindings = function(value) {
        this.$Bindings$k__BackingField = value;
    };
    $p.$ctor = function(bindingType, member, bindings) {
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, bindingType, member);
        this.set_Bindings(bindings);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member, bindings) {
        return new $p.$ctor.$type(
            this, 
            bindingType, 
            member, 
            bindings
        );
    };
    $p.Update = function(bindings) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberMemberBinding, System.Linq.Expressions.MemberMemberBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberMemberBinding);
System.Linq.Expressions.MethodCallExpression = $define("System.Linq.Expressions.MethodCallExpression");
System.Linq.Expressions.MethodCallExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.MethodCallExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.MethodCallExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MethodCallExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodCallExpression", []);this.$type.Init("System.Linq.Expressions.MethodCallExpression", System.Linq.Expressions.MethodCallExpression, System.Linq.Expressions.Expression, [System.Linq.Expressions.IArgumentProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Object$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.MethodCallExpression.prototype.get_Object, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.MethodCallExpression.prototype.set_Object, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.MethodCallExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.MethodCallExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MethodCallExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MethodCallExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MethodCallExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Linq.Expressions.Expression), 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Object", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.MethodCallExpression.prototype.get_Object, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.MethodCallExpression.prototype.set_Object, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.MethodCallExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.MethodCallExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MethodCallExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Object$k__BackingField = null;
    $p.get_Object = function() {
        return this.$Object$k__BackingField;
    };
    $p.set_Object = function(value) {
        this.$Object$k__BackingField = value;
    };
    $p.$Method$k__BackingField = null;
    $p.get_Method = function() {
        return this.$Method$k__BackingField;
    };
    $p.set_Method = function(value) {
        this.$Method$k__BackingField = value;
    };
    $p.$Arguments$k__BackingField = null;
    $p.get_Arguments = function() {
        return this.$Arguments$k__BackingField;
    };
    $p.set_Arguments = function(value) {
        this.$Arguments$k__BackingField = value;
    };
    $p.$ctor = function(obj, method, args) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Call);
        this.set_Object(obj);
        this.set_Method(method);
        this.set_Arguments(System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(obj, method, args) {
        return new $p.$ctor.$type(
            this, 
            obj, 
            method, 
            args
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMethodCall(this);
    };
    $p.get_Type = function() {
        return this.get_Method().get_ReturnType();
    };
}).call(null, System.Linq.Expressions.MethodCallExpression, System.Linq.Expressions.MethodCallExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MethodCallExpression);
System.Linq.Expressions.NewArrayExpression = $define("System.Linq.Expressions.NewArrayExpression");
System.Linq.Expressions.NewArrayExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.NewArrayExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.NewArrayExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.NewArrayExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NewArrayExpression", []);this.$type.Init("System.Linq.Expressions.NewArrayExpression", System.Linq.Expressions.NewArrayExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Expressions$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.set_Expressions, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.NewArrayExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewArrayExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.NewArrayExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expressions", System.Collections.Generic.List$1, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.NewArrayExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("expressions", System.Collections.Generic.List$1, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Expressions", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.set_Expressions, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewArrayExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Expressions$k__BackingField = null;
    $p.get_Expressions = function() {
        return this.$Expressions$k__BackingField;
    };
    $p.set_Expressions = function(value) {
        this.$Expressions$k__BackingField = value;
    };
    $p.type = null;
    $p.$ctor = function(nodeType, type, expressions) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.type = type;
        this.set_Expressions(expressions);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType, type, expressions) {
        return new $p.$ctor.$type(
            this, 
            nodeType, 
            type, 
            expressions
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitNewArray(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
    $p.Update = function(expressions) {
        return this;
    };
}).call(null, System.Linq.Expressions.NewArrayExpression, System.Linq.Expressions.NewArrayExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.NewArrayExpression);
System.Linq.Expressions.NewExpression = $define("System.Linq.Expressions.NewExpression");
System.Linq.Expressions.NewExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.NewExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.NewExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.NewExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NewExpression", []);this.$type.Init("System.Linq.Expressions.NewExpression", System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression, [System.Linq.Expressions.IArgumentProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Constructor$k__BackingField", System.Reflection.ConstructorInfo, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.NewExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.NewExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Constructor", System.Linq.Expressions.NewExpression.prototype.get_Constructor, [], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Constructor", System.Linq.Expressions.NewExpression.prototype.set_Constructor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.ConstructorInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.NewExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.NewExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.NewExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.NewExpression.prototype.get_Arguments, [], System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.NewExpression.prototype.set_Arguments, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Constructor", System.Reflection.ConstructorInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Constructor", System.Linq.Expressions.NewExpression.prototype.get_Constructor, [], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Constructor", System.Linq.Expressions.NewExpression.prototype.set_Constructor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.ConstructorInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Arguments$k__BackingField = null;
    $p.get_Arguments = function() {
        return this.$Arguments$k__BackingField;
    };
    $p.set_Arguments = function(value) {
        this.$Arguments$k__BackingField = value;
    };
    $p.$Constructor$k__BackingField = null;
    $p.get_Constructor = function() {
        return this.$Constructor$k__BackingField;
    };
    $p.set_Constructor = function(value) {
        this.$Constructor$k__BackingField = value;
    };
    $p.$ctor = function(constructor, args) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().New);
        this.set_Constructor(constructor);
        this.set_Arguments(System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(constructor, args) {
        return new $p.$ctor.$type(this, constructor, args);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitNew(this);
    };
    $p.get_Type = function() {
        return this.get_Constructor().get_DeclaringType();
    };
    $p.Update = function(args) {
        return this;
    };
}).call(null, System.Linq.Expressions.NewExpression, System.Linq.Expressions.NewExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.NewExpression);
System.Linq.Expressions.ParameterExpression = $define("System.Linq.Expressions.ParameterExpression");
System.Linq.Expressions.ParameterExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.ParameterExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.ParameterExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ParameterExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterExpression", []);this.$type.Init("System.Linq.Expressions.ParameterExpression", System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$ParameterType$k__BackingField", System.Type, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.get_ParameterType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.set_ParameterType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.ParameterExpression.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Linq.Expressions.ParameterExpression.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ParameterExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ParameterExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ParameterExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("ParameterType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.get_ParameterType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.set_ParameterType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.ParameterExpression.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Linq.Expressions.ParameterExpression.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ParameterExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ParameterType$k__BackingField = null;
    $p.get_ParameterType = function() {
        return this.$ParameterType$k__BackingField;
    };
    $p.set_ParameterType = function(value) {
        this.$ParameterType$k__BackingField = value;
    };
    $p.$Name$k__BackingField = null;
    $p.get_Name = function() {
        return this.$Name$k__BackingField;
    };
    $p.set_Name = function(value) {
        this.$Name$k__BackingField = value;
    };
    $p.$ctor = function(parameterType, name) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Parameter);
        this.set_ParameterType(parameterType);
        this.set_Name(name);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(parameterType, name) {
        return new $p.$ctor.$type(this, parameterType, name);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitParameter(this);
    };
    $p.get_Type = function() {
        return this.get_ParameterType();
    };
}).call(null, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ParameterExpression);
System.Linq.Expressions.PropertyExpression = $define("System.Linq.Expressions.PropertyExpression");
System.Linq.Expressions.PropertyExpression.prototype = new System.Linq.Expressions.MemberExpression();
(System.Linq.Expressions.PropertyExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.PropertyExpression;
    $t.$baseType = System.Linq.Expressions.MemberExpression;
    $p.$typeName = "System.Linq.Expressions.PropertyExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyExpression", []);this.$type.Init("System.Linq.Expressions.PropertyExpression", System.Linq.Expressions.PropertyExpression, System.Linq.Expressions.MemberExpression, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.PropertyExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.PropertyExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.PropertyInfo, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.PropertyExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function(expression, member) {
        System.Linq.Expressions.MemberExpression.prototype.$ctor.call(this, expression, member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.get_Type = function() {
        return ($cast(System.Reflection.PropertyInfo, this.get_Member())).get_PropertyType();
    };
}).call(null, System.Linq.Expressions.PropertyExpression, System.Linq.Expressions.PropertyExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.PropertyExpression);
System.Linq.Expressions.TypeBinaryExpression = $define("System.Linq.Expressions.TypeBinaryExpression");
System.Linq.Expressions.TypeBinaryExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.TypeBinaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.TypeBinaryExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.TypeBinaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("TypeBinaryExpression", []);this.$type.Init("System.Linq.Expressions.TypeBinaryExpression", System.Linq.Expressions.TypeBinaryExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("typeOperand", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.TypeBinaryExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TypeOperand", System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.TypeBinaryExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.TypeBinaryExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeOperand", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeKind", System.Linq.Expressions.ExpressionType, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.set_Expression, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("TypeOperand", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TypeOperand", System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Expression$k__BackingField = null;
    $p.get_Expression = function() {
        return this.$Expression$k__BackingField;
    };
    $p.set_Expression = function(value) {
        this.$Expression$k__BackingField = value;
    };
    $p.typeOperand = null;
    $p.$ctor = function(expression, typeOperand, nodeKind) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeKind);
        this.set_Expression(expression);
        this.typeOperand = typeOperand;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, typeOperand, nodeKind) {
        return new $p.$ctor.$type(
            this, 
            expression, 
            typeOperand, 
            nodeKind
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitTypeBinary(this);
    };
    $p.get_TypeOperand = function() {
        return this.typeOperand;
    };
    $p.get_Type = function() {
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().TypeAs:
                return this.get_TypeOperand();
            case System.Linq.Expressions.ExpressionType().TypeIs:
                return System.Boolean.$GetType();
            default:
                throw System.Exception.prototype.$ctor$1.$new("Unexpected NodeType: " + this.get_NodeType()).InternalInit(new Error());
        }
    };
    $p.Update = function(expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.TypeBinaryExpression, System.Linq.Expressions.TypeBinaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.TypeBinaryExpression);
System.Linq.Expressions.UnaryExpression = $define("System.Linq.Expressions.UnaryExpression");
System.Linq.Expressions.UnaryExpression.prototype = new System.Linq.Expressions.Expression();
(System.Linq.Expressions.UnaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Linq.Expressions.UnaryExpression;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.UnaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UnaryExpression", []);this.$type.Init("System.Linq.Expressions.UnaryExpression", System.Linq.Expressions.UnaryExpression, System.Linq.Expressions.Expression, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Operand$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Operand", System.Linq.Expressions.UnaryExpression.prototype.get_Operand, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Operand", System.Linq.Expressions.UnaryExpression.prototype.set_Operand, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.UnaryExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.UnaryExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.UnaryExpression.prototype.Accept, [System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, [])], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.UnaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.UnaryExpression.prototype.Update, [System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.UnaryExpression.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Operand", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Operand", System.Linq.Expressions.UnaryExpression.prototype.get_Operand, [], System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Operand", System.Linq.Expressions.UnaryExpression.prototype.set_Operand, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.UnaryExpression.prototype.get_Method, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.UnaryExpression.prototype.set_Method, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Private, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.UnaryExpression.prototype.get_Type, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Operand$k__BackingField = null;
    $p.get_Operand = function() {
        return this.$Operand$k__BackingField;
    };
    $p.set_Operand = function(value) {
        this.$Operand$k__BackingField = value;
    };
    $p.$Method$k__BackingField = null;
    $p.get_Method = function() {
        return this.$Method$k__BackingField;
    };
    $p.set_Method = function(value) {
        this.$Method$k__BackingField = value;
    };
    $p.type = null;
    $p.$ctor = function(nodeType, operand, method, type) {
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Operand(operand);
        this.set_Method(method);
        this.type = type;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType, operand, method, type) {
        return new $p.$ctor.$type(
            this, 
            nodeType, 
            operand, 
            method, 
            type
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitUnary(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
    $p.Update = function(operand) {
        return this;
    };
}).call(null, System.Linq.Expressions.UnaryExpression, System.Linq.Expressions.UnaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.UnaryExpression);
System.NotImplementedException = $define("System.NotImplementedException");
System.NotImplementedException.prototype = new System.Exception();
(System.NotImplementedException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.NotImplementedException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.NotImplementedException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NotImplementedException", []);this.$type.Init("System.NotImplementedException", System.NotImplementedException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.NotImplementedException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.NotImplementedException, System.NotImplementedException.prototype);
$mscorlib$AssemblyTypes.push(System.NotImplementedException);
System.NotSupportedException = $define("System.NotSupportedException");
System.NotSupportedException.prototype = new System.Exception();
(System.NotSupportedException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.NotSupportedException;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.NotSupportedException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NotSupportedException", []);this.$type.Init("System.NotSupportedException", System.NotSupportedException, System.Exception, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.NotSupportedException.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.NotSupportedException.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.NotSupportedException.prototype.$ctor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.NotSupportedException, System.NotSupportedException.prototype);
$mscorlib$AssemblyTypes.push(System.NotSupportedException);
System.Nullable$1 = $define("System.Nullable<T>");
System.Nullable$1.prototype = new System.ValueType();
(System.Nullable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Nullable$1;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Nullable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Nullable", []);this.$type.Init("System.Nullable`1", System.Nullable$1, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasValue", System.Nullable$1.prototype.get_HasValue, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Nullable$1.prototype.get_Value, [], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValueOrDefault", System.Nullable$1.prototype.GetValueOrDefault, [], T, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Nullable$1.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, [])], System.Nullable$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Explicit", System.Nullable$1.prototype.op_Explicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Nullable$1, 0, 0, null, [])], T, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Nullable$1.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Nullable$1.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("HasValue", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasValue", System.Nullable$1.prototype.get_HasValue, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Nullable$1.prototype.get_Value, [], T, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Nullable$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Nullable$1, arguments);
    };
    $p.get_HasValue = function() {
        return false;
    };
    $p.get_Value = function() {
        return null;
    };
    $p.$ctor$1 = function(value) {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(value) {
        return new $p.$ctor$1.$type(this, value);
    };
    $p.GetValueOrDefault = function() {
        return null;
    };
    $t.op_Implicit = function(value) {
        return null;
    };
    $t.op_Explicit = function(value) {
        return null;
    };
}).call(null, System.Nullable$1, System.Nullable$1.prototype);
$mscorlib$AssemblyTypes.push(System.Nullable$1);
System.Reflection.Activator = $define("System.Reflection.Activator");
System.Reflection.Activator.prototype = new System.Object();
(System.Reflection.Activator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.Activator;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.Activator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Activator", []);this.$type.Init("System.Reflection.Activator", System.Reflection.Activator, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("LookupMask", System.Int32, System.Reflection.FieldAttributes().Assembly | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 255, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ConLookup", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Assembly | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 20, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ConstructorDefault", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Assembly | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 532, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$4", System.Reflection.Activator.prototype.CreateInstance$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$5", System.Reflection.Activator.prototype.CreateInstance$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", System.Object.$$MakeArrayType(System.Object), 5, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$2", System.Reflection.Activator.prototype.CreateInstance$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$3", System.Reflection.Activator.prototype.CreateInstance$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", System.Object.$$MakeArrayType(System.Object), 2, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.Activator.prototype.CreateInstance, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$1", System.Reflection.Activator.prototype.CreateInstance$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$6", System.Reflection.Activator.prototype.CreateInstance$6, [], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetObject", System.Reflection.Activator.prototype.GetObject, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("url", String, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetObject$1", System.Reflection.Activator.prototype.GetObject$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("url", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("state", System.Object, 2, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.Activator.prototype.$ctor, [], System.Reflection.MethodAttributes().Private, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Reflection.Activator.LookupMask = 255;
        System.Reflection.Activator.ConLookup = System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public;
        System.Reflection.Activator.ConstructorDefault = System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().CreateInstance;
    };
    $p.LookupMask = null;
    $p.ConLookup = null;
    $p.ConstructorDefault = null;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.CreateInstance$4 = function(type, bindingAttr, binder, args, culture) {
        return System.Reflection.Activator.CreateInstance$5(
            type, 
            bindingAttr, 
            binder, 
            args, 
            culture, 
            null
        );
    };
    $t.CreateInstance$5 = function(type, bindingAttr, binder, args, culture, activationAttributes) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.CreateInstance$2 = function(type, args) {
        return System.Reflection.Activator.CreateInstance$5(
            type, 
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().CreateInstance, 
            null, 
            args, 
            null, 
            null
        );
    };
    $t.CreateInstance$3 = function(type, args, activationAttributes) {
        return System.Reflection.Activator.CreateInstance$5(
            type, 
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public | System.Reflection.BindingFlags().CreateInstance, 
            null, 
            args, 
            null, 
            activationAttributes
        );
    };
    $t.CreateInstance = function(type) {
        return System.Reflection.Activator.CreateInstance$1(type, false);
    };
    $t.CreateInstance$1 = function(type, nonPublic) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.CreateInstance$6 = function(T) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetObject = function(type, url) {
        return System.Reflection.Activator.GetObject$1(type, url, null);
    };
    $t.GetObject$1 = function(type, url, state) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
}).call(null, System.Reflection.Activator, System.Reflection.Activator.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.Activator);
System.Reflection.Assembly = $define("System.Reflection.Assembly");
System.Reflection.Assembly.prototype = new System.Object();
(System.Reflection.Assembly.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.Assembly;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.Assembly";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Assembly", []);this.$type.Init("System.Reflection.Assembly", System.Reflection.Assembly, System.Object, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("fullName", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("typeFunctions", System.Object.$$MakeArrayType(Function), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("typesByName", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("typesByNameUpper", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.Assembly.prototype.get_CodeBase, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.Assembly.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_EntryPoint", System.Reflection.Assembly.prototype.get_EntryPoint, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Location", System.Reflection.Assembly.prototype.get_Location, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateQualifiedName", System.Reflection.Assembly.prototype.CreateQualifiedName, [System.Reflection.ParameterInfo.prototype.$ctor.$new("assemblyName", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 1, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAssembly", System.Reflection.Assembly.prototype.GetAssembly, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetExecutingAssembly", System.Reflection.Assembly.prototype.GetExecutingAssembly, [], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCallingAssembly", System.Reflection.Assembly.prototype.GetCallingAssembly, [], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEntryAssembly", System.Reflection.Assembly.prototype.GetEntryAssembly, [], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetName", System.Reflection.Assembly.prototype.GetName, [], System.Reflection.AssemblyName, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetName$1", System.Reflection.Assembly.prototype.GetName$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("copiedName", System.Boolean, 0, 0, null, [])], System.Reflection.AssemblyName, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType$1", System.Reflection.Assembly.prototype.GetType$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType$2", System.Reflection.Assembly.prototype.GetType$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("throwOnError", System.Boolean, 1, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType$3", System.Reflection.Assembly.prototype.GetType$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("throwOnError", System.Boolean, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 2, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypes", System.Reflection.Assembly.prototype.GetTypes, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.Assembly.prototype.GetCustomAttributes, [System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes$1", System.Reflection.Assembly.prototype.GetCustomAttributes$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.Assembly.prototype.IsDefined, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.Assembly.prototype.CreateInstance, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$1", System.Reflection.Assembly.prototype.CreateInstance$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance$2", System.Reflection.Assembly.prototype.CreateInstance$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", System.Object.$$MakeArrayType(System.Object), 6, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetReferencedAssemblies", System.Reflection.Assembly.prototype.GetReferencedAssemblies, [], System.Object.$$MakeArrayType(System.Reflection.AssemblyName), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.Assembly.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.Assembly.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fullName", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", Array, 1, 0, null, [])], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("CodeBase", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.Assembly.prototype.get_CodeBase, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.Assembly.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("EntryPoint", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_EntryPoint", System.Reflection.Assembly.prototype.get_EntryPoint, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Location", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Location", System.Reflection.Assembly.prototype.get_Location, [], String, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.fullName = null;
    $p.typeFunctions = null;
    $p.types = null;
    $p.typesByName = null;
    $p.typesByNameUpper = null;
    $p.$ctor = function(fullName, types) {
        System.Object.prototype.$ctor.call(this);
        this.typesByName = (System.Collections.Generic.Dictionary$2$(String, Function)).prototype.$ctor.$new();
        this.typesByNameUpper = (System.Collections.Generic.Dictionary$2$(String, Function)).prototype.$ctor.$new();
        this.fullName = fullName;
        this.typeFunctions = new Array(types.length);
        for (var i = 0; i < types.length; i++) {
            this.typeFunctions[i] = types[i];
            this.typesByName.set_Item(this.typeFunctions[i].$typeName, this.typeFunctions[i]);
            this.typesByNameUpper.set_Item(this.typeFunctions[i].$typeName.toUpperCase(), this.typeFunctions[i]);
        }
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(fullName, types) {
        return new $p.$ctor.$type(this, fullName, types);
    };
    $p.get_CodeBase = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_FullName = function() {
        return this.fullName;
    };
    $p.get_EntryPoint = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_Location = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.CreateQualifiedName = function(assemblyName, typeName) {
        return typeName + ", " + assemblyName;
    };
    $t.GetAssembly = function(type) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetExecutingAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetCallingAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetEntryAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetName = function() {
        return this.GetName$1(false);
    };
    $p.GetName$1 = function(copiedName) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetType$1 = function(name) {
        return this.GetType$3(name, false, false);
    };
    $p.GetType$2 = function(name, throwOnError) {
        return this.GetType$3(name, throwOnError, false);
    };
    $p.GetType$3 = function(name, throwOnError, ignoreCase) {
        var result;
        if (ignoreCase)
            (function() {
                var $anon$1 = {
                    value: null
                };
                var $result$ = this.typesByNameUpper.TryGetValue(name, $anon$1);
                result = $anon$1.value;
                return $result$;
            }).call(this);
        else
            (function() {
                var $anon$2 = {
                    value: null
                };
                var $result$ = this.typesByName.TryGetValue(name, $anon$2);
                result = $anon$2.value;
                return $result$;
            }).call(this);
        if (result == null && throwOnError)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Type not found: " + name).InternalInit(new Error());
        if (result != null)
            return System.Type._GetTypeFromTypeFunc(result);
        return null;
    };
    $p.GetTypes = function() {
        if (this.types == null) {
            this.types = System.Linq.Enumerable.ToArray(System.Type, System.Linq.Enumerable.Select(
                Function, 
                System.Type, 
                this.typeFunctions, 
                $delegate(this, (System.Func$2$(Function, System.Type)), function(x) {
                    return System.Type._GetTypeFromTypeFunc(x);
                })
            ));
        }
        return this.types;
    };
    $p.GetCustomAttributes = function(inherit) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
    $p.CreateInstance = function(typeName) {
        return this.CreateInstance$2(
            typeName, 
            false, 
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public, 
            null, 
            null, 
            null, 
            null
        );
    };
    $p.CreateInstance$1 = function(typeName, ignoreCase) {
        return this.CreateInstance$2(
            typeName, 
            ignoreCase, 
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public, 
            null, 
            null, 
            null, 
            null
        );
    };
    $p.CreateInstance$2 = function(typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes) {
        var type = this.GetType$3(typeName, false, ignoreCase);
        if (type == null)
            return null;
        else
            return System.Reflection.Activator.CreateInstance$5(
                type, 
                bindingAttr, 
                binder, 
                args, 
                culture, 
                activationAttributes
            );
    };
    $p.GetReferencedAssemblies = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.ToString = function() {
        return this.get_FullName() || System.Object.prototype.ToString.call(this);
    };
}).call(null, System.Reflection.Assembly, System.Reflection.Assembly.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.Assembly);
System.Reflection.AssemblyName = $define("System.Reflection.AssemblyName");
System.Reflection.AssemblyName.prototype = new System.Object();
(System.Reflection.AssemblyName.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.AssemblyName;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.AssemblyName";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyName", []);this.$type.Init("System.Reflection.AssemblyName", System.Reflection.AssemblyName, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("_CultureInfo", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("_CodeBase", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.AssemblyName.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Reflection.AssemblyName.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureInfo", System.Reflection.AssemblyName.prototype.get_CultureInfo, [], System.Globalization.CultureInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CultureInfo", System.Reflection.AssemblyName.prototype.set_CultureInfo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CultureInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureName", System.Reflection.AssemblyName.prototype.get_CultureName, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.AssemblyName.prototype.get_CodeBase, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CodeBase", System.Reflection.AssemblyName.prototype.set_CodeBase, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.AssemblyName.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.AssemblyName.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyName.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Reflection.AssemblyName.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("assemblyName", String, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.AssemblyName.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Reflection.AssemblyName.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CultureInfo", System.Globalization.CultureInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureInfo", System.Reflection.AssemblyName.prototype.get_CultureInfo, [], System.Globalization.CultureInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CultureInfo", System.Reflection.AssemblyName.prototype.set_CultureInfo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CultureInfo, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CultureName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureName", System.Reflection.AssemblyName.prototype.get_CultureName, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CodeBase", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.AssemblyName.prototype.get_CodeBase, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CodeBase", System.Reflection.AssemblyName.prototype.set_CodeBase, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.AssemblyName.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p._CultureInfo = null;
    $p._CodeBase = null;
    $p.$Name$k__BackingField = null;
    $p.get_Name = function() {
        return this.$Name$k__BackingField;
    };
    $p.set_Name = function(value) {
        this.$Name$k__BackingField = value;
    };
    $p.get_CultureInfo = function() {
        return this._CultureInfo;
    };
    $p.set_CultureInfo = function(value) {
        this._CultureInfo = value;
    };
    $p.get_CultureName = function() {
        if (this._CultureInfo != null)
            return this._CultureInfo.get_Name();
        else
            return null;
    };
    $p.get_CodeBase = function() {
        return this._CodeBase;
    };
    $p.set_CodeBase = function(value) {
        this._CodeBase = value;
    };
    $p.get_FullName = function() {
        return this.get_Name();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(assemblyName) {
        System.Object.prototype.$ctor.call(this);
        this.set_Name(assemblyName);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(assemblyName) {
        return new $p.$ctor$1.$type(this, assemblyName);
    };
    $p.ToString = function() {
        return this.get_FullName() || System.Object.prototype.ToString.call(this);
    };
}).call(null, System.Reflection.AssemblyName, System.Reflection.AssemblyName.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyName);
System.Reflection.Binder = $define("System.Reflection.Binder");
System.Reflection.Binder.prototype = new System.Object();
(System.Reflection.Binder.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.Binder;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.Binder";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Binder", []);this.$type.Init("System.Reflection.Binder", System.Reflection.Binder, System.Object, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.Binder.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Reflection.Binder, System.Reflection.Binder.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.Binder);
System.Reflection.BindingFlags = $define("System.Reflection.BindingFlags");
System.Reflection.BindingFlags.prototype = new System.Enum();
(System.Reflection.BindingFlags.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.BindingFlags;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.BindingFlags";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BindingFlags", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.BindingFlags", System.Reflection.BindingFlags, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreCase", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("DeclaredOnly", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Instance", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NonPublic", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FlattenHierarchy", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("InvokeMethod", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 256, []), System.Reflection.FieldInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 512, []), System.Reflection.FieldInfo.prototype.$ctor.$new("GetField", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1024, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SetField", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2048, []), System.Reflection.FieldInfo.prototype.$ctor.$new("GetProperty", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SetProperty", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PutDispProperty", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16384, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PutRefDispProperty", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32768, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ExactBinding", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 65536, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SuppressChangeType", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 131072, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OptionalParamBinding", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 262144, []), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreReturn", System.Reflection.BindingFlags, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16777216, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.BindingFlags.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Default = 0;
        $t.Default$ = $p.$ctor.$new("Default", System.Reflection.BindingFlags().Default);
        $t.IgnoreCase = 1;
        $t.IgnoreCase$ = $p.$ctor.$new("IgnoreCase", System.Reflection.BindingFlags().IgnoreCase);
        $t.DeclaredOnly = 2;
        $t.DeclaredOnly$ = $p.$ctor.$new("DeclaredOnly", System.Reflection.BindingFlags().DeclaredOnly);
        $t.Instance = 4;
        $t.Instance$ = $p.$ctor.$new("Instance", System.Reflection.BindingFlags().Instance);
        $t.Static = 8;
        $t.Static$ = $p.$ctor.$new("Static", System.Reflection.BindingFlags().Static);
        $t.Public = 16;
        $t.Public$ = $p.$ctor.$new("Public", System.Reflection.BindingFlags().Public);
        $t.NonPublic = 32;
        $t.NonPublic$ = $p.$ctor.$new("NonPublic", System.Reflection.BindingFlags().NonPublic);
        $t.FlattenHierarchy = 64;
        $t.FlattenHierarchy$ = $p.$ctor.$new("FlattenHierarchy", System.Reflection.BindingFlags().FlattenHierarchy);
        $t.InvokeMethod = 256;
        $t.InvokeMethod$ = $p.$ctor.$new("InvokeMethod", System.Reflection.BindingFlags().InvokeMethod);
        $t.CreateInstance = 512;
        $t.CreateInstance$ = $p.$ctor.$new("CreateInstance", System.Reflection.BindingFlags().CreateInstance);
        $t.GetField = 1024;
        $t.GetField$ = $p.$ctor.$new("GetField", System.Reflection.BindingFlags().GetField);
        $t.SetField = 2048;
        $t.SetField$ = $p.$ctor.$new("SetField", System.Reflection.BindingFlags().SetField);
        $t.GetProperty = 4096;
        $t.GetProperty$ = $p.$ctor.$new("GetProperty", System.Reflection.BindingFlags().GetProperty);
        $t.SetProperty = 8192;
        $t.SetProperty$ = $p.$ctor.$new("SetProperty", System.Reflection.BindingFlags().SetProperty);
        $t.PutDispProperty = 16384;
        $t.PutDispProperty$ = $p.$ctor.$new("PutDispProperty", System.Reflection.BindingFlags().PutDispProperty);
        $t.PutRefDispProperty = 32768;
        $t.PutRefDispProperty$ = $p.$ctor.$new("PutRefDispProperty", System.Reflection.BindingFlags().PutRefDispProperty);
        $t.ExactBinding = 65536;
        $t.ExactBinding$ = $p.$ctor.$new("ExactBinding", System.Reflection.BindingFlags().ExactBinding);
        $t.SuppressChangeType = 131072;
        $t.SuppressChangeType$ = $p.$ctor.$new("SuppressChangeType", System.Reflection.BindingFlags().SuppressChangeType);
        $t.OptionalParamBinding = 262144;
        $t.OptionalParamBinding$ = $p.$ctor.$new("OptionalParamBinding", System.Reflection.BindingFlags().OptionalParamBinding);
        $t.IgnoreReturn = 16777216;
        $t.IgnoreReturn$ = $p.$ctor.$new("IgnoreReturn", System.Reflection.BindingFlags().IgnoreReturn);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.BindingFlags, System.Reflection.BindingFlags.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.BindingFlags);
System.Reflection.CallingConventions = $define("System.Reflection.CallingConventions");
System.Reflection.CallingConventions.prototype = new System.Enum();
(System.Reflection.CallingConventions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.CallingConventions;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.CallingConventions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CallingConventions", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.CallingConventions", System.Reflection.CallingConventions, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Standard", System.Reflection.CallingConventions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("VarArgs", System.Reflection.CallingConventions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Any", System.Reflection.CallingConventions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasThis", System.Reflection.CallingConventions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ExplicitThis", System.Reflection.CallingConventions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.CallingConventions.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Standard = 1;
        $t.Standard$ = $p.$ctor.$new("Standard", System.Reflection.CallingConventions().Standard);
        $t.VarArgs = 2;
        $t.VarArgs$ = $p.$ctor.$new("VarArgs", System.Reflection.CallingConventions().VarArgs);
        $t.Any = System.Reflection.CallingConventions().VarArgs | System.Reflection.CallingConventions().Standard;
        $t.Any$ = $p.$ctor.$new("Any", System.Reflection.CallingConventions().Any);
        $t.HasThis = 32;
        $t.HasThis$ = $p.$ctor.$new("HasThis", System.Reflection.CallingConventions().HasThis);
        $t.ExplicitThis = 64;
        $t.ExplicitThis$ = $p.$ctor.$new("ExplicitThis", System.Reflection.CallingConventions().ExplicitThis);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.CallingConventions, System.Reflection.CallingConventions.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.CallingConventions);
System.Reflection.ConstructorInfo = $define("System.Reflection.ConstructorInfo");
System.Reflection.ConstructorInfo.prototype = new System.Reflection.MethodBase();
(System.Reflection.ConstructorInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.ConstructorInfo;
    $t.$baseType = System.Reflection.MethodBase;
    $p.$typeName = "System.Reflection.ConstructorInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConstructorInfo", []);this.$type.Init("System.Reflection.ConstructorInfo", System.Reflection.ConstructorInfo, System.Reflection.MethodBase, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("ConstructorName", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeConstructorName", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Reflection.ConstructorInfo.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.ConstructorInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$3", System.Reflection.ConstructorInfo.prototype.Invoke$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 3, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$1", System.Reflection.ConstructorInfo.prototype.Invoke$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$2", System.Reflection.ConstructorInfo.prototype.Invoke$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ConstructorInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("jsConstructor", Function, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 4, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.ConstructorInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Reflection.ConstructorInfo.ConstructorName = ".ctor";
        System.Reflection.ConstructorInfo.TypeConstructorName = ".cctor";
    };
    $p.jsConstructor = null;
    $p.ConstructorName = null;
    $p.TypeConstructorName = null;
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Constructor;
    };
    $p.$ctor = function(name, jsConstructor, parameters, methodAttributes, attributes) {
        System.Reflection.MethodBase.prototype.$ctor.call(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
        this.jsConstructor = jsConstructor;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, jsConstructor, parameters, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            jsConstructor, 
            parameters, 
            methodAttributes, 
            attributes
        );
    };
    $p.Invoke$3 = function(invokeAttr, binder, parameters, culture) {
        return this.jsConstructor.$new(parameters);
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {
        return this.Invoke$3(
            invokeAttr, 
            binder, 
            parameters, 
            culture
        );
    };
    $p.Invoke$2 = function(parameters) {
        return this.Invoke$3(
            System.Reflection.BindingFlags().Default, 
            null, 
            parameters, 
            null
        );
    };
}).call(null, System.Reflection.ConstructorInfo, System.Reflection.ConstructorInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ConstructorInfo);
System.Reflection.EventInfo = $define("System.Reflection.EventInfo");
System.Reflection.EventInfo.prototype = new System.Reflection.MemberInfo();
(System.Reflection.EventInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.EventInfo;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.EventInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("EventInfo", []);this.$type.Init("System.Reflection.EventInfo", System.Reflection.EventInfo, System.Reflection.MemberInfo, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("eventType", System.Type, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("removeMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.EventInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Reflection.EventInfo.prototype.get_AddMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_RemoveMethod", System.Reflection.EventInfo.prototype.get_RemoveMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_EventHandlerType", System.Reflection.EventInfo.prototype.get_EventHandlerType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAddMethod$1", System.Reflection.EventInfo.prototype.GetAddMethod$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRemoveMethod$1", System.Reflection.EventInfo.prototype.GetRemoveMethod$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAddMethod", System.Reflection.EventInfo.prototype.GetAddMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRemoveMethod", System.Reflection.EventInfo.prototype.GetRemoveMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("AddEventHandler", System.Reflection.EventInfo.prototype.AddEventHandler, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("handler", System.Delegate, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveEventHandler", System.Reflection.EventInfo.prototype.RemoveEventHandler, [System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("handler", System.Delegate, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.EventInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("eventType", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("removeMethod", System.Reflection.MethodInfo, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 4, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.EventInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("AddMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Reflection.EventInfo.prototype.get_AddMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("RemoveMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_RemoveMethod", System.Reflection.EventInfo.prototype.get_RemoveMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("EventHandlerType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_EventHandlerType", System.Reflection.EventInfo.prototype.get_EventHandlerType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.eventType = null;
    $p.addMethod = null;
    $p.removeMethod = null;
    $p.$ctor = function(name, eventType, addMethod, removeMethod, attributes) {
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.eventType = eventType;
        this.addMethod = addMethod;
        this.removeMethod = removeMethod;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, eventType, addMethod, removeMethod, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            eventType, 
            addMethod, 
            removeMethod, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Event;
    };
    $p.get_AddMethod = function() {
        return this.addMethod;
    };
    $p.get_RemoveMethod = function() {
        return this.removeMethod;
    };
    $p.get_EventHandlerType = function() {
        return this.eventType;
    };
    $p.GetAddMethod$1 = function(nonPublic) {
        return this.addMethod.get_IsPublic() || nonPublic ? this.addMethod : null;
    };
    $p.GetRemoveMethod$1 = function(nonPublic) {
        return this.removeMethod.get_IsPublic() || nonPublic ? this.removeMethod : null;
    };
    $p.GetAddMethod = function() {
        return this.GetAddMethod$1(false);
    };
    $p.GetRemoveMethod = function() {
        return this.GetRemoveMethod$1(false);
    };
    $p.AddEventHandler = function(target, handler) {
        var addMethod = this.GetAddMethod();
        if (addMethod == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("InvalidOperation_NoPublicAddMethod").InternalInit(new Error());
        addMethod.Invoke(target, System.Object.$$InitializeArray([handler], System.Delegate));
    };
    $p.RemoveEventHandler = function(target, handler) {
        var removeMethod = this.GetRemoveMethod();
        if (removeMethod == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("InvalidOperation_NoPublicRemoveMethod").InternalInit(new Error());
        removeMethod.Invoke(target, System.Object.$$InitializeArray([handler], System.Delegate));
    };
}).call(null, System.Reflection.EventInfo, System.Reflection.EventInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.EventInfo);
System.Reflection.FieldAttributes = $define("System.Reflection.FieldAttributes");
System.Reflection.FieldAttributes.prototype = new System.Enum();
(System.Reflection.FieldAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.FieldAttributes;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.FieldAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldAttributes", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.FieldAttributes", System.Reflection.FieldAttributes, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("FieldAccessMask", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 7, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PrivateScope", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Private", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FamANDAssem", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Family", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FamORAssem", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 5, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 6, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("InitOnly", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Literal", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NotSerialized", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 128, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 512, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PinvokeImpl", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 38144, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1024, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldMarshal", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32768, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldRVA", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 256, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.FieldAttributes.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.FieldAccessMask = 7;
        $t.FieldAccessMask$ = $p.$ctor.$new("FieldAccessMask", System.Reflection.FieldAttributes().FieldAccessMask);
        $t.PrivateScope = 0;
        $t.PrivateScope$ = $p.$ctor.$new("PrivateScope", System.Reflection.FieldAttributes().PrivateScope);
        $t.Private = 1;
        $t.Private$ = $p.$ctor.$new("Private", System.Reflection.FieldAttributes().Private);
        $t.FamANDAssem = 2;
        $t.FamANDAssem$ = $p.$ctor.$new("FamANDAssem", System.Reflection.FieldAttributes().FamANDAssem);
        $t.Assembly = System.Reflection.FieldAttributes().FamANDAssem | System.Reflection.FieldAttributes().Private;
        $t.Assembly$ = $p.$ctor.$new("Assembly", System.Reflection.FieldAttributes().Assembly);
        $t.Family = 4;
        $t.Family$ = $p.$ctor.$new("Family", System.Reflection.FieldAttributes().Family);
        $t.FamORAssem = System.Reflection.FieldAttributes().Family | System.Reflection.FieldAttributes().Private;
        $t.FamORAssem$ = $p.$ctor.$new("FamORAssem", System.Reflection.FieldAttributes().FamORAssem);
        $t.Public = System.Reflection.FieldAttributes().Family | System.Reflection.FieldAttributes().FamANDAssem;
        $t.Public$ = $p.$ctor.$new("Public", System.Reflection.FieldAttributes().Public);
        $t.Static = 16;
        $t.Static$ = $p.$ctor.$new("Static", System.Reflection.FieldAttributes().Static);
        $t.InitOnly = 32;
        $t.InitOnly$ = $p.$ctor.$new("InitOnly", System.Reflection.FieldAttributes().InitOnly);
        $t.Literal = 64;
        $t.Literal$ = $p.$ctor.$new("Literal", System.Reflection.FieldAttributes().Literal);
        $t.NotSerialized = 128;
        $t.NotSerialized$ = $p.$ctor.$new("NotSerialized", System.Reflection.FieldAttributes().NotSerialized);
        $t.SpecialName = 512;
        $t.SpecialName$ = $p.$ctor.$new("SpecialName", System.Reflection.FieldAttributes().SpecialName);
        $t.PinvokeImpl = 8192;
        $t.PinvokeImpl$ = $p.$ctor.$new("PinvokeImpl", System.Reflection.FieldAttributes().PinvokeImpl);
        $t.ReservedMask = 38144;
        $t.ReservedMask$ = $p.$ctor.$new("ReservedMask", System.Reflection.FieldAttributes().ReservedMask);
        $t.RTSpecialName = 1024;
        $t.RTSpecialName$ = $p.$ctor.$new("RTSpecialName", System.Reflection.FieldAttributes().RTSpecialName);
        $t.HasFieldMarshal = 4096;
        $t.HasFieldMarshal$ = $p.$ctor.$new("HasFieldMarshal", System.Reflection.FieldAttributes().HasFieldMarshal);
        $t.HasDefault = 32768;
        $t.HasDefault$ = $p.$ctor.$new("HasDefault", System.Reflection.FieldAttributes().HasDefault);
        $t.HasFieldRVA = 256;
        $t.HasFieldRVA$ = $p.$ctor.$new("HasFieldRVA", System.Reflection.FieldAttributes().HasFieldRVA);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.FieldAttributes, System.Reflection.FieldAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.FieldAttributes);
System.Reflection.FieldInfo = $define("System.Reflection.FieldInfo");
System.Reflection.FieldInfo.prototype = new System.Reflection.MemberInfo();
(System.Reflection.FieldInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.FieldInfo;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.FieldInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldInfo", []);this.$type.Init("System.Reflection.FieldInfo", System.Reflection.FieldInfo, System.Reflection.MemberInfo, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("fieldAttributes", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("constantValue", System.Object, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.FieldInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FieldType", System.Reflection.FieldInfo.prototype.get_FieldType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.FieldInfo.prototype.get_Attributes, [], System.Reflection.FieldAttributes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.FieldInfo.prototype.get_IsPublic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.FieldInfo.prototype.get_IsPrivate, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.FieldInfo.prototype.get_IsFamily, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.FieldInfo.prototype.get_IsAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyAndAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyOrAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.FieldInfo.prototype.get_IsStatic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInitOnly", System.Reflection.FieldInfo.prototype.get_IsInitOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiteral", System.Reflection.FieldInfo.prototype.get_IsLiteral, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNotSerialized", System.Reflection.FieldInfo.prototype.get_IsNotSerialized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.FieldInfo.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPinvokeImpl", System.Reflection.FieldInfo.prototype.get_IsPinvokeImpl, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFieldFromHandle", System.Reflection.FieldInfo.prototype.GetFieldFromHandle, [System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeFieldHandle, 0, 0, null, [])], System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFieldFromHandle$1", System.Reflection.FieldInfo.prototype.GetFieldFromHandle$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeFieldHandle, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("declaringType", System.RuntimeTypeHandle, 1, 0, null, [])], System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRequiredCustomModifiers", System.Reflection.FieldInfo.prototype.GetRequiredCustomModifiers, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetOptionalCustomModifiers", System.Reflection.FieldInfo.prototype.GetOptionalCustomModifiers, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.FieldInfo.prototype.GetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue$1", System.Reflection.FieldInfo.prototype.SetValue$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRawConstantValue", System.Reflection.FieldInfo.prototype.GetRawConstantValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.FieldInfo.prototype.SetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.FieldInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldType", Function, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldAttributes", System.Reflection.FieldAttributes, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("constantValue", System.Object, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 4, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.FieldInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("FieldType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FieldType", System.Reflection.FieldInfo.prototype.get_FieldType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.FieldAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.FieldInfo.prototype.get_Attributes, [], System.Reflection.FieldAttributes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.FieldInfo.prototype.get_IsPublic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPrivate", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.FieldInfo.prototype.get_IsPrivate, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamily", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.FieldInfo.prototype.get_IsFamily, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.FieldInfo.prototype.get_IsAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyAndAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyAndAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyOrAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyOrAssembly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsStatic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.FieldInfo.prototype.get_IsStatic, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsInitOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInitOnly", System.Reflection.FieldInfo.prototype.get_IsInitOnly, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLiteral", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiteral", System.Reflection.FieldInfo.prototype.get_IsLiteral, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsNotSerialized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNotSerialized", System.Reflection.FieldInfo.prototype.get_IsNotSerialized, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.FieldInfo.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPinvokeImpl", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPinvokeImpl", System.Reflection.FieldInfo.prototype.get_IsPinvokeImpl, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.fieldType = null;
    $p.fieldAttributes = null;
    $p.constantValue = null;
    $p.$ctor = function(name, fieldType, fieldAttributes, constantValue, attributes) {
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.fieldType = fieldType;
        this.fieldAttributes = fieldAttributes;
        this.constantValue = constantValue;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, fieldType, fieldAttributes, constantValue, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            fieldType, 
            fieldAttributes, 
            constantValue, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Field;
    };
    $p.get_FieldType = function() {
        return System.Type._GetTypeFromTypeFunc(this.fieldType);
    };
    $p.get_Attributes = function() {
        return this.fieldAttributes;
    };
    $p.get_IsPublic = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().Public;
    };
    $p.get_IsPrivate = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().Private;
    };
    $p.get_IsFamily = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().Family;
    };
    $p.get_IsAssembly = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().Assembly;
    };
    $p.get_IsFamilyAndAssembly = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().FamANDAssem;
    };
    $p.get_IsFamilyOrAssembly = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().FieldAccessMask) == System.Reflection.FieldAttributes().FamORAssem;
    };
    $p.get_IsStatic = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().Static) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $p.get_IsInitOnly = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().InitOnly) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $p.get_IsLiteral = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().Literal) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $p.get_IsNotSerialized = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().NotSerialized) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $p.get_IsSpecialName = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().SpecialName) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $p.get_IsPinvokeImpl = function() {
        return (this.get_Attributes() & System.Reflection.FieldAttributes().PinvokeImpl) != System.Reflection.FieldAttributes().PrivateScope;
    };
    $t.GetFieldFromHandle = function(handle) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetFieldFromHandle$1 = function(handle, declaringType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetRequiredCustomModifiers = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetOptionalCustomModifiers = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetValue = function(obj) {
        if (this.get_IsStatic())
            return this.get_DeclaringType().thisType[this.get_Name()];
        else
            return obj[this.get_Name()];
    };
    $p.SetValue$1 = function(obj, value, invokeAttr, binder, culture) {
        if (this.get_IsStatic())
            this.get_DeclaringType().thisType[this.get_Name()] = value;
        else
            obj[this.get_Name()] = value;
    };
    $p.GetRawConstantValue = function() {
        return this.constantValue;
    };
    $p.SetValue = function(obj, value) {
        this.SetValue$1(
            obj, 
            value, 
            System.Reflection.BindingFlags().Default, 
            System.Type().DefaultBinder, 
            null
        );
    };
}).call(null, System.Reflection.FieldInfo, System.Reflection.FieldInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.FieldInfo);
System.Reflection.ICustomAttributeProvider = $define("System.Reflection.ICustomAttributeProvider");
System.Reflection.ICustomAttributeProvider.prototype = new System.Object();
(System.Reflection.ICustomAttributeProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.ICustomAttributeProvider;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.ICustomAttributeProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICustomAttributeProvider", []);this.$type.Init("System.Reflection.ICustomAttributeProvider", System.Reflection.ICustomAttributeProvider, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Reflection$ICustomAttributeProvider$GetCustomAttributes", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$GetCustomAttributes, [System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Reflection$ICustomAttributeProvider$IsDefined", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$IsDefined, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = function(attributeType, inherit) {
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = function(inherit) {
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = function(attributeType, inherit) {
    };
}).call(null, System.Reflection.ICustomAttributeProvider, System.Reflection.ICustomAttributeProvider.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ICustomAttributeProvider);
System.Reflection.MemberTypes = $define("System.Reflection.MemberTypes");
System.Reflection.MemberTypes.prototype = new System.Enum();
(System.Reflection.MemberTypes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.MemberTypes;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.MemberTypes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberTypes", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.MemberTypes", System.Reflection.MemberTypes, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Constructor", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Event", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Field", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Method", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Property", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInfo", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Custom", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedType", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 128, []), System.Reflection.FieldInfo.prototype.$ctor.$new("All", System.Reflection.MemberTypes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 191, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MemberTypes.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Constructor = 1;
        $t.Constructor$ = $p.$ctor.$new("Constructor", System.Reflection.MemberTypes().Constructor);
        $t.Event = 2;
        $t.Event$ = $p.$ctor.$new("Event", System.Reflection.MemberTypes().Event);
        $t.Field = 4;
        $t.Field$ = $p.$ctor.$new("Field", System.Reflection.MemberTypes().Field);
        $t.Method = 8;
        $t.Method$ = $p.$ctor.$new("Method", System.Reflection.MemberTypes().Method);
        $t.Property = 16;
        $t.Property$ = $p.$ctor.$new("Property", System.Reflection.MemberTypes().Property);
        $t.TypeInfo = 32;
        $t.TypeInfo$ = $p.$ctor.$new("TypeInfo", System.Reflection.MemberTypes().TypeInfo);
        $t.Custom = 64;
        $t.Custom$ = $p.$ctor.$new("Custom", System.Reflection.MemberTypes().Custom);
        $t.NestedType = 128;
        $t.NestedType$ = $p.$ctor.$new("NestedType", System.Reflection.MemberTypes().NestedType);
        $t.All = System.Reflection.MemberTypes().NestedType | System.Reflection.MemberTypes().TypeInfo | System.Reflection.MemberTypes().Property | System.Reflection.MemberTypes().Method | System.Reflection.MemberTypes().Field | System.Reflection.MemberTypes().Event | System.Reflection.MemberTypes().Constructor;
        $t.All$ = $p.$ctor.$new("All", System.Reflection.MemberTypes().All);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.MemberTypes, System.Reflection.MemberTypes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MemberTypes);
System.Reflection.MethodAttributes = $define("System.Reflection.MethodAttributes");
System.Reflection.MethodAttributes.prototype = new System.Enum();
(System.Reflection.MethodAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.MethodAttributes;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.MethodAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodAttributes", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.MethodAttributes", System.Reflection.MethodAttributes, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("MemberAccessMask", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 7, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PrivateScope", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Private", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FamANDAssem", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Family", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FamORAssem", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 5, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 6, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Final", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Virtual", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 64, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HideBySig", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 128, []), System.Reflection.FieldInfo.prototype.$ctor.$new("CheckAccessOnOverride", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 512, []), System.Reflection.FieldInfo.prototype.$ctor.$new("VtableLayoutMask", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 256, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Abstract", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1024, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2048, []), System.Reflection.FieldInfo.prototype.$ctor.$new("PinvokeImpl", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("UnmanagedExport", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 53248, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasSecurity", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16384, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RequireSecObject", System.Reflection.MethodAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32768, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodAttributes.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.MemberAccessMask = 7;
        $t.MemberAccessMask$ = $p.$ctor.$new("MemberAccessMask", System.Reflection.MethodAttributes().MemberAccessMask);
        $t.PrivateScope = 0;
        $t.PrivateScope$ = $p.$ctor.$new("PrivateScope", System.Reflection.MethodAttributes().PrivateScope);
        $t.Private = 1;
        $t.Private$ = $p.$ctor.$new("Private", System.Reflection.MethodAttributes().Private);
        $t.FamANDAssem = 2;
        $t.FamANDAssem$ = $p.$ctor.$new("FamANDAssem", System.Reflection.MethodAttributes().FamANDAssem);
        $t.Assembly = System.Reflection.MethodAttributes().FamANDAssem | System.Reflection.MethodAttributes().Private;
        $t.Assembly$ = $p.$ctor.$new("Assembly", System.Reflection.MethodAttributes().Assembly);
        $t.Family = 4;
        $t.Family$ = $p.$ctor.$new("Family", System.Reflection.MethodAttributes().Family);
        $t.FamORAssem = System.Reflection.MethodAttributes().Family | System.Reflection.MethodAttributes().Private;
        $t.FamORAssem$ = $p.$ctor.$new("FamORAssem", System.Reflection.MethodAttributes().FamORAssem);
        $t.Public = System.Reflection.MethodAttributes().Family | System.Reflection.MethodAttributes().FamANDAssem;
        $t.Public$ = $p.$ctor.$new("Public", System.Reflection.MethodAttributes().Public);
        $t.Static = 16;
        $t.Static$ = $p.$ctor.$new("Static", System.Reflection.MethodAttributes().Static);
        $t.Final = 32;
        $t.Final$ = $p.$ctor.$new("Final", System.Reflection.MethodAttributes().Final);
        $t.Virtual = 64;
        $t.Virtual$ = $p.$ctor.$new("Virtual", System.Reflection.MethodAttributes().Virtual);
        $t.HideBySig = 128;
        $t.HideBySig$ = $p.$ctor.$new("HideBySig", System.Reflection.MethodAttributes().HideBySig);
        $t.CheckAccessOnOverride = 512;
        $t.CheckAccessOnOverride$ = $p.$ctor.$new("CheckAccessOnOverride", System.Reflection.MethodAttributes().CheckAccessOnOverride);
        $t.VtableLayoutMask = 256;
        $t.VtableLayoutMask$ = $p.$ctor.$new("VtableLayoutMask", System.Reflection.MethodAttributes().VtableLayoutMask);
        $t.Abstract = 1024;
        $t.Abstract$ = $p.$ctor.$new("Abstract", System.Reflection.MethodAttributes().Abstract);
        $t.SpecialName = 2048;
        $t.SpecialName$ = $p.$ctor.$new("SpecialName", System.Reflection.MethodAttributes().SpecialName);
        $t.PinvokeImpl = 8192;
        $t.PinvokeImpl$ = $p.$ctor.$new("PinvokeImpl", System.Reflection.MethodAttributes().PinvokeImpl);
        $t.UnmanagedExport = 8;
        $t.UnmanagedExport$ = $p.$ctor.$new("UnmanagedExport", System.Reflection.MethodAttributes().UnmanagedExport);
        $t.RTSpecialName = 4096;
        $t.RTSpecialName$ = $p.$ctor.$new("RTSpecialName", System.Reflection.MethodAttributes().RTSpecialName);
        $t.ReservedMask = 53248;
        $t.ReservedMask$ = $p.$ctor.$new("ReservedMask", System.Reflection.MethodAttributes().ReservedMask);
        $t.HasSecurity = 16384;
        $t.HasSecurity$ = $p.$ctor.$new("HasSecurity", System.Reflection.MethodAttributes().HasSecurity);
        $t.RequireSecObject = 32768;
        $t.RequireSecObject$ = $p.$ctor.$new("RequireSecObject", System.Reflection.MethodAttributes().RequireSecObject);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.MethodAttributes, System.Reflection.MethodAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodAttributes);
System.Reflection.MethodInfo = $define("System.Reflection.MethodInfo");
System.Reflection.MethodInfo.prototype = new System.Reflection.MethodBase();
(System.Reflection.MethodInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.MethodInfo;
    $t.$baseType = System.Reflection.MethodBase;
    $p.$typeName = "System.Reflection.MethodInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodInfo", []);this.$type.Init("System.Reflection.MethodInfo", System.Reflection.MethodInfo, System.Reflection.MethodBase, [System.Reflection.ICustomAttributeProvider], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MethodInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnType", System.Reflection.MethodInfo.prototype.get_ReturnType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnTypeCustomAttributes", System.Reflection.MethodInfo.prototype.get_ReturnTypeCustomAttributes, [], System.Reflection.ICustomAttributeProvider, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetBaseDefinition", System.Reflection.MethodInfo.prototype.GetBaseDefinition, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericArguments", System.Reflection.MethodInfo.prototype.GetGenericArguments, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericMethodDefinition", System.Reflection.MethodInfo.prototype.GetGenericMethodDefinition, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeGenericMethod", System.Reflection.MethodInfo.prototype.MakeGenericMethod, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeArguments", System.Object.$$MakeArrayType(System.Type), 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateDelegate", System.Reflection.MethodInfo.prototype.CreateDelegate, [System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateDelegate$1", System.Reflection.MethodInfo.prototype.CreateDelegate$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 1, 0, null, [])], System.Delegate, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke$1", System.Reflection.MethodInfo.prototype.Invoke$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("jsMethod", Function, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", Function, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 5, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MethodInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("ReturnType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnType", System.Reflection.MethodInfo.prototype.get_ReturnType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("ReturnTypeCustomAttributes", System.Reflection.ICustomAttributeProvider, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnTypeCustomAttributes", System.Reflection.MethodInfo.prototype.get_ReturnTypeCustomAttributes, [], System.Reflection.ICustomAttributeProvider, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.jsMethod = null;
    $p.returnType = null;
    $p.$ctor = function(name, jsMethod, parameters, returnType, methodAttributes, attributes) {
        System.Reflection.MethodBase.prototype.$ctor.call(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
        this.jsMethod = jsMethod;
        this.returnType = returnType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, jsMethod, parameters, returnType, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            jsMethod, 
            parameters, 
            returnType, 
            methodAttributes, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Method;
    };
    $p.get_ReturnType = function() {
        return System.Type._GetTypeFromTypeFunc(this.returnType);
    };
    $p.get_ReturnTypeCustomAttributes = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetBaseDefinition = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetGenericArguments = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetGenericMethodDefinition = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.MakeGenericMethod = function(typeArguments) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.CreateDelegate = function(delegateType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.CreateDelegate$1 = function(delegateType, target) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {
        if (this.get_IsStatic() && obj != null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Static methods cannot have a target").InternalInit(new Error());
        if (!this.get_IsStatic() && obj == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Instance methods must have a target").InternalInit(new Error());
        return this.jsMethod.apply(obj, parameters);
    };
}).call(null, System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodInfo);
System.Reflection.ParameterAttributes = $define("System.Reflection.ParameterAttributes");
System.Reflection.ParameterAttributes.prototype = new System.Enum();
(System.Reflection.ParameterAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.ParameterAttributes;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.ParameterAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterAttributes", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.ParameterAttributes", System.Reflection.ParameterAttributes, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("In", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Out", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Lcid", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Retval", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Optional", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 61440, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldMarshal", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved3", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16384, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved4", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32768, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterAttributes.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.None = 0;
        $t.None$ = $p.$ctor.$new("None", System.Reflection.ParameterAttributes().None);
        $t.In = 1;
        $t.In$ = $p.$ctor.$new("In", System.Reflection.ParameterAttributes().In);
        $t.Out = 2;
        $t.Out$ = $p.$ctor.$new("Out", System.Reflection.ParameterAttributes().Out);
        $t.Lcid = 4;
        $t.Lcid$ = $p.$ctor.$new("Lcid", System.Reflection.ParameterAttributes().Lcid);
        $t.Retval = 8;
        $t.Retval$ = $p.$ctor.$new("Retval", System.Reflection.ParameterAttributes().Retval);
        $t.Optional = 16;
        $t.Optional$ = $p.$ctor.$new("Optional", System.Reflection.ParameterAttributes().Optional);
        $t.ReservedMask = 61440;
        $t.ReservedMask$ = $p.$ctor.$new("ReservedMask", System.Reflection.ParameterAttributes().ReservedMask);
        $t.HasDefault = 4096;
        $t.HasDefault$ = $p.$ctor.$new("HasDefault", System.Reflection.ParameterAttributes().HasDefault);
        $t.HasFieldMarshal = 8192;
        $t.HasFieldMarshal$ = $p.$ctor.$new("HasFieldMarshal", System.Reflection.ParameterAttributes().HasFieldMarshal);
        $t.Reserved3 = 16384;
        $t.Reserved3$ = $p.$ctor.$new("Reserved3", System.Reflection.ParameterAttributes().Reserved3);
        $t.Reserved4 = 32768;
        $t.Reserved4$ = $p.$ctor.$new("Reserved4", System.Reflection.ParameterAttributes().Reserved4);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.ParameterAttributes, System.Reflection.ParameterAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterAttributes);
System.Reflection.ParameterInfo = $define("System.Reflection.ParameterInfo");
System.Reflection.ParameterInfo.prototype = new System.Object();
(System.Reflection.ParameterInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.ParameterInfo;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.ParameterInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterInfo", []);this.$type.Init("System.Reflection.ParameterInfo", System.Reflection.ParameterInfo, System.Object, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("position", System.Int32, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("parameterAttributes", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("defaultValue", System.Object, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("containingMember", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Assembly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Reflection.ParameterInfo.prototype.get_ParameterType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.ParameterInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasDefaultValue", System.Reflection.ParameterInfo.prototype.get_HasDefaultValue, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DefaultValue", System.Reflection.ParameterInfo.prototype.get_DefaultValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_RawDefaultValue", System.Reflection.ParameterInfo.prototype.get_RawDefaultValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Position", System.Reflection.ParameterInfo.prototype.get_Position, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.ParameterInfo.prototype.get_Attributes, [], System.Reflection.ParameterAttributes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Reflection.ParameterInfo.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsIn", System.Reflection.ParameterInfo.prototype.get_IsIn, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOut", System.Reflection.ParameterInfo.prototype.get_IsOut, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLcid", System.Reflection.ParameterInfo.prototype.get_IsLcid, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsRetval", System.Reflection.ParameterInfo.prototype.get_IsRetval, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOptional", System.Reflection.ParameterInfo.prototype.get_IsOptional, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.ParameterInfo.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.ParameterInfo.prototype.GetCustomAttributes, [System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes$1", System.Reflection.ParameterInfo.prototype.GetCustomAttributes$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Object.$$MakeArrayType(System.Object), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.ParameterInfo.prototype.IsDefined, [System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", Function, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("position", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterAttributes", System.Reflection.ParameterAttributes, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Object, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 5, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("ParameterType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Reflection.ParameterInfo.prototype.get_ParameterType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.ParameterInfo.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("HasDefaultValue", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasDefaultValue", System.Reflection.ParameterInfo.prototype.get_HasDefaultValue, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("DefaultValue", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DefaultValue", System.Reflection.ParameterInfo.prototype.get_DefaultValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("RawDefaultValue", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_RawDefaultValue", System.Reflection.ParameterInfo.prototype.get_RawDefaultValue, [], System.Object, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Position", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Position", System.Reflection.ParameterInfo.prototype.get_Position, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.ParameterAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.ParameterInfo.prototype.get_Attributes, [], System.Reflection.ParameterAttributes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Reflection.ParameterInfo.prototype.get_Member, [], System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsIn", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsIn", System.Reflection.ParameterInfo.prototype.get_IsIn, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsOut", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOut", System.Reflection.ParameterInfo.prototype.get_IsOut, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLcid", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLcid", System.Reflection.ParameterInfo.prototype.get_IsLcid, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsRetval", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsRetval", System.Reflection.ParameterInfo.prototype.get_IsRetval, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsOptional", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOptional", System.Reflection.ParameterInfo.prototype.get_IsOptional, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.name = null;
    $p.type = null;
    $p.position = null;
    $p.parameterAttributes = null;
    $p.defaultValue = null;
    $p.containingMember = null;
    $p.attributes = null;
    $p.$ctor = function(name, type, position, parameterAttributes, defaultValue, attributes) {
        System.Object.prototype.$ctor.call(this);
        this.name = name;
        this.type = type;
        this.position = position;
        this.parameterAttributes = parameterAttributes;
        this.defaultValue = defaultValue;
        this.attributes = attributes;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, type, position, parameterAttributes, defaultValue, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            type, 
            position, 
            parameterAttributes, 
            defaultValue, 
            attributes
        );
    };
    $p.get_ParameterType = function() {
        return System.Type._GetTypeFromTypeFunc(this.type);
    };
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_HasDefaultValue = function() {
        return this.get_IsOptional();
    };
    $p.get_DefaultValue = function() {
        return this.defaultValue;
    };
    $p.get_RawDefaultValue = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().HasDefault) != System.Reflection.ParameterAttributes().None;
    };
    $p.get_Position = function() {
        return this.position;
    };
    $p.get_Attributes = function() {
        return this.parameterAttributes;
    };
    $p.get_Member = function() {
        return this.containingMember;
    };
    $p.get_IsIn = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().In) != System.Reflection.ParameterAttributes().None;
    };
    $p.get_IsOut = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().Out) != System.Reflection.ParameterAttributes().None;
    };
    $p.get_IsLcid = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().Lcid) != System.Reflection.ParameterAttributes().None;
    };
    $p.get_IsRetval = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().Retval) != System.Reflection.ParameterAttributes().None;
    };
    $p.get_IsOptional = function() {
        return (this.get_Attributes() & System.Reflection.ParameterAttributes().Optional) != System.Reflection.ParameterAttributes().None;
    };
    $p.ToString = function() {
        return this.get_ParameterType() + " " + this.get_Name();
    };
    $p.GetCustomAttributes = function(inherit) {
        return System.Linq.Enumerable.ToArray(System.Attribute, this.attributes);
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Where(System.Object, this.GetCustomAttributes(inherit), (function(attributeType$closed) {
            return $delegate(this, (System.Func$2$(System.Object, System.Boolean)), function(x) {
                return attributeType$closed.IsInstanceOfType(x);
            });
        }).call(this, attributeType)));
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        return System.Linq.Enumerable.Any$1(System.Object, this.GetCustomAttributes(inherit), (function(attributeType$closed) {
            return $delegate(this, (System.Func$2$(System.Object, System.Boolean)), function(x) {
                return attributeType$closed.IsInstanceOfType(x);
            });
        }).call(this, attributeType));
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
}).call(null, System.Reflection.ParameterInfo, System.Reflection.ParameterInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterInfo);
System.Reflection.ParameterModifier = $define("System.Reflection.ParameterModifier");
System.Reflection.ParameterModifier.prototype = new System.ValueType();
(System.Reflection.ParameterModifier.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.ParameterModifier;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Reflection.ParameterModifier";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterModifier", []);this.$type.Init("System.Reflection.ParameterModifier", System.Reflection.ParameterModifier, System.ValueType, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("_byRef", System.Object.$$MakeArrayType(System.Boolean), System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsByRefArray", System.Reflection.ParameterModifier.prototype.get_IsByRefArray, [], System.Object.$$MakeArrayType(System.Boolean), System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Reflection.ParameterModifier.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Reflection.ParameterModifier.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterModifier.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, []), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Reflection.ParameterModifier.prototype.$ctor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterCount", System.Int32, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("IsByRefArray", System.Object.$$MakeArrayType(System.Boolean), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsByRefArray", System.Reflection.ParameterModifier.prototype.get_IsByRefArray, [], System.Object.$$MakeArrayType(System.Boolean), System.Reflection.MethodAttributes().Assembly, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Reflection.ParameterModifier.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Reflection.ParameterModifier.prototype.set_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], [])], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p._byRef = null;
    $p.get_IsByRefArray = function() {
        return this._byRef;
    };
    $p.get_Item = function(index) {
        return this._byRef[index];
    };
    $p.set_Item = function(index, value) {
        this._byRef[index] = value;
    };
    $p.$ctor$1 = function(parameterCount) {
        System.ValueType.prototype.$ctor.call(this);
        if (parameterCount <= 0)
            throw System.ArgumentException.prototype.$ctor$1.$new("Arg_ParmArraySize").InternalInit(new Error());
        this._byRef = new Array(parameterCount);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(parameterCount) {
        return new $p.$ctor$1.$type(this, parameterCount);
    };
}).call(null, System.Reflection.ParameterModifier, System.Reflection.ParameterModifier.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterModifier);
System.Reflection.PropertyAttributes = $define("System.Reflection.PropertyAttributes");
System.Reflection.PropertyAttributes.prototype = new System.Enum();
(System.Reflection.PropertyAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.PropertyAttributes;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.PropertyAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyAttributes", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.Reflection.PropertyAttributes", System.Reflection.PropertyAttributes, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 512, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 62464, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1024, []), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4096, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved2", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 8192, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved3", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 16384, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved4", System.Reflection.PropertyAttributes, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 32768, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.PropertyAttributes.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.None = 0;
        $t.None$ = $p.$ctor.$new("None", System.Reflection.PropertyAttributes().None);
        $t.SpecialName = 512;
        $t.SpecialName$ = $p.$ctor.$new("SpecialName", System.Reflection.PropertyAttributes().SpecialName);
        $t.ReservedMask = 62464;
        $t.ReservedMask$ = $p.$ctor.$new("ReservedMask", System.Reflection.PropertyAttributes().ReservedMask);
        $t.RTSpecialName = 1024;
        $t.RTSpecialName$ = $p.$ctor.$new("RTSpecialName", System.Reflection.PropertyAttributes().RTSpecialName);
        $t.HasDefault = 4096;
        $t.HasDefault$ = $p.$ctor.$new("HasDefault", System.Reflection.PropertyAttributes().HasDefault);
        $t.Reserved2 = 8192;
        $t.Reserved2$ = $p.$ctor.$new("Reserved2", System.Reflection.PropertyAttributes().Reserved2);
        $t.Reserved3 = 16384;
        $t.Reserved3$ = $p.$ctor.$new("Reserved3", System.Reflection.PropertyAttributes().Reserved3);
        $t.Reserved4 = 32768;
        $t.Reserved4$ = $p.$ctor.$new("Reserved4", System.Reflection.PropertyAttributes().Reserved4);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.PropertyAttributes, System.Reflection.PropertyAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.PropertyAttributes);
System.Reflection.PropertyInfo = $define("System.Reflection.PropertyInfo");
System.Reflection.PropertyInfo.prototype = new System.Reflection.MemberInfo();
(System.Reflection.PropertyInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Reflection.PropertyInfo;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.PropertyInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyInfo", []);this.$type.Init("System.Reflection.PropertyInfo", System.Reflection.PropertyInfo, System.Reflection.MemberInfo, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("propertyType", System.Type, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("getMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("setMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("indexParameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.PropertyInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_PropertyType", System.Reflection.PropertyInfo.prototype.get_PropertyType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.PropertyInfo.prototype.get_Attributes, [], System.Reflection.PropertyAttributes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanRead", System.Reflection.PropertyInfo.prototype.get_CanRead, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanWrite", System.Reflection.PropertyInfo.prototype.get_CanWrite, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_GetMethod", System.Reflection.PropertyInfo.prototype.get_GetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SetMethod", System.Reflection.PropertyInfo.prototype.get_SetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.PropertyInfo.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue$2", System.Reflection.PropertyInfo.prototype.SetValue$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Object.$$MakeArrayType(System.Object), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 5, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAccessors$1", System.Reflection.PropertyInfo.prototype.GetAccessors$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGetMethod$1", System.Reflection.PropertyInfo.prototype.GetGetMethod$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetSetMethod$1", System.Reflection.PropertyInfo.prototype.GetSetMethod$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetIndexParameters", System.Reflection.PropertyInfo.prototype.GetIndexParameters, [], System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.PropertyInfo.prototype.GetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue$1", System.Reflection.PropertyInfo.prototype.GetValue$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Object.$$MakeArrayType(System.Object), 1, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue$2", System.Reflection.PropertyInfo.prototype.GetValue$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Object.$$MakeArrayType(System.Object), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, [])], System.Object, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.PropertyInfo.prototype.SetValue, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue$1", System.Reflection.PropertyInfo.prototype.SetValue$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Object.$$MakeArrayType(System.Object), 2, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRequiredCustomModifiers", System.Reflection.PropertyInfo.prototype.GetRequiredCustomModifiers, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetOptionalCustomModifiers", System.Reflection.PropertyInfo.prototype.GetOptionalCustomModifiers, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAccessors", System.Reflection.PropertyInfo.prototype.GetAccessors, [], System.Object.$$MakeArrayType(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGetMethod", System.Reflection.PropertyInfo.prototype.GetGetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetSetMethod", System.Reflection.PropertyInfo.prototype.GetSetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.PropertyInfo.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyType", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("getMethod", System.Reflection.MethodInfo, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("setMethod", System.Reflection.MethodInfo, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexParameters", System.Object.$$MakeArrayType(System.Reflection.ParameterInfo), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 5, 0, null, [])], System.Reflection.MethodAttributes().Family, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.PropertyInfo.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("PropertyType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_PropertyType", System.Reflection.PropertyInfo.prototype.get_PropertyType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.PropertyAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.PropertyInfo.prototype.get_Attributes, [], System.Reflection.PropertyAttributes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CanRead", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanRead", System.Reflection.PropertyInfo.prototype.get_CanRead, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("CanWrite", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanWrite", System.Reflection.PropertyInfo.prototype.get_CanWrite, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("GetMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_GetMethod", System.Reflection.PropertyInfo.prototype.get_GetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("SetMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SetMethod", System.Reflection.PropertyInfo.prototype.get_SetMethod, [], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.PropertyInfo.prototype.get_IsSpecialName, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.propertyType = null;
    $p.getMethod = null;
    $p.setMethod = null;
    $p.indexParameters = null;
    $p.$ctor = function(name, propertyType, getMethod, setMethod, indexParameters, attributes) {
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.propertyType = propertyType;
        this.getMethod = getMethod;
        this.setMethod = setMethod;
        this.indexParameters = indexParameters;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, propertyType, getMethod, setMethod, indexParameters, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            propertyType, 
            getMethod, 
            setMethod, 
            indexParameters, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Property;
    };
    $p.get_PropertyType = function() {
        return this.propertyType;
    };
    $p.get_Attributes = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_CanRead = function() {
        return this.getMethod != null;
    };
    $p.get_CanWrite = function() {
        return this.setMethod != null;
    };
    $p.get_GetMethod = function() {
        return this.GetGetMethod$1(true);
    };
    $p.get_SetMethod = function() {
        return this.GetSetMethod$1(true);
    };
    $p.get_IsSpecialName = function() {
        return (this.get_Attributes() & System.Reflection.PropertyAttributes().SpecialName) != System.Reflection.PropertyAttributes().None;
    };
    $p.SetValue$2 = function(obj, value, invokeAttr, binder, index, culture) {
        var args = new Array(1 + (index != null ? index.length : 0));
        args[0] = value;
        for (var i = 1; i < args.length; i++) {
            args[i] = index[i - 1];
        }
        this.get_SetMethod().Invoke$1(
            obj, 
            invokeAttr, 
            binder, 
            args, 
            culture
        );
    };
    $p.GetAccessors$1 = function(nonPublic) {
        var methods = (System.Collections.Generic.List$1$(System.Reflection.MethodInfo)).prototype.$ctor.$new();
        if (this.getMethod != null)
            methods.Add(this.getMethod);
        if (this.setMethod != null)
            methods.Add(this.setMethod);
        return System.Linq.Enumerable.ToArray(System.Reflection.MethodInfo, methods);
    };
    $p.GetGetMethod$1 = function(nonPublic) {
        if (nonPublic)
            return this.getMethod;
        else
            return this.getMethod.get_IsPublic() ? this.getMethod : null;
    };
    $p.GetSetMethod$1 = function(nonPublic) {
        if (nonPublic)
            return this.setMethod;
        else
            return this.setMethod.get_IsPublic() ? this.setMethod : null;
    };
    $p.GetIndexParameters = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.ParameterInfo, this.indexParameters);
    };
    $p.GetValue = function(obj) {
        return this.GetValue$1(obj, null);
    };
    $p.GetValue$1 = function(obj, index) {
        return this.GetValue$2(
            obj, 
            System.Reflection.BindingFlags().Default, 
            null, 
            index, 
            null
        );
    };
    $p.GetValue$2 = function(obj, invokeAttr, binder, index, culture) {
        return this.get_GetMethod().Invoke$1(
            obj, 
            invokeAttr, 
            binder, 
            index, 
            culture
        );
    };
    $p.SetValue = function(obj, value) {
        this.SetValue$1(obj, value, null);
    };
    $p.SetValue$1 = function(obj, value, index) {
        this.SetValue$2(
            obj, 
            value, 
            System.Reflection.BindingFlags().Default, 
            null, 
            index, 
            null
        );
    };
    $p.GetRequiredCustomModifiers = function() {
        return new Array(0);
    };
    $p.GetOptionalCustomModifiers = function() {
        return new Array(0);
    };
    $p.GetAccessors = function() {
        return this.GetAccessors$1(false);
    };
    $p.GetGetMethod = function() {
        return this.GetGetMethod$1(false);
    };
    $p.GetSetMethod = function() {
        return this.GetSetMethod$1(false);
    };
}).call(null, System.Reflection.PropertyInfo, System.Reflection.PropertyInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.PropertyInfo);
System.RuntimeMethodHandle = $define("System.RuntimeMethodHandle");
System.RuntimeMethodHandle.prototype = new System.ValueType();
(System.RuntimeMethodHandle.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.RuntimeMethodHandle;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.RuntimeMethodHandle";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("RuntimeMethodHandle", []);this.$type.Init("System.RuntimeMethodHandle", System.RuntimeMethodHandle, System.ValueType, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.RuntimeMethodHandle.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.RuntimeMethodHandle, System.RuntimeMethodHandle.prototype);
$mscorlib$AssemblyTypes.push(System.RuntimeMethodHandle);
System.Runtime.CompilerServices.DynamicAttribute = $define("System.Runtime.CompilerServices.DynamicAttribute");
System.Runtime.CompilerServices.DynamicAttribute.prototype = new System.Attribute();
(System.Runtime.CompilerServices.DynamicAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Runtime.CompilerServices.DynamicAttribute;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.CompilerServices.DynamicAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DynamicAttribute", [System.AttributeUsageAttribute.prototype.$ctor.$new(10636)]);this.$type.Init("System.Runtime.CompilerServices.DynamicAttribute", System.Runtime.CompilerServices.DynamicAttribute, System.Attribute, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.CompilerServices.DynamicAttribute.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.CompilerServices.DynamicAttribute, System.Runtime.CompilerServices.DynamicAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.CompilerServices.DynamicAttribute);
System.Runtime.InteropServices.CallingConvention = $define("System.Runtime.InteropServices.CallingConvention");
System.Runtime.InteropServices.CallingConvention.prototype = new System.Enum();
(System.Runtime.InteropServices.CallingConvention.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Runtime.InteropServices.CallingConvention;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Runtime.InteropServices.CallingConvention";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CallingConvention", []);this.$type.Init("System.Runtime.InteropServices.CallingConvention", System.Runtime.InteropServices.CallingConvention, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Winapi", System.Runtime.InteropServices.CallingConvention, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Cdecl", System.Runtime.InteropServices.CallingConvention, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("StdCall", System.Runtime.InteropServices.CallingConvention, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("ThisCall", System.Runtime.InteropServices.CallingConvention, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("FastCall", System.Runtime.InteropServices.CallingConvention, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 5, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.InteropServices.CallingConvention.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.Winapi = 1;
        $t.Winapi$ = $p.$ctor.$new("Winapi", System.Runtime.InteropServices.CallingConvention().Winapi);
        $t.Cdecl = 2;
        $t.Cdecl$ = $p.$ctor.$new("Cdecl", System.Runtime.InteropServices.CallingConvention().Cdecl);
        $t.StdCall = 3;
        $t.StdCall$ = $p.$ctor.$new("StdCall", System.Runtime.InteropServices.CallingConvention().StdCall);
        $t.ThisCall = 4;
        $t.ThisCall$ = $p.$ctor.$new("ThisCall", System.Runtime.InteropServices.CallingConvention().ThisCall);
        $t.FastCall = 5;
        $t.FastCall$ = $p.$ctor.$new("FastCall", System.Runtime.InteropServices.CallingConvention().FastCall);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CallingConvention.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.InteropServices.CallingConvention);
System.IntPtr = $define("System.IntPtr");
System.IntPtr.prototype = new System.ValueType();
(System.IntPtr.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.IntPtr;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.IntPtr";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IntPtr", []);this.$type.Init("System.IntPtr", System.IntPtr, System.ValueType, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.IntPtr.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.IntPtr, System.IntPtr.prototype);
$mscorlib$AssemblyTypes.push(System.IntPtr);
(Number.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = Number;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Number";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Number", [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("Number");$obj$.set_BuiltIn(true);return $obj$;}).call(this)]);this.$type.Init("Number", Number, System.Object, [System.IComparable], [System.Reflection.FieldInfo.prototype.$ctor.$new("MAX_VALUE", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("MIN_VALUE", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NaN", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("NEGATIVE_INFINITY", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("POSITIVE_INFINITY", System.Int32, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", Number.prototype.GetType, [], System.Type, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", Number.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsFinite", Number.prototype.IsFinite, [System.Reflection.ParameterInfo.prototype.$ctor.$new("n", Number, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsNaN", Number.prototype.IsNaN, [System.Reflection.ParameterInfo.prototype.$ctor.$new("n", Number, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", Number.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", Number.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseDouble", Number.prototype.ParseDouble, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Double, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseFloat", Number.prototype.ParseFloat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Single, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt$1", Number.prototype.ParseInt$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("f", System.Single, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt", Number.prototype.ParseInt, [System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt$2", Number.prototype.ParseInt$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt$3", Number.prototype.ParseInt$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", Number.prototype.ToExponential, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential$1", Number.prototype.ToExponential$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", Number.prototype.ToFixed, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed$1", Number.prototype.ToFixed$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", Number.prototype.ToPrecision, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision$1", Number.prototype.ToPrecision$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("precision", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", Number.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", Number.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", Number.prototype.CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetStringHashCode", Number.prototype.GetStringHashCode, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", Number.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", Number.prototype.$ctor, [], System.Reflection.MethodAttributes().Family, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        Number.MAX_VALUE = 0;
        Number.MIN_VALUE = 0;
        Number.NaN = 0;
        Number.NEGATIVE_INFINITY = 0;
        Number.POSITIVE_INFINITY = 0;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type();
    };
    $p.MAX_VALUE = null;
    $p.MIN_VALUE = null;
    $p.NaN = null;
    $p.NEGATIVE_INFINITY = null;
    $p.POSITIVE_INFINITY = null;
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $t.IsFinite = function(n) {
        return false;
    };
    $t.IsNaN = function(n) {
        return false;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $t.Parse = function(s) {
        return null;
    };
    $t.ParseDouble = function(s) {
        return 0;
    };
    $t.ParseFloat = function(s) {
        return 0;
    };
    $t.ParseInt$1 = function(f) {
        return 0;
    };
    $t.ParseInt = function(d) {
        return 0;
    };
    $t.ParseInt$2 = function(s) {
        return 0;
    };
    $t.ParseInt$3 = function(s, radix) {
        return 0;
    };
    $p.ToExponential = function() {
        return null;
    };
    $p.ToExponential$1 = function(fractionDigits) {
        return null;
    };
    $p.ToFixed = function() {
        return null;
    };
    $p.ToFixed$1 = function(fractionDigits) {
        return null;
    };
    $p.ToPrecision = function() {
        return null;
    };
    $p.ToPrecision$1 = function(precision) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $p.ToString = function() {
        return this;
    };
    $p.CompareTo = function(obj) {
        return (this - obj);
    };
    $p.System$IComparable$CompareTo = $p.CompareTo;
    $p.GetStringHashCode = function() {
        return System.Object.prototype.GetStringHashCode.call(this);
    };
    $p.Equals = function(obj) {
        return System.Object.prototype.Equals.call(this, obj);
    };
}).call(null, Number, Number.prototype);
$mscorlib$AssemblyTypes.push(Number);
System.RuntimeTypeHandle = $define("System.RuntimeTypeHandle");
System.RuntimeTypeHandle.prototype = new System.ValueType();
(System.RuntimeTypeHandle.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.RuntimeTypeHandle;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.RuntimeTypeHandle";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("RuntimeTypeHandle", []);this.$type.Init("System.RuntimeTypeHandle", System.RuntimeTypeHandle, System.ValueType, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.RuntimeTypeHandle.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.RuntimeTypeHandle, System.RuntimeTypeHandle.prototype);
$mscorlib$AssemblyTypes.push(System.RuntimeTypeHandle);
System.Runtime.WootzJs.JsArguments = $define("System.Runtime.WootzJs.JsArguments");
System.Runtime.WootzJs.JsArguments.prototype = new System.Object();
(System.Runtime.WootzJs.JsArguments.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Runtime.WootzJs.JsArguments;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.JsArguments";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("JsArguments", []);this.$type.Init("System.Runtime.WootzJs.JsArguments", System.Runtime.WootzJs.JsArguments, System.Object, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.JsArguments.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.WootzJs.JsArguments, System.Runtime.WootzJs.JsArguments.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.JsArguments);
System.Runtime.WootzJs.JsAttribute = $define("System.Runtime.WootzJs.JsAttribute");
System.Runtime.WootzJs.JsAttribute.prototype = new System.Attribute();
(System.Runtime.WootzJs.JsAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Runtime.WootzJs.JsAttribute;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.WootzJs.JsAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("JsAttribute", [System.AttributeUsageAttribute.prototype.$ctor.$new(2556)]);this.$type.Init("System.Runtime.WootzJs.JsAttribute", System.Runtime.WootzJs.JsAttribute, System.Attribute, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("$Export$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Extension$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$Native$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$BuiltIn$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Export", System.Runtime.WootzJs.JsAttribute.prototype.get_Export, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Export", System.Runtime.WootzJs.JsAttribute.prototype.set_Export, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Runtime.WootzJs.JsAttribute.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Runtime.WootzJs.JsAttribute.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Extension", System.Runtime.WootzJs.JsAttribute.prototype.get_Extension, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Extension", System.Runtime.WootzJs.JsAttribute.prototype.set_Extension, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Native", System.Runtime.WootzJs.JsAttribute.prototype.get_Native, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Native", System.Runtime.WootzJs.JsAttribute.prototype.set_Native, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.get_BuiltIn, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.set_BuiltIn, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.JsAttribute.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Export", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Export", System.Runtime.WootzJs.JsAttribute.prototype.get_Export, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Export", System.Runtime.WootzJs.JsAttribute.prototype.set_Export, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Runtime.WootzJs.JsAttribute.prototype.get_Name, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Runtime.WootzJs.JsAttribute.prototype.set_Name, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Extension", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Extension", System.Runtime.WootzJs.JsAttribute.prototype.get_Extension, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Extension", System.Runtime.WootzJs.JsAttribute.prototype.set_Extension, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Native", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Native", System.Runtime.WootzJs.JsAttribute.prototype.get_Native, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Native", System.Runtime.WootzJs.JsAttribute.prototype.set_Native, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("BuiltIn", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.get_BuiltIn, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.set_BuiltIn, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$Export$k__BackingField = null;
    $p.get_Export = function() {
        return this.$Export$k__BackingField;
    };
    $p.set_Export = function(value) {
        this.$Export$k__BackingField = value;
    };
    $p.$Name$k__BackingField = null;
    $p.get_Name = function() {
        return this.$Name$k__BackingField;
    };
    $p.set_Name = function(value) {
        this.$Name$k__BackingField = value;
    };
    $p.$Extension$k__BackingField = null;
    $p.get_Extension = function() {
        return this.$Extension$k__BackingField;
    };
    $p.set_Extension = function(value) {
        this.$Extension$k__BackingField = value;
    };
    $p.$Native$k__BackingField = null;
    $p.get_Native = function() {
        return this.$Native$k__BackingField;
    };
    $p.set_Native = function(value) {
        this.$Native$k__BackingField = value;
    };
    $p.$BuiltIn$k__BackingField = null;
    $p.get_BuiltIn = function() {
        return this.$BuiltIn$k__BackingField;
    };
    $p.set_BuiltIn = function(value) {
        this.$BuiltIn$k__BackingField = value;
    };
    $p.$ctor = function() {
        System.Attribute.prototype.$ctor.call(this);
        this.set_Export(true);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.WootzJs.JsAttribute, System.Runtime.WootzJs.JsAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.JsAttribute);
System.Runtime.WootzJs.SpecialNames = $define("System.Runtime.WootzJs.SpecialNames");
System.Runtime.WootzJs.SpecialNames.prototype = new System.Object();
(System.Runtime.WootzJs.SpecialNames.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Runtime.WootzJs.SpecialNames;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.SpecialNames";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("SpecialNames", []);this.$type.Init("System.Runtime.WootzJs.SpecialNames", System.Runtime.WootzJs.SpecialNames, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializerTypeFunction", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$t", []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializerPrototype", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$p", []), System.Reflection.FieldInfo.prototype.$ctor.$new("GetTypeFromType", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$GetType", []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeField", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$type", []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeName", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$typeName", []), System.Reflection.FieldInfo.prototype.$ctor.$new("ClassTypeArguments", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$typeParameters", []), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializer", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$TypeInitializer", []), System.Reflection.FieldInfo.prototype.$ctor.$new("StaticInitializer", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$StaticInitializer", []), System.Reflection.FieldInfo.prototype.$ctor.$new("IsStaticInitialized", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$isStaticInitialized", []), System.Reflection.FieldInfo.prototype.$ctor.$new("MakeGenericType", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$", []), System.Reflection.FieldInfo.prototype.$ctor.$new("MakeGenericTypeConstructor", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$$MakeGenericType", []), System.Reflection.FieldInfo.prototype.$ctor.$new("BaseType", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$baseType", []), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayType", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$arrayType", []), System.Reflection.FieldInfo.prototype.$ctor.$new("CreateType", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$CreateType", []), System.Reflection.FieldInfo.prototype.$ctor.$new("GetAssembly", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, "$GetAssembly", [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.SpecialNames.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Runtime.WootzJs.SpecialNames.TypeInitializerTypeFunction = "$t";
        System.Runtime.WootzJs.SpecialNames.TypeInitializerPrototype = "$p";
        System.Runtime.WootzJs.SpecialNames.GetTypeFromType = "$GetType";
        System.Runtime.WootzJs.SpecialNames.TypeField = "$type";
        System.Runtime.WootzJs.SpecialNames.TypeName = "$typeName";
        System.Runtime.WootzJs.SpecialNames.ClassTypeArguments = "$typeParameters";
        System.Runtime.WootzJs.SpecialNames.TypeInitializer = "$TypeInitializer";
        System.Runtime.WootzJs.SpecialNames.StaticInitializer = "$StaticInitializer";
        System.Runtime.WootzJs.SpecialNames.IsStaticInitialized = "$isStaticInitialized";
        System.Runtime.WootzJs.SpecialNames.MakeGenericType = "$";
        System.Runtime.WootzJs.SpecialNames.MakeGenericTypeConstructor = "$$MakeGenericType";
        System.Runtime.WootzJs.SpecialNames.BaseType = "$baseType";
        System.Runtime.WootzJs.SpecialNames.ArrayType = "$arrayType";
        System.Runtime.WootzJs.SpecialNames.CreateType = "$CreateType";
        System.Runtime.WootzJs.SpecialNames.GetAssembly = "$GetAssembly";
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.TypeInitializerTypeFunction = null;
    $p.TypeInitializerPrototype = null;
    $p.GetTypeFromType = null;
    $p.TypeField = null;
    $p.TypeName = null;
    $p.ClassTypeArguments = null;
    $p.TypeInitializer = null;
    $p.StaticInitializer = null;
    $p.IsStaticInitialized = null;
    $p.MakeGenericType = null;
    $p.MakeGenericTypeConstructor = null;
    $p.BaseType = null;
    $p.ArrayType = null;
    $p.CreateType = null;
    $p.GetAssembly = null;
}).call(null, System.Runtime.WootzJs.SpecialNames, System.Runtime.WootzJs.SpecialNames.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.SpecialNames);
System.SByte = $define("sbyte");
System.SByte.prototype = new System.ValueType();
(System.SByte.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.SByte;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.SByte";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("SByte", []);this.$type.Init("System.SByte", System.SByte, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.SByte.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.SByte.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.SByte.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.SByte.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.SByte, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.SByte.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.SByte, System.SByte.prototype);
$mscorlib$AssemblyTypes.push(System.SByte);
System.Single = $define("float");
System.Single.prototype = new System.ValueType();
(System.Single.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Single;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Single";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Single", []);this.$type.Init("System.Single", System.Single, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Single.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Single.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Single.prototype.Parse, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Single, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", System.Single.prototype.ToExponential, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential$1", System.Single.prototype.ToExponential$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", System.Single.prototype.ToFixed, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed$1", System.Single.prototype.ToFixed$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", System.Single.prototype.ToPrecision, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision$1", System.Single.prototype.ToPrecision$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("precision", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Single.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Single, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Single.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $t.Parse = function(s) {
        return 0;
    };
    $p.ToExponential = function() {
        return null;
    };
    $p.ToExponential$1 = function(fractionDigits) {
        return null;
    };
    $p.ToFixed = function() {
        return null;
    };
    $p.ToFixed$1 = function(fractionDigits) {
        return null;
    };
    $p.ToPrecision = function() {
        return null;
    };
    $p.ToPrecision$1 = function(precision) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Single, System.Single.prototype);
$mscorlib$AssemblyTypes.push(System.Single);
(String.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = String;
    $t.$baseType = System.Object;
    $p.$typeName = "System.String";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("String", [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("String");$obj$.set_BuiltIn(true);return $obj$;}).call(this)]);this.$type.Init("String", String, System.Object, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", String, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", String.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", String.prototype.GetType, [], System.Type, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Length", String.prototype.get_Length, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("EndsWith", String.prototype.EndsWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("suffix", String, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("StartsWith", String.prototype.StartsWith, [System.Reflection.ParameterInfo.prototype.$ctor.$new("prefix", String, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", String.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Char, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", String.prototype.Compare, [System.Reflection.ParameterInfo.prototype.$ctor.$new("strA", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("strB", String, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Native("\r\nif (strA < strB) return -1;\r\nif (strA > strB) return 1;\r\nreturn 0;\r\n");return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare$1", String.prototype.Compare$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("strA", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("strB", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparisonType", System.StringComparison, 2, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Substring", String.prototype.Substring, [System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 1, System.Reflection.ParameterAttributes().HasDefault, 0, [])], String, System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(System.Char), 0, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split$2", String.prototype.Split$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(System.Char), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split$1", String.prototype.Split$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(System.Char), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 1, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split$4", String.prototype.Split$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(System.Char), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 2, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split$3", String.prototype.Split$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(String), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 1, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Split$5", String.prototype.Split$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", System.Object.$$MakeArrayType(String), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 2, 0, null, [])], System.Object.$$MakeArrayType(String), System.Reflection.MethodAttributes().Public, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Join", String.prototype.Join, [System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object.$$MakeArrayType(String), 1, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)]), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", String.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetStringHashCode", String.prototype.GetStringHashCode, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", String.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", String.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$1", String.prototype.Concat$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$4", String.prototype.Concat$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 1, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$6", String.prototype.Concat$6, [System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", System.Object, 2, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$2", String.prototype.Concat$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Object.$$MakeArrayType(System.Object), 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ConcatArray", String.prototype.ConcatArray, [System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Object.$$MakeArrayType(String), 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("totalLength", System.Int32, 1, 0, null, [])], String, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$9", String.prototype.Concat$9, [System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Collections.Generic.IEnumerable$1, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$5", String.prototype.Concat$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$7", String.prototype.Concat$7, [System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str2", String, 2, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$8", String.prototype.Concat$8, [System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str2", String, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("str3", String, 3, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat$3", String.prototype.Concat$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Object.$$MakeArrayType(String), 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Char, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", String.prototype.get_Item, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], System.Char, System.Reflection.MethodAttributes().Public, []), null, [System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, [])], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        String.Empty = String.Empty;
    };
    $p.Empty = null;
    $p.$ctor = function(s) {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(s) {
        return new $p.$ctor.$type();
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.EndsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) != -1;
    };
    $p.StartsWith = function(prefix) {
        return this.indexOf(prefix) == 0;
    };
    $p.get_Item = function(index) {
        return " ";
    };
    $t.Compare = function(strA, strB) {
        if (strA < strB) return -1;
        if (strA > strB) return 1;
        return 0;
    };
    $t.Compare$1 = function(strA, strB, comparisonType) {
        if ($cast(System.UInt32, comparisonType) > 5)
            throw System.ArgumentException.prototype.$ctor$1.$new("NotSupported_StringComparison").InternalInit(new Error());
        if (strA == strB)
            return 0;
        if (strA == null)
            return -1;
        if (strB == null)
            return 1;
        switch (comparisonType) {
            case System.StringComparison().CurrentCulture:
                return System.Globalization.CultureInfo().CurrentCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().None);
            case System.StringComparison().CurrentCultureIgnoreCase:
                return System.Globalization.CultureInfo().CurrentCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().InvariantCulture:
                return System.Globalization.CultureInfo().InvariantCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().None);
            case System.StringComparison().InvariantCultureIgnoreCase:
                return System.Globalization.CultureInfo().InvariantCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().Ordinal:
                return System.Globalization.CultureInfo().Ordinal.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().OrdinalIgnoreCase:
                return System.Globalization.CultureInfo().OrdinalIgnoreCase.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            default:
                throw System.NotSupportedException.prototype.$ctor$1.$new("NotSupported_StringComparison").InternalInit(new Error());
        }
    };
    $p.Substring = function(startIndex, length) {
        var s = this;
        if (length == 0)
            return s.substring(startIndex);
        else
            return s.substring(startIndex, startIndex + length);
    };
    $p.Split = function(separator) {
        var s = this;
        var stringSeparator = new Array(separator.length);
        for (var i = 0; i < separator.length; i++) {
            stringSeparator[i] = separator[i].ToString();
        }
        var array = s.split(new RegExp(String.Join("|", stringSeparator)));
        return array;
    };
    $p.Split$2 = function(separator, count) {
        var s = this;
        var stringSeparator = new Array(separator.length);
        for (var i = 0; i < separator.length; i++) {
            stringSeparator[i] = separator[i].ToString();
        }
        var array = s.split(new RegExp(String.Join("|", stringSeparator)), count);
        return array;
    };
    $p.Split$1 = function(separator, options) {
        return null;
    };
    $p.Split$4 = function(separator, count, options) {
        return null;
    };
    $p.Split$3 = function(separator, options) {
        return String.prototype.Split$5.call(
            this, 
            separator, 
            System.Int32.MaxValue, 
            options
        );
    };
    $p.Split$5 = function(separator, count, options) {
        return null;
    };
    $t.Join = function(separator, value) {
        var array = value;
        return array.join(separator);
    };
    $p.Equals = function(obj) {
        return this == obj;
    };
    $p.GetStringHashCode = function() {
        return this;
    };
    $p.GetHashCode = function() {
        throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.ToString = function() {
        return this;
    };
    $t.Concat$1 = function(arg0) {
        if (arg0 == null)
            return String.Empty;
        else
            return arg0.ToString();
    };
    $t.Concat$4 = function(arg0, arg1) {
        if (arg0 == null)
            arg0 = String.Empty;
        if (arg1 == null)
            arg1 = String.Empty;
        return arg0.ToString() + arg1;
    };
    $t.Concat$6 = function(arg0, arg1, arg2) {
        if (arg0 == null)
            arg0 = String.Empty;
        if (arg1 == null)
            arg1 = String.Empty;
        if (arg2 == null)
            arg2 = String.Empty;
        return arg0.ToString() + arg1 + arg2;
    };
    $t.Concat$2 = function(args) {
        if (args == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("args").InternalInit(new Error());
        var values = new Array(args.length);
        var totalLength = 0;
        for (var index = 0; index < args.length; ++index) {
            var obj = args[index];
            values[index] = obj == null ? String.Empty : obj.ToString();
            if (values[index] == null)
                values[index] = String.Empty;
            totalLength += values[index].length;
            if (totalLength < 0)
                throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
        }
        return String.ConcatArray(values, totalLength);
    };
    $t.ConcatArray = function(values, totalLength) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                s += item;
            }
        }
        return s;
    };
    $t.Concat$9 = function(T, values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                s += item.ToString();
            }
        }
        return s;
    };
    $t.Concat = function(values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                s += item;
            }
        }
        return s;
    };
    $t.Concat$5 = function(str0, str1) {
        return str0 + str1;
    };
    $t.Concat$7 = function(str0, str1, str2) {
        if (str0 == null && str1 == null && str2 == null)
            return String.Empty;
        if (str0 == null)
            str0 = String.Empty;
        if (str1 == null)
            str1 = String.Empty;
        if (str2 == null)
            str2 = String.Empty;
        return str0 + str1 + str2;
    };
    $t.Concat$8 = function(str0, str1, str2, str3) {
        if (str0 == null && str1 == null && (str2 == null && str3 == null))
            return String.Empty;
        if (str0 == null)
            str0 = String.Empty;
        if (str1 == null)
            str1 = String.Empty;
        if (str2 == null)
            str2 = String.Empty;
        if (str3 == null)
            str3 = String.Empty;
        return str0 + str1 + str2 + str3;
    };
    $t.Concat$3 = function(values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                s += item;
            }
        }
        return s;
    };
}).call(null, String, String.prototype);
$mscorlib$AssemblyTypes.push(String);
System.StringComparison = $define("System.StringComparison");
System.StringComparison.prototype = new System.Enum();
(System.StringComparison.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.StringComparison;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.StringComparison";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringComparison", []);this.$type.Init("System.StringComparison", System.StringComparison, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCulture", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCultureIgnoreCase", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, []), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCulture", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 2, []), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCultureIgnoreCase", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 3, []), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 4, []), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.StringComparison, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 5, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.StringComparison.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.CurrentCulture = 0;
        $t.CurrentCulture$ = $p.$ctor.$new("CurrentCulture", System.StringComparison().CurrentCulture);
        $t.CurrentCultureIgnoreCase = System.StringComparison().CurrentCulture + 1;
        $t.CurrentCultureIgnoreCase$ = $p.$ctor.$new("CurrentCultureIgnoreCase", System.StringComparison().CurrentCultureIgnoreCase);
        $t.InvariantCulture = System.StringComparison().CurrentCultureIgnoreCase + 1;
        $t.InvariantCulture$ = $p.$ctor.$new("InvariantCulture", System.StringComparison().InvariantCulture);
        $t.InvariantCultureIgnoreCase = System.StringComparison().InvariantCulture + 1;
        $t.InvariantCultureIgnoreCase$ = $p.$ctor.$new("InvariantCultureIgnoreCase", System.StringComparison().InvariantCultureIgnoreCase);
        $t.Ordinal = System.StringComparison().InvariantCultureIgnoreCase + 1;
        $t.Ordinal$ = $p.$ctor.$new("Ordinal", System.StringComparison().Ordinal);
        $t.OrdinalIgnoreCase = System.StringComparison().Ordinal + 1;
        $t.OrdinalIgnoreCase$ = $p.$ctor.$new("OrdinalIgnoreCase", System.StringComparison().OrdinalIgnoreCase);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.StringComparison, System.StringComparison.prototype);
$mscorlib$AssemblyTypes.push(System.StringComparison);
System.StringSplitOptions = $define("System.StringSplitOptions");
System.StringSplitOptions.prototype = new System.Enum();
(System.StringSplitOptions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.StringSplitOptions;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.StringSplitOptions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringSplitOptions", [System.FlagsAttribute.prototype.$ctor.$new()]);this.$type.Init("System.StringSplitOptions", System.StringSplitOptions, System.Enum, [], [System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.StringSplitOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 0, []), System.Reflection.FieldInfo.prototype.$ctor.$new("RemoveEmptyEntries", System.StringSplitOptions, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().Literal, 1, [])], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.StringSplitOptions.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
        $t.None = 0;
        $t.None$ = $p.$ctor.$new("None", System.StringSplitOptions().None);
        $t.RemoveEmptyEntries = 1;
        $t.RemoveEmptyEntries$ = $p.$ctor.$new("RemoveEmptyEntries", System.StringSplitOptions().RemoveEmptyEntries);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.StringSplitOptions, System.StringSplitOptions.prototype);
$mscorlib$AssemblyTypes.push(System.StringSplitOptions);
System.Text.StringBuilder = $define("System.Text.StringBuilder");
System.Text.StringBuilder.prototype = new System.Object();
(System.Text.StringBuilder.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Text.StringBuilder;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Text.StringBuilder";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringBuilder", []);this.$type.Init("System.Text.StringBuilder", System.Text.StringBuilder, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append, [System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Append$2", System.Text.StringBuilder.prototype.Append$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Append$1", System.Text.StringBuilder.prototype.Append$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine", System.Text.StringBuilder.prototype.AppendLine, [], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine$1", System.Text.StringBuilder.prototype.AppendLine$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine$2", System.Text.StringBuilder.prototype.AppendLine$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Text.StringBuilder.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Text.StringBuilder.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.chunks = new Array();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.chunks = null;
    $p.Append = function(c) {
        this.chunks.push(c);
    };
    $p.Append$2 = function(s) {
        this.chunks.push(s);
    };
    $p.Append$1 = function(o) {
        if (o != null)
            this.chunks.push(o.ToString());
    };
    $p.AppendLine = function() {
        this.chunks.push("\n");
    };
    $p.AppendLine$1 = function(c) {
        this.chunks.push(c);
        this.chunks.push("\n");
    };
    $p.AppendLine$2 = function(s) {
        this.chunks.push(s);
        this.chunks.push("\n");
    };
    $p.ToString = function() {
        return this.chunks.join("");
    };
}).call(null, System.Text.StringBuilder, System.Text.StringBuilder.prototype);
$mscorlib$AssemblyTypes.push(System.Text.StringBuilder);
System.Tuple = $define("System.Tuple");
System.Tuple.prototype = new System.Object();
(System.Tuple.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple", System.Tuple, System.Object, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, [])], System.Tuple$1, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$1", System.Tuple.prototype.Create$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, [])], System.Tuple$2, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$2", System.Tuple.prototype.Create$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, [])], System.Tuple$3, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$3", System.Tuple.prototype.Create$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, [])], System.Tuple$4, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$4", System.Tuple.prototype.Create$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, [])], System.Tuple$5, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$5", System.Tuple.prototype.Create$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, [])], System.Tuple$6, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$6", System.Tuple.prototype.Create$6, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, [])], System.Tuple$7, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Create$7", System.Tuple.prototype.Create$7, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item8", T8, 7, 0, null, [])], System.Tuple$8, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$1", System.Tuple.prototype.CombineHashCodes$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$2", System.Tuple.prototype.CombineHashCodes$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$3", System.Tuple.prototype.CombineHashCodes$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$4", System.Tuple.prototype.CombineHashCodes$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$5", System.Tuple.prototype.CombineHashCodes$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h7", System.Int32, 6, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes$6", System.Tuple.prototype.CombineHashCodes$6, [System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h7", System.Int32, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("h8", System.Int32, 7, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, [])], [], [], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $t.Create = function(T1, item1) {
        return (System.Tuple$1$(T1)).prototype.$ctor.$new(item1);
    };
    $t.Create$1 = function(T1, T2, item1, item2) {
        return (System.Tuple$2$(T1, T2)).prototype.$ctor.$new(item1, item2);
    };
    $t.Create$2 = function(T1, T2, T3, item1, item2, item3) {
        return (System.Tuple$3$(T1, T2, T3)).prototype.$ctor.$new(item1, item2, item3);
    };
    $t.Create$3 = function(T1, T2, T3, T4, item1, item2, item3, item4) {
        return (System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        )).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4
        );
    };
    $t.Create$4 = function(T1, T2, T3, T4, T5, item1, item2, item3, item4, item5) {
        return (System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        )).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5
        );
    };
    $t.Create$5 = function(T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6) {
        return (System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        )).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6
        );
    };
    $t.Create$6 = function(T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7) {
        return (System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        )).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7
        );
    };
    $t.Create$7 = function(T1, T2, T3, T4, T5, T6, T7, T8, item1, item2, item3, item4, item5, item6, item7, item8) {
        return (System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            (System.Tuple$1$(T8))
        )).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7, 
            (System.Tuple$1$(T8)).prototype.$ctor.$new(item8)
        );
    };
    $t.CombineHashCodes = function(h1, h2) {
        return (h1 << 5) + h1 ^ h2;
    };
    $t.CombineHashCodes$1 = function(h1, h2, h3) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes(h1, h2), h3);
    };
    $t.CombineHashCodes$2 = function(h1, h2, h3, h4) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes(h1, h2), System.Tuple.CombineHashCodes(h3, h4));
    };
    $t.CombineHashCodes$3 = function(h1, h2, h3, h4, h5) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), h5);
    };
    $t.CombineHashCodes$4 = function(h1, h2, h3, h4, h5, h6) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes(h5, h6));
    };
    $t.CombineHashCodes$5 = function(h1, h2, h3, h4, h5, h6, h7) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes$1(h5, h6, h7));
    };
    $t.CombineHashCodes$6 = function(h1, h2, h3, h4, h5, h6, h7, h8) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes$2(
            h5, 
            h6, 
            h7, 
            h8
        ));
    };
}).call(null, System.Tuple, System.Tuple.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple);
System.Tuple$1 = $define("System.Tuple<T1>");
System.Tuple$1.prototype = new System.Object();
(System.Tuple$1.$TypeInitializer = function($t, $p, T1) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$1;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`1", System.Tuple$1, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$1.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$1.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$1.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$1.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$1.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$1.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$1.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$1.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$1.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$1.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$1.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$1.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$1.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$1.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$1$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$1, arguments);
    };
    $p.m_Item1 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_System$ITuple$Size = function() {
        return 1;
    };
    $p.$ctor = function(item1) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1) {
        return new $p.$ctor.$type(this, item1);
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default);
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$1$(T1)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null)
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$1$(T1)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple != null)
            return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
        throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1(this.m_Item1);
        sb.Append$2(")");
        return sb.ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$1, System.Tuple$1.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$1);
System.Tuple$2 = $define("System.Tuple<T1, T2>");
System.Tuple$2.prototype = new System.Object();
(System.Tuple$2.$TypeInitializer = function($t, $p, T1, T2) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$2;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`2", System.Tuple$2, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$2.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$2.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$2.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$2.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$2.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$2.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$2.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$2.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$2.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$2.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$2.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$2.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$2.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$2.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$2.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$2.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$2$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$2, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_System$ITuple$Size = function() {
        return 2;
    };
    $p.$ctor = function(item1, item2) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2) {
        return new $p.$ctor.$type(this, item1, item2);
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$2$(T1, T2)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$2$(T1, T2)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num != 0)
                return num;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$2, System.Tuple$2.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$2);
System.Tuple$3 = $define("System.Tuple<T1, T2, T3>");
System.Tuple$3.prototype = new System.Object();
(System.Tuple$3.$TypeInitializer = function($t, $p, T1, T2, T3) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$3;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`3", System.Tuple$3, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$3.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$3.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$3.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$3.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$3.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$3.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$3.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$3.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$3.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$3.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$3.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$3.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$3.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$3.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$3.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$3.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$3.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$3.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$3$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$3, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_System$ITuple$Size = function() {
        return 3;
    };
    $p.$ctor = function(item1, item2, item3) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$3$(T1, T2, T3)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$3$(T1, T2, T3)).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$3, System.Tuple$3.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$3);
System.Tuple$4 = $define("System.Tuple<T1, T2, T3, T4>");
System.Tuple$4.prototype = new System.Object();
(System.Tuple$4.$TypeInitializer = function($t, $p, T1, T2, T3, T4) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$4;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`4", System.Tuple$4, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$4.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$4.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$4.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$4.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$4.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$4.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$4.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$4.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$4.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$4.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$4.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$4.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$4.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$4.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$4.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$4.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$4.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$4.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$4.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$4.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$4$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$4, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.m_Item4 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_System$ITuple$Size = function() {
        return 4;
    };
    $p.$ctor = function(item1, item2, item3, item4) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$4$(
                T1, 
                T2, 
                T3, 
                T4
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$4$(
                T1, 
                T2, 
                T3, 
                T4
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$2(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item4));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$4, System.Tuple$4.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$4);
System.Tuple$5 = $define("System.Tuple<T1, T2, T3, T4, T5>");
System.Tuple$5.prototype = new System.Object();
(System.Tuple$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$5;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`5", System.Tuple$5, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$5.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$5.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$5.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$5.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$5.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$5.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$5.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$5.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$5.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$5.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$5.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$5.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$5.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$5.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$5.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$5.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$5.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$5.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$5.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$5.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$5.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$5.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$5$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$5, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.m_Item4 = null;
    $p.m_Item5 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_System$ITuple$Size = function() {
        return 5;
    };
    $p.$ctor = function(item1, item2, item3, item4, item5) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$5$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3))) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$5$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$3(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item5));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$5, System.Tuple$5.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$5);
System.Tuple$6 = $define("System.Tuple<T1, T2, T3, T4, T5, T6>");
System.Tuple$6.prototype = new System.Object();
(System.Tuple$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$6;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`6", System.Tuple$6, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$6.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$6.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$6.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$6.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$6.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$6.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$6.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$6.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$6.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$6.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$6.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$6.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$6.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$6.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$6.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$6.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$6.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$6.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$6.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$6.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$6.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$6.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$6.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$6.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$6$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$6, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.m_Item4 = null;
    $p.m_Item5 = null;
    $p.m_Item6 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.get_System$ITuple$Size = function() {
        return 6;
    };
    $p.$ctor = function(item1, item2, item3, item4, item5, item6) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$6$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$6$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$4(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item6));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$6, System.Tuple$6.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$6);
System.Tuple$7 = $define("System.Tuple<T1, T2, T3, T4, T5, T6, T7>");
System.Tuple$7.prototype = new System.Object();
(System.Tuple$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$7;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`7", System.Tuple$7, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item7", T7, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$7.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$7.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$7.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$7.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$7.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$7.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$7.prototype.get_Item7, [], T7, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$7.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$7.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$7.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$7.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$7.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$7.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$7.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$7.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$7.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$7.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$7.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$7.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$7.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$7.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$7.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$7.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$7.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item7", T7, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$7.prototype.get_Item7, [], T7, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$7.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$7$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$7, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.m_Item4 = null;
    $p.m_Item5 = null;
    $p.m_Item6 = null;
    $p.m_Item7 = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.get_Item7 = function() {
        return this.m_Item7;
    };
    $p.get_System$ITuple$Size = function() {
        return 7;
    };
    $p.$ctor = function(item1, item2, item3, item4, item5, item6, item7) {
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
        this.m_Item7 = item7;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6, item7) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$7$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item7), $cast(System.Object, tuple.m_Item7));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$7$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            var num6 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6));
            if (num6 != 0)
                return num6;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item7), $cast(System.Object, tuple.m_Item7));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$5(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item6));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item7));
        sb.Append$2(")");
        return ($cast(System.Object, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$7, System.Tuple$7.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$7);
System.Tuple$8 = $define("System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>");
System.Tuple$8.prototype = new System.Object();
(System.Tuple$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, TRest) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Tuple$8;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", []);this.$type.Init("System.Tuple`8", System.Tuple$8, System.Object, [System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], [System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item7", T7, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Rest", TRest, System.Reflection.FieldAttributes().Private | System.Reflection.FieldAttributes().InitOnly, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$8.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$8.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$8.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$8.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$8.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$8.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$8.prototype.get_Item7, [], T7, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Rest", System.Tuple$8.prototype.get_Rest, [], TRest, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$8.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$8.prototype.Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$Equals", System.Tuple$8.prototype.System$Collections$IStructuralEquatable$Equals, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$IComparable$CompareTo", System.Tuple$8.prototype.System$IComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralComparable$CompareTo", System.Tuple$8.prototype.System$Collections$IStructuralComparable$CompareTo, [System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$8.prototype.GetHashCode, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$Collections$IStructuralEquatable$GetHashCode", System.Tuple$8.prototype.System$Collections$IStructuralEquatable$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.Tuple$8.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$8.prototype.ToString, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.Tuple$8.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Private, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$8.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("rest", TRest, 7, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$8.prototype.get_Item1, [], T1, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$8.prototype.get_Item2, [], T2, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$8.prototype.get_Item3, [], T3, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$8.prototype.get_Item4, [], T4, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$8.prototype.get_Item5, [], T5, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$8.prototype.get_Item6, [], T6, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item7", T7, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$8.prototype.get_Item7, [], T7, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Rest", TRest, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Rest", System.Tuple$8.prototype.get_Rest, [], TRest, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.Tuple$8.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Private, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    window.System.Tuple$8$ = function() {
        return System.Object.$$MakeGenericType.call(null, System.Tuple$8, arguments);
    };
    $p.m_Item1 = null;
    $p.m_Item2 = null;
    $p.m_Item3 = null;
    $p.m_Item4 = null;
    $p.m_Item5 = null;
    $p.m_Item6 = null;
    $p.m_Item7 = null;
    $p.m_Rest = null;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.get_Item7 = function() {
        return this.m_Item7;
    };
    $p.get_Rest = function() {
        return this.m_Rest;
    };
    $p.get_System$ITuple$Size = function() {
        return 7 + ($cast(System.ITuple, $cast(System.Object, this.m_Rest))).get_Size();
    };
    $p.$ctor = function(item1, item2, item3, item4, item5, item6, item7, rest) {
        System.Object.prototype.$ctor.call(this);
        if (!(System.ITuple.$GetType().IsInstanceOfType($cast(System.Object, rest))))
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleLastArgumentNotATuple").InternalInit(new Error());
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
        this.m_Item7 = item7;
        this.m_Rest = rest;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6, item7, rest) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7, 
            rest
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$8$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7, 
                TRest
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Item7), $cast(System.Object, tuple.m_Item7)))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(System.Object, this.m_Rest), $cast(System.Object, tuple.m_Rest));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Collections.IStructuralComparable, this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.IComparer, (System.Collections.Generic.Comparer$1$(System.Object))().get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call((System.Tuple$8$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7, 
                TRest
            )).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item1), $cast(System.Object, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item2), $cast(System.Object, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item3), $cast(System.Object, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item4), $cast(System.Object, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item5), $cast(System.Object, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            var num6 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item6), $cast(System.Object, tuple.m_Item6));
            if (num6 != 0)
                return num6;
            var num7 = comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Item7), $cast(System.Object, tuple.m_Item7));
            if (num7 != 0)
                return num7;
            else
                return comparer.System$Collections$IComparer$Compare($cast(System.Object, this.m_Rest), $cast(System.Object, tuple.m_Rest));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.IEqualityComparer, (System.Collections.Generic.EqualityComparer$1$(System.Object))().Default));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        var tuple = $cast(System.ITuple, $cast(System.Object, this.m_Rest));
        if (tuple.get_Size() >= 8)
            return tuple.System$ITuple$GetHashCode(comparer);
        switch (8 - tuple.get_Size()) {
            case 1:
                return System.Tuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), tuple.System$ITuple$GetHashCode(comparer));
            case 2:
                return System.Tuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), tuple.System$ITuple$GetHashCode(comparer));
            case 3:
                return System.Tuple.CombineHashCodes$2(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 4:
                return System.Tuple.CombineHashCodes$3(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 5:
                return System.Tuple.CombineHashCodes$4(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 6:
                return System.Tuple.CombineHashCodes$5(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 7:
                return System.Tuple.CombineHashCodes$6(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item1)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item2)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(System.Object, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            default:
                return -1;
        }
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Collections.IStructuralEquatable, this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.ITuple, this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(System.Object, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item6));
        sb.Append$2(", ");
        sb.Append$1($cast(System.Object, this.m_Item7));
        sb.Append$2(", ");
        return ($cast(System.ITuple, $cast(System.Object, this.m_Rest))).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(null, System.Tuple$8, System.Tuple$8.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple$8);
System.ITuple = $define("System.ITuple");
System.ITuple.prototype = new System.Object();
(System.ITuple.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.ITuple;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ITuple";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ITuple", []);this.$type.Init("System.ITuple", System.ITuple, null, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.ITuple.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$ToString", System.ITuple.prototype.System$ITuple$ToString, [System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$GetHashCode", System.ITuple.prototype.System$ITuple$GetHashCode, [System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, [])], System.Int32, System.Reflection.MethodAttributes().Public, [])], [], [System.Reflection.PropertyInfo.prototype.$ctor.$new("Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System$ITuple$get_Size", System.ITuple.prototype.System$ITuple$get_Size, [], System.Int32, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.get_Size = function() {
    };
    $p.System$ITuple$ToString = function(sb) {
    };
    $p.System$ITuple$GetHashCode = function(comparer) {
    };
}).call(null, System.ITuple, System.ITuple.prototype);
$mscorlib$AssemblyTypes.push(System.ITuple);
System.Type = $define("System.Type");
System.Type.prototype = new System.Reflection.MemberInfo();
(System.Type.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Type;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Type";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Type", []);this.$type.Init("System.Type", System.Type, System.Reflection.MemberInfo, [System.Reflection.ICustomAttributeProvider], [System.Reflection.FieldInfo.prototype.$ctor.$new("DefaultBinder", System.Reflection.Binder, System.Reflection.FieldAttributes().Public | System.Reflection.FieldAttributes().Static | System.Reflection.FieldAttributes().InitOnly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("$FullName$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("interfaces", System.Object.$$MakeArrayType(Function), System.Reflection.FieldAttributes().Assembly, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("fields", System.Object.$$MakeArrayType(System.Reflection.FieldInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("methods", System.Object.$$MakeArrayType(System.Reflection.MethodInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("constructors", System.Object.$$MakeArrayType(System.Reflection.ConstructorInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("properties", System.Object.$$MakeArrayType(System.Reflection.PropertyInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("events", System.Object.$$MakeArrayType(System.Reflection.EventInfo), System.Reflection.FieldAttributes().Private, null, []), System.Reflection.FieldInfo.prototype.$ctor.$new("isValueType", System.Boolean, System.Reflection.FieldAttributes().Private, null, [])], [System.Reflection.MethodInfo.prototype.$ctor.$new("$cctor", System.Type.prototype.$cctor, [], System.Void, System.Reflection.MethodAttributes().Private | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Type.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_FullName", System.Type.prototype.set_FullName, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Type.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("Init", System.Type.prototype.Init, [System.Reflection.ParameterInfo.prototype.$ctor.$new("fullName", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("thisType", Function, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("baseType", Function, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("interfaces", System.Object.$$MakeArrayType(Function), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("fields", System.Object.$$MakeArrayType(System.Reflection.FieldInfo), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("methods", System.Object.$$MakeArrayType(System.Reflection.MethodInfo), 5, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("constructors", System.Object.$$MakeArrayType(System.Reflection.ConstructorInfo), 6, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("properties", System.Object.$$MakeArrayType(System.Reflection.PropertyInfo), 7, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("events", System.Object.$$MakeArrayType(System.Reflection.EventInfo), 8, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("isValueType", System.Boolean, 9, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", Function, 10, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("_GetTypeFromInstance", System.Type.prototype._GetTypeFromInstance, [System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", Object, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Assembly | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("_GetTypeFromTypeFunc", System.Type.prototype._GetTypeFromTypeFunc, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeFunction", Function, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypeFromHandle", System.Type.prototype.GetTypeFromHandle, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeHandle", System.RuntimeTypeHandle, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Type.prototype.get_BaseType, [], System.Type, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Assembly", System.Type.prototype.get_Assembly, [], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType$1", System.Type.prototype.GetType$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, [])], System.Type, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsAssignableFrom", System.Type.prototype.IsAssignableFrom, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsClass", System.Type.prototype.IsClass, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsInterface", System.Type.prototype.IsInterface, [System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, []), System.Reflection.MethodInfo.prototype.$ctor.$new("IsInstanceOfType", System.Type.prototype.IsInstanceOfType, [System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, [])], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetInterfaces", System.Type.prototype.GetInterfaces, [], System.Object.$$MakeArrayType(System.Type), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperties", System.Type.prototype.GetProperties, [], System.Object.$$MakeArrayType(System.Reflection.PropertyInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEvents", System.Type.prototype.GetEvents, [], System.Object.$$MakeArrayType(System.Reflection.EventInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethods", System.Type.prototype.GetMethods, [], System.Object.$$MakeArrayType(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodImpl", System.Type.prototype.GetMethodImpl, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 5, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Private, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod$2", System.Type.prototype.GetMethod$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 1, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod$1", System.Type.prototype.GetMethod$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod", System.Type.prototype.GetMethod, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, [])], System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$7", System.Type.prototype.GetProperty$7, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 5, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$6", System.Type.prototype.GetProperty$6, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 3, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$1", System.Type.prototype.GetProperty$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$5", System.Type.prototype.GetProperty$5, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 2, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$3", System.Type.prototype.GetProperty$3, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 1, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$2", System.Type.prototype.GetProperty$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty$4", System.Type.prototype.GetProperty$4, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 2, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Assembly, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetPropertyImpl", System.Type.prototype.GetPropertyImpl, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 4, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 5, 0, null, [])], System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Family, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructors", System.Type.prototype.GetConstructors, [], System.Object.$$MakeArrayType(System.Reflection.ConstructorInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetField$1", System.Type.prototype.GetField$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, [])], System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetField", System.Type.prototype.GetField, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, [])], System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFields", System.Type.prototype.GetFields, [], System.Object.$$MakeArrayType(System.Reflection.FieldInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFields$1", System.Type.prototype.GetFields$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, [])], System.Object.$$MakeArrayType(System.Reflection.FieldInfo), System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueType", System.Type.prototype.get_IsValueType, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor$2", System.Type.prototype.GetConstructor$2, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 4, 0, null, [])], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor$1", System.Type.prototype.GetConstructor$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 3, 0, null, [])], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor", System.Type.prototype.GetConstructor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 0, 0, null, [])], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructorImpl", System.Type.prototype.GetConstructorImpl, [System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 2, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", System.Object.$$MakeArrayType(System.Type), 3, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", System.Object.$$MakeArrayType(System.Reflection.ParameterModifier), 4, 0, null, [])], System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Family, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Type.prototype.$ctor, [System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, []), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", System.Object.$$MakeArrayType(System.Attribute), 1, 0, null, [])], System.Reflection.MethodAttributes().Public, [])], [System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Type.prototype.get_FullName, [], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("set_FullName", System.Type.prototype.set_FullName, [System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, [])], System.Void, System.Reflection.MethodAttributes().Public, []), [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Type.prototype.get_MemberType, [], System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("BaseType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Type.prototype.get_BaseType, [], System.Type, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("Assembly", System.Reflection.Assembly, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Assembly", System.Type.prototype.get_Assembly, [], System.Reflection.Assembly, System.Reflection.MethodAttributes().Public, []), null, [], []), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueType", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueType", System.Type.prototype.get_IsValueType, [], System.Boolean, System.Reflection.MethodAttributes().Public, []), null, [], [])], [], false);return this.$type;};
    $t.$StaticInitializer = function() {
        System.Type.DefaultBinder = System.Reflection.Binder.prototype.$ctor.$new();
    };
    $p.DefaultBinder = null;
    $p.$FullName$k__BackingField = null;
    $p.get_FullName = function() {
        return this.$FullName$k__BackingField;
    };
    $p.set_FullName = function(value) {
        this.$FullName$k__BackingField = value;
    };
    $p.thisType = null;
    $p.baseType = null;
    $p.interfaces = null;
    $p.fields = null;
    $p.methods = null;
    $p.constructors = null;
    $p.properties = null;
    $p.events = null;
    $p.elementType = null;
    $p.isValueType = null;
    $p.$ctor = function(name, attributes) {
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, attributes) {
        return new $p.$ctor.$type(this, name, attributes);
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().TypeInfo;
    };
    $p.Init = function(fullName, thisType, baseType, interfaces, fields, methods, constructors, properties, events, isValueType, elementType) {
        this.set_FullName(fullName);
        this.thisType = thisType;
        this.baseType = baseType;
        this.interfaces = interfaces;
        this.fields = fields;
        this.methods = methods;
        this.constructors = constructors;
        this.properties = properties;
        this.events = events;
        this.isValueType = isValueType;
        this.elementType = elementType;
        {
            var $anon$1iterator = fields;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var field = $anon$2enumerator.get_Current();
                field.declaringType = this;
            }
        }
        {
            var $anon$3iterator = methods;
            var $anon$4enumerator = $anon$3iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$4enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$4enumerator.get_Current();
                method.declaringType = this;
            }
        }
        {
            var $anon$5iterator = properties;
            var $anon$6enumerator = $anon$5iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$6enumerator.System$Collections$IEnumerator$MoveNext()) {
                var property = $anon$6enumerator.get_Current();
                property.declaringType = this;
            }
        }
        {
            var $anon$7iterator = constructors;
            var $anon$8enumerator = $anon$7iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$8enumerator.System$Collections$IEnumerator$MoveNext()) {
                var constructor = $anon$8enumerator.get_Current();
                constructor.declaringType = this;
            }
        }
    };
    $t._GetTypeFromInstance = function(instance) {
        var typeFunction = instance["$type"];
        if (typeFunction == null) {
            var typeString = typeof instance;
            if (typeString == "string") {
                return System.Type.GetType$1("System.String");
            }
            if (typeString == "number") {
                return System.Type.GetType$1("System.Number");
            }
            if (typeString == "object") {
                return System.Type.GetType$1("System.Object");
            }
            if (typeString == "function") {
                return System.Type.GetType$1("System.Delegate");
            }
            else {
                throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
            }
        }
        else {
            return System.Type._GetTypeFromTypeFunc(typeFunction);
        }
    };
    $t._GetTypeFromTypeFunc = function(typeFunction) {
        if (typeFunction.$type == null)
            typeFunction.$CreateType();
        return typeFunction.$type;
    };
    $t.GetTypeFromHandle = function(typeHandle) {
        return null;
    };
    $p.get_BaseType = function() {
        if (this.baseType == null)
            return null;
        else
            return System.Type._GetTypeFromTypeFunc(this.baseType);
    };
    $p.get_Assembly = function() {
        return this.thisType.$GetAssembly();
    };
    $t.GetType$1 = function(typeName) {
        {
            var $anon$1iterator = System.AppDomain().get_CurrentDomain().GetAssemblies();
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var assembly = $anon$2enumerator.get_Current();
                var result = assembly.GetType$1(typeName);
                if (result != null)
                    return result;
            }
        }
        return null;
    };
    $p.IsAssignableFrom = function(type) {
        if (type == Number.$GetType()) {
            if (this == System.Int32.$GetType() || this == System.Single.$GetType() || this == System.Int64.$GetType() || this == System.Byte.$GetType() || this == System.SByte.$GetType() || this == System.Int16.$GetType() || this == System.UInt16.$GetType() || this == System.UInt32.$GetType() || this == System.UInt64.$GetType() || this == System.Double.$GetType()) {
                return true;
            }
        }
        var current = type;
        while (current != null) {
            if (current == this)
                return true;
            current = current.get_BaseType();
        }
        {
            var $anon$1iterator = type.GetInterfaces();
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.get_Current();
                if (item == this)
                    return true;
            }
        }
        return false;
    };
    $t.IsClass = function(type) {
        return false;
    };
    $t.IsInterface = function(type) {
        return false;
    };
    $p.IsInstanceOfType = function(o) {
        if (o == null)
            return false;
        else
            return this.IsAssignableFrom(o.GetType());
    };
    $p.GetInterfaces = function() {
        return System.Linq.Enumerable.ToArray(System.Type, System.Linq.Enumerable.Select(
            Function, 
            System.Type, 
            this.interfaces, 
            $delegate(this, (System.Func$2$(Function, System.Type)), function(x) {
                return System.Type._GetTypeFromTypeFunc(x);
            })
        ));
    };
    $p.GetProperties = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.PropertyInfo, this.properties);
    };
    $p.GetEvents = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.EventInfo, this.events);
    };
    $p.GetMethods = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.MethodInfo, this.methods);
    };
    $p.GetMethodImpl = function(name, bindingAttr, binder, callConvention, types, modifiers) {
        {
            var $anon$1iterator = this.methods;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$2enumerator.get_Current();
                if (method.get_Name() != name)
                    continue;
                if ((bindingAttr & System.Reflection.BindingFlags().NonPublic) != System.Reflection.BindingFlags().NonPublic && !method.get_IsPublic())
                    continue;
                var parameters = method.GetParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return method;
            }
        }
        return null;
    };
    $p.GetMethod$2 = function(name, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetMethodImpl(
            name, 
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
            null, 
            System.Reflection.CallingConventions().Any, 
            types, 
            null
        );
    };
    $p.GetMethod$1 = function(name, bindingAttr) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetMethodImpl(
                name, 
                bindingAttr, 
                null, 
                System.Reflection.CallingConventions().Any, 
                null, 
                null
            );
    };
    $p.GetMethod = function(name) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetMethodImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                System.Reflection.CallingConventions().Any, 
                null, 
                null
            );
    };
    $p.GetProperty$7 = function(name, bindingAttr, binder, returnType, types, modifiers) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                binder, 
                returnType, 
                types, 
                modifiers
            );
    };
    $p.GetProperty$6 = function(name, returnType, types, modifiers) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                returnType, 
                types, 
                modifiers
            );
    };
    $p.GetProperty$1 = function(name, bindingAttr) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                null, 
                null, 
                null, 
                null
            );
    };
    $p.GetProperty$5 = function(name, returnType, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                returnType, 
                types, 
                null
            );
    };
    $p.GetProperty$3 = function(name, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                null, 
                types, 
                null
            );
    };
    $p.GetProperty$2 = function(name, returnType) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (returnType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("returnType").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                returnType, 
                null, 
                null
            );
    };
    $p.GetProperty$4 = function(name, bindingAttr, returnType) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (returnType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("returnType").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                null, 
                returnType, 
                null, 
                null
            );
    };
    $p.GetProperty = function(name) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public, 
                null, 
                null, 
                null, 
                null
            );
    };
    $p.GetPropertyImpl = function(name, bindingAttr, binder, returnType, types, modifiers) {
        {
            var $anon$1iterator = this.properties;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var property = $anon$2enumerator.get_Current();
                var anAccessor = property.get_GetMethod() || property.get_SetMethod();
                if (property.get_Name() != name)
                    continue;
                if ((bindingAttr & System.Reflection.BindingFlags().NonPublic) != System.Reflection.BindingFlags().NonPublic && !anAccessor.get_IsPublic())
                    continue;
                var parameters = property.GetIndexParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return property;
            }
        }
        return null;
    };
    $p.GetConstructors = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.ConstructorInfo, this.constructors);
    };
    $p.GetField$1 = function(name, bindingAttr) {
        {
            var $anon$1iterator = this.fields;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var field = $anon$2enumerator.get_Current();
                if (field.get_Name() != name)
                    continue;
                if ((bindingAttr & System.Reflection.BindingFlags().NonPublic) != System.Reflection.BindingFlags().NonPublic && !field.get_IsPublic())
                    continue;
                return field;
            }
        }
        return null;
    };
    $p.GetField = function(name) {
        return this.GetField$1(name, System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public);
    };
    $p.GetFields = function() {
        return this.GetFields$1(System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Static | System.Reflection.BindingFlags().Public);
    };
    $p.GetFields$1 = function(bindingAttr) {
        return System.Linq.Enumerable.ToArray(System.Reflection.FieldInfo, this.fields);
    };
    $p.get_IsValueType = function() {
        return this.isValueType;
    };
    $p.GetConstructor$2 = function(bindingAttr, binder, callConvention, types, modifiers) {
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetConstructorImpl(
            bindingAttr, 
            binder, 
            callConvention, 
            types, 
            modifiers
        );
    };
    $p.GetConstructor$1 = function(bindingAttr, binder, types, modifiers) {
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetConstructorImpl(
            bindingAttr, 
            binder, 
            System.Reflection.CallingConventions().Any, 
            types, 
            modifiers
        );
    };
    $p.GetConstructor = function(types) {
        return this.GetConstructor$1(
            System.Reflection.BindingFlags().Instance | System.Reflection.BindingFlags().Public, 
            null, 
            types, 
            null
        );
    };
    $p.GetConstructorImpl = function(bindingAttr, binder, callConvention, types, modifiers) {
        {
            var $anon$1iterator = this.constructors;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$2enumerator.get_Current();
                if ((bindingAttr & System.Reflection.BindingFlags().NonPublic) != System.Reflection.BindingFlags().NonPublic && !method.get_IsPublic())
                    continue;
                var parameters = method.GetParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return method;
            }
        }
        return null;
    };
}).call(null, System.Type, System.Type.prototype);
$mscorlib$AssemblyTypes.push(System.Type);
System.UInt16 = $define("ushort");
System.UInt16.prototype = new System.ValueType();
(System.UInt16.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.UInt16;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt16";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt16", []);this.$type.Init("System.UInt16", System.UInt16, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.UInt16.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.UInt16.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.UInt16.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt16.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt16, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt16.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.UInt16, System.UInt16.prototype);
$mscorlib$AssemblyTypes.push(System.UInt16);
System.UInt32 = $define("uint");
System.UInt32.prototype = new System.ValueType();
(System.UInt32.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.UInt32;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt32";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt32", []);this.$type.Init("System.UInt32", System.UInt32, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.UInt32.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.UInt32.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.UInt32.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt32.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt32, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt32.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.UInt32, System.UInt32.prototype);
$mscorlib$AssemblyTypes.push(System.UInt32);
System.UInt64 = $define("ulong");
System.UInt64.prototype = new System.ValueType();
(System.UInt64.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.UInt64;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt64";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt64", []);this.$type.Init("System.UInt64", System.UInt64, System.ValueType, [], [], [System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.UInt64.prototype.Format, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.UInt64.prototype.LocaleFormat, [System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString$1", System.UInt64.prototype.ToString$1, [System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, [])], String, System.Reflection.MethodAttributes().Public, []), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt64.prototype.op_Implicit, [System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt64, 0, 0, null, [])], Number, System.Reflection.MethodAttributes().Public | System.Reflection.MethodAttributes().Static, [])], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt64.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.UInt64, System.UInt64.prototype);
$mscorlib$AssemblyTypes.push(System.UInt64);
System.Void = $define("void");
System.Void.prototype = new System.ValueType();
(System.Void.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = System.Void;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Void";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Void", []);this.$type.Init("System.Void", System.Void, System.ValueType, [], [], [], [System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Void.prototype.$ctor, [], System.Reflection.MethodAttributes().Public, [])], [], [], true);return this.$type;};
    $t.$StaticInitializer = function() {
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Void, System.Void.prototype);
$mscorlib$AssemblyTypes.push(System.Void);
