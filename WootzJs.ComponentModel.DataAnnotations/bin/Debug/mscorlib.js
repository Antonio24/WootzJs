"use strict";
var $assemblies = [];
Function.$typeName = "Function";
var $mscorlib$Assembly = null;
var $mscorlib$AssemblyTypes = [];
window.$mscorlib$GetAssembly = function() {
    if ($mscorlib$Assembly == null)
        $mscorlib$Assembly = System.Reflection.Assembly.prototype.$ctor.$new("mscorlib", $mscorlib$AssemblyTypes, $arrayinit([
            System.Reflection.AssemblyTitleAttribute.prototype.$ctor.$new("mscorlib"), 
            System.Reflection.AssemblyDescriptionAttribute.prototype.$ctor.$new(""), 
            System.Reflection.AssemblyConfigurationAttribute.prototype.$ctor.$new(""), 
            System.Reflection.AssemblyCompanyAttribute.prototype.$ctor.$new(""), 
            System.Reflection.AssemblyProductAttribute.prototype.$ctor.$new("WootzJs.Runtime"), 
            System.Reflection.AssemblyTrademarkAttribute.prototype.$ctor.$new(""), 
            System.Reflection.AssemblyCultureAttribute.prototype.$ctor.$new(""), 
            System.Runtime.InteropServices.GuidAttribute.prototype.$ctor.$new("d4892cd9-d8a0-41d5-bd0d-c8bc3f3b0cdc"), 
            System.Reflection.AssemblyVersionAttribute.prototype.$ctor.$new("4.0.0.0"), 
            System.Reflection.AssemblyFileVersionAttribute.prototype.$ctor.$new("4.0.0.0")
        ], System.Attribute));
    return $mscorlib$Assembly;
};
$assemblies.push(window.$mscorlib$GetAssembly);
window.System = window.System || {};
System.CodeDom = System.CodeDom || {};
System.CodeDom.Compiler = System.CodeDom.Compiler || {};
System.Collections = System.Collections || {};
System.Collections.Generic = System.Collections.Generic || {};
System.Diagnostics = System.Diagnostics || {};
System.Globalization = System.Globalization || {};
System.Linq = System.Linq || {};
System.Linq.Expressions = System.Linq.Expressions || {};
window.Microsoft = window.Microsoft || {};
Microsoft.CSharp = Microsoft.CSharp || {};
Microsoft.CSharp.RuntimeBinder = Microsoft.CSharp.RuntimeBinder || {};
System.Reflection = System.Reflection || {};
System.Runtime = System.Runtime || {};
System.Runtime.CompilerServices = System.Runtime.CompilerServices || {};
System.Runtime.InteropServices = System.Runtime.InteropServices || {};
System.Runtime.Versioning = System.Runtime.Versioning || {};
System.Runtime.WootzJs = System.Runtime.WootzJs || {};
System.Text = System.Text || {};
System.Threading = System.Threading || {};
System.Web = System.Web || {};
function $define(name, prototype) {
    var typeFunction = null;
    typeFunction = function(constructor) {
        if (constructor != null || !((this instanceof typeFunction))) {
            typeFunction.$StaticInitializer();
        }
        if (constructor != null)
            constructor.apply(this, Array.prototype.slice.call(arguments, 1));
        if (!(this instanceof typeFunction))
            return typeFunction;
        else
            return this;
    };
    typeFunction.toString = function() {
        return name;
    };
    typeFunction.$typeName = name;
    typeFunction.prototype = new prototype();
    return typeFunction;
}
function $definetypeparameter(name, prototype) {
    var result = $define(name, prototype);
    result.$CreateType = function() {
        var type = System.Type.CreateTypeParameter(name, prototype);
        result.$type = type;
        return result;
    };
    return result;
}
function $cast(T, o) {
    if (o == null)
        return $default(T);
    var type = o.GetType();
    if (!T.$GetType().IsAssignableFrom(type))
        throw System.InvalidCastException.prototype.$ctor.$new("Cannot cast object of type " + o.GetType().get_FullName() + " to type " + T.$GetType().get_FullName()).InternalInit(new Error());
    return o;
}
function $delegate(thisExpression, delegateType, lambda, delegateKey) {
    if (delegateKey != null) {
        if (thisExpression[delegateKey])
            return thisExpression[delegateKey];
    }
    else {
        if (lambda.$delegate != null)
            return lambda.$delegate;
    }
    var delegateFunc = null;
    delegateFunc = function() {
        return lambda.apply(delegateFunc.get_Target(), arguments);
    };
    delegateFunc.prototype = new delegateType();
    System.Object.$TypeInitializer(delegateFunc, delegateFunc);
    System.Delegate.$TypeInitializer(delegateFunc, delegateFunc);
    System.MulticastDelegate.$TypeInitializer(delegateFunc, delegateFunc);
    delegateType.$TypeInitializer(delegateFunc, delegateFunc);
    System.MulticastDelegate.prototype.$ctor.call(delegateFunc, thisExpression, $arrayinit([delegateFunc], Function));
    delegateFunc.$type = delegateType;
    if (delegateKey != null)
        thisExpression[delegateKey] = delegateFunc;
    else
        lambda.$delegate = delegateFunc;
    return delegateFunc;
}
function $arrayinit(array, elementType) {
    if (array.$isInitialized)
        return array;
    array.$isInitialized = true;
    var arrayType = $array(elementType);
    {
        for (var property in arrayType.prototype) {
            array[property] = arrayType.prototype[property];
        }
    }
    arrayType.prototype.$ctor.call(array);
    return array;
}
function $generic(unconstructedType, typeArgs) {
    var cache = unconstructedType.$typecache;
    if (cache == null) {
        cache = new Object();
        unconstructedType.$typecache = cache;
    }
    var keyArray = Array.prototype.slice.call(typeArgs, 0);
    var keyParts = new Array();
    for (var i = 0; i < keyArray.length; i++) {
        keyParts[i] = keyArray[i].$typeName;
    }
    var keyString = keyParts.join(", ");
    var result = cache[keyString];
    if (result == null) {
        var lastIndexOfDollar = unconstructedType.$typeName.lastIndexOf("`");
        var newTypeName = String.prototype.Substring.call(unconstructedType.$typeName, 0, lastIndexOfDollar) + "<" + keyString + ">";
        var prototype = unconstructedType.$baseType;
        if (prototype.$)
            prototype = prototype.$.apply(null, typeArgs);
        var generic = $define(newTypeName, prototype);
        generic.$unconstructedType = unconstructedType;
        unconstructedType.$TypeInitializer.apply(unconstructedType, [generic, generic.prototype].concat(keyArray));
        generic.$TypeInitializer = function($t, $p) {
            $p.$type = generic;
            $t.$baseType = unconstructedType;
            $t.$GetType = function() {
                return System.Type._GetTypeFromTypeFunc(this);
            };
            $t.$CreateType = function() {
                var unconstructedTypeType = System.Type._GetTypeFromTypeFunc(unconstructedType);
                var type = System.Type.prototype.$ctor.$new(newTypeName, $arrayinit(new Array(0), System.Attribute));
                generic.$type = type;
                type.Init(
                    newTypeName, 
                    unconstructedTypeType.typeAttributes, 
                    generic, 
                    unconstructedType.$baseType, 
                    unconstructedTypeType.interfaces, 
                    $arrayinit(typeArgs, Function), 
                    unconstructedTypeType.fields, 
                    unconstructedTypeType.methods, 
                    unconstructedTypeType.constructors, 
                    unconstructedTypeType.properties, 
                    unconstructedTypeType.events, 
                    false, 
                    false, 
                    true, 
                    false, 
                    null, 
                    unconstructedType
                );
                return type;
            };
        };
        generic.$TypeInitializer.call(this, generic, generic.prototype);
        result = generic;
        cache[keyString] = result;
    }
    return result;
}
function $array(elementType) {
    if (elementType.$arrayType == null) {
        var baseType = $generic(System.GenericArray$1, [elementType]);
        var arrayType = function() {};
        arrayType.prototype = new baseType();
        System.Object.$TypeInitializer.apply(this, [arrayType, arrayType.prototype]);
        Array.$TypeInitializer.apply(this, [arrayType, arrayType.prototype].concat(elementType));
        arrayType.$TypeInitializer = function($t, $p) {
            $p.$type = arrayType;
            $t.$typeName = elementType.$typeName + "[]";
            $t.$baseType = baseType;
            $t.$elementType = elementType;
            $t.$GetType = function() {
                return System.Type._GetTypeFromTypeFunc(this);
            };
            $t.$CreateType = function() {
                var lastIndex = elementType.$typeName.lastIndexOf(".");
                if (lastIndex == -1)
                    lastIndex = 0;
                else
                    lastIndex++;
                var type = System.Type.prototype.$ctor.$new(String.prototype.Substring.call(elementType.$typeName, lastIndex, 0) + "[]", $arrayinit(new Array(0), System.Attribute));
                arrayType.$type = type;
                type.Init(
                    elementType.$typeName + "[]", 
                    System.Reflection.TypeAttributes().Public, 
                    elementType, 
                    Array, 
                    System.Linq.Enumerable.ToArray(Function, System.Linq.Enumerable.Concat(Function, Array.$GetType().interfaces, $arrayinit([$generic(System.Collections.Generic.IEnumerable$1, [elementType])], Function))), 
                    $arrayinit(new Array(0), Function), 
                    $arrayinit(new Array(0), System.Reflection.FieldInfo), 
                    $arrayinit(new Array(0), System.Reflection.MethodInfo), 
                    $arrayinit(new Array(0), System.Reflection.ConstructorInfo), 
                    $arrayinit(new Array(0), System.Reflection.PropertyInfo), 
                    $arrayinit(new Array(0), System.Reflection.EventInfo), 
                    false, 
                    false, 
                    false, 
                    false, 
                    elementType, 
                    null
                );
                return type;
            };
        };
        arrayType.$TypeInitializer.call(this, arrayType, arrayType.prototype);
        var result = arrayType;
        elementType.$arrayType = result;
    }
    return elementType.$arrayType;
}
function $safeToString(o) {
    return o == null ? "" : typeof o == "boolean" ? o.toString() : o.ToString();
}
function $trunc(number) {
    return number < 0 ? Math.ceil(number) : Math.floor(number);
}
function $default(type) {
    var typeName = type.$typeName;
    switch (typeName) {
        case "System.Boolean":
            return false;
        case "System.Byte":
        case "System.SByte":
        case "System.Int16":
        case "System.Int32":
        case "System.Int64":
        case "System.UInt16":
        case "System.UInt32":
        case "System.UInt64":
        case "System.Single":
        case "System.Double":
        case "System.Decimal":
            return 0;
        default:
            return null;
    }
}
System.Object = $define("object", Object);
(System.Object.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = Object;
    $p.$typeName = "System.Object";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Object", $arrayinit([], System.Attribute));this.$type.Init("System.Object", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Object, null, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("__hashCode", System.Nullable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Object.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Object.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("toString", System.Object.prototype.toString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("toString");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Object.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Object.prototype.Equals$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("objA", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("objB", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Object.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ReferenceEquals", System.Object.prototype.ReferenceEquals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("o1", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("o2", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Object.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.$ctor = function() {
        this.__hashCode = null;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetType = function() {
        return System.Type._GetTypeFromInstance(this);
    };
    $p.ToString = function() {
        if (this == null)
            return "";
        return "{" + this.GetType().get_FullName() + "}";
    };
    $p.toString = function() {
        return this.ToString();
    };
    $p.Equals = function(obj) {
        return this == obj;
    };
    $t.Equals$1 = function(objA, objB) {
        if (objA == objB)
            return true;
        if (objA == null || objB == null)
            return false;
        else
            return objA.Equals(objB);
    };
    $p.GetHashCode = function() {
        if (this.__hashCode == null)
            this.__hashCode = Math.random();
        return this.__hashCode;
    };
    $t.ReferenceEquals = function(o1, o2) {
        return true;
    };
}).call(null, System.Object, System.Object.prototype);
$mscorlib$AssemblyTypes.push(System.Object);
System.Delegate = $define("System.Delegate", System.Object);
(System.Delegate.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Delegate";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Delegate", $arrayinit([], System.Attribute));this.$type.Init("System.Delegate", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Delegate, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", System.Delegate, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("target", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Target", System.Delegate.prototype.get_Target, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Combine", System.Delegate.prototype.Combine, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Delegate, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("b", System.Delegate, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Delegate.prototype.Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Delegate, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Delegate.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Delegate.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("DynamicInvoke", System.Delegate.prototype.DynamicInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Delegate.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Target", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Target", System.Delegate.prototype.get_Target, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(target) {
        this.target = null;
        this.jsFunction = null;
        System.Object.prototype.$ctor.call(this);
        this.target = target;
        this.jsFunction = this;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(target) {
        return new $p.$ctor.$type(this, target);
    };
    $p.get_Target = function() {
        return this.target;
    };
    $t.Combine = function(a, b) {
        if (a == null)
            return b;
        else
            if (b == null)
                return a;
            else
                if (System.MulticastDelegate.$GetType().IsInstanceOfType(a))
                    return System.MulticastDelegate.prototype.Add.call(($cast(System.Delegate, a)), b);
                else
                    return (function() {
                        var $invocationList = $arrayinit([a, b], System.Delegate);
                        var $delegate$ = function() {
                            for (var $i = 0; $i < $invocationList.length; $i++)
                                $invocationList[$i](arguments);
                        };
                        $delegate$.prototype = new System.MulticastDelegate();
                        System.Object.$TypeInitializer($delegate$, $delegate$);
                        System.Delegate.$TypeInitializer($delegate$, $delegate$);
                        System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
                        $arrayinit([a, b], System.Delegate)[0].$type.$TypeInitializer($delegate$, $delegate$);
                        System.MulticastDelegate.prototype.$ctor.call($delegate$, a.get_Target(), $invocationList);
                        $delegate$.$type = $arrayinit([a, b], System.Delegate)[0].$type;
                        return $delegate$;
                    }).call(this);
    };
    $t.Remove = function(source, value) {
        if (source == value || source == null)
            return null;
        else {
            var multicast = (function() {
                var $as$ = source;
                if (!System.Type.prototype.IsInstanceOfType.call(System.MulticastDelegate.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (multicast != null) {
                return System.MulticastDelegate.prototype.Remove$1.call(multicast, value);
            }
            else {
                return source;
            }
        }
    };
    $p.Equals = function(obj) {
        return System.Object.prototype.Equals.call(this, obj);
    };
    $p.GetHashCode = function() {
        return System.Object.prototype.GetHashCode.call(this);
    };
    $p.DynamicInvoke = function(args) {
        return this.apply(this, args);
    };
}).call(null, System.Delegate, System.Delegate.prototype);
$mscorlib$AssemblyTypes.push(System.Delegate);
System.ValueType = $define("System.ValueType", System.Object);
(System.ValueType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ValueType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ValueType", $arrayinit([], System.Attribute));this.$type.Init("System.ValueType", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.ValueType, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ValueType.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.ValueType, System.ValueType.prototype);
$mscorlib$AssemblyTypes.push(System.ValueType);
System.Reflection.MemberInfo = $define("System.Reflection.MemberInfo", System.Object);
(System.Reflection.MemberInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.MemberInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.MemberInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Reflection.MemberInfo, System.Object, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Family.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("declaringType", System.Type, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MemberInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.MemberInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DeclaringType", System.Reflection.MemberInfo.prototype.get_DeclaringType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.MemberInfo.prototype.GetCustomAttributes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.MemberInfo.prototype.GetCustomAttributes$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.MemberInfo.prototype.IsDefined, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MemberInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MemberInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.MemberInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("DeclaringType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DeclaringType", System.Reflection.MemberInfo.prototype.get_DeclaringType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(name, attributes) {
        this.attributes = null;
        this.name = null;
        this.declaringType = null;
        System.Object.prototype.$ctor.call(this);
        this.name = name;
        this.attributes = attributes;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, attributes) {
        return new $p.$ctor.$type(this, name, attributes);
    };
    $p.get_MemberType = function() {};
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_DeclaringType = function() {
        return this.declaringType;
    };
    $p.GetCustomAttributes = function(inherit) {
        return System.Linq.Enumerable.ToArray(System.Attribute, this.attributes);
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Where(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        })));
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        return System.Linq.Enumerable.Any$1(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        }));
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
}).call(null, System.Reflection.MemberInfo, System.Reflection.MemberInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MemberInfo);
System.MulticastDelegate = $define("System.MulticastDelegate", System.Delegate);
(System.MulticastDelegate.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Delegate;
    $p.$typeName = "System.MulticastDelegate";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MulticastDelegate", $arrayinit([], System.Attribute));this.$type.Init("System.MulticastDelegate", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.MulticastDelegate, System.Delegate, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("invocationList", $array(System.Delegate), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.MulticastDelegate.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.MulticastDelegate.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.MulticastDelegate.prototype.Remove$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Delegate, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.MulticastDelegate.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invocationList", $array(System.Delegate), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Delegate.$StaticInitializer();
    };
    $p.$ctor = function(target, invocationList) {
        this.invocationList = null;
        System.Delegate.prototype.$ctor.call(this, target);
        this.invocationList = invocationList;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(target, invocationList) {
        return new $p.$ctor.$type(this, target, invocationList);
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.Add = function(value) {
        var constructor = this.GetType().GetConstructors()[0];
        var toAdd = $arrayinit([value], System.Delegate);
        var newInvocationList = this.invocationList == null ? toAdd : System.Linq.Enumerable.ToArray(System.Delegate, System.Linq.Enumerable.Concat(System.Delegate, this.invocationList, toAdd));
        return (function() {
            var $invocationList = newInvocationList;
            var $delegate$ = function() {
                for (var $i = 0; $i < $invocationList.length; $i++)
                    $invocationList[$i](arguments);
            };
            $delegate$.prototype = new System.MulticastDelegate();
            System.Object.$TypeInitializer($delegate$, $delegate$);
            System.Delegate.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
            newInvocationList[0].$type.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.prototype.$ctor.call($delegate$, this.get_Target(), $invocationList);
            $delegate$.$type = newInvocationList[0].$type;
            return $delegate$;
        }).call(this);
    };
    $p.Remove$1 = function(value) {
        var constructor = this.GetType().GetConstructors()[0];
        var newInvocationList = System.Linq.Enumerable.ToArray(System.Delegate, System.Linq.Enumerable.Except(System.Delegate, this.invocationList, $arrayinit([value], System.Delegate)));
        return (function() {
            var $invocationList = newInvocationList;
            var $delegate$ = function() {
                for (var $i = 0; $i < $invocationList.length; $i++)
                    $invocationList[$i](arguments);
            };
            $delegate$.prototype = new System.MulticastDelegate();
            System.Object.$TypeInitializer($delegate$, $delegate$);
            System.Delegate.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.$TypeInitializer($delegate$, $delegate$);
            newInvocationList[0].$type.$TypeInitializer($delegate$, $delegate$);
            System.MulticastDelegate.prototype.$ctor.call($delegate$, this.get_Target(), $invocationList);
            $delegate$.$type = newInvocationList[0].$type;
            return $delegate$;
        }).call(this);
    };
}).call(null, System.MulticastDelegate, System.MulticastDelegate.prototype);
$mscorlib$AssemblyTypes.push(System.MulticastDelegate);
System.Exception = $define("System.Exception", System.Object);
(System.Exception.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Exception";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Exception", $arrayinit([], System.Attribute));this.$type.Init("System.Exception", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Exception, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$InnerException$k__BackingField", System.Exception, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("message", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("message");return $obj$;}).call(this)], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("_message", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("stacktrace", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("stacktrace");return $obj$;}).call(this)], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_InnerException", System.Exception.prototype.get_InnerException, $arrayinit([], System.Reflection.ParameterInfo), System.Exception, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InnerException", System.Exception.prototype.set_InnerException, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Exception, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("InternalInit", System.Exception.prototype.InternalInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("error", Error, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Exception, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Message", System.Exception.prototype.get_Message, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Message", System.Exception.prototype.set_Message, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_StackTrace", System.Exception.prototype.get_StackTrace, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("toString", System.Exception.prototype.toString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("toString");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Exception.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Exception.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Exception.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Exception.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Exception.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("InnerException", System.Exception, System.Reflection.MethodInfo.prototype.$ctor.$new("get_InnerException", System.Exception.prototype.get_InnerException, $arrayinit([], System.Reflection.ParameterInfo), System.Exception, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InnerException", System.Exception.prototype.set_InnerException, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Exception, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Message", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Message", System.Exception.prototype.get_Message, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Message", System.Exception.prototype.set_Message, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("StackTrace", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_StackTrace", System.Exception.prototype.get_StackTrace, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Exception.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.get_InnerException = function() {return this.$InnerException$k__BackingField;};
    $p.set_InnerException = function(value) {this.$InnerException$k__BackingField = value;return value;};
    $p.$ctor = function() {
        this.message = null;
        this._message = null;
        this.stacktrace = null;
        this.$InnerException$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        this.message = null;
        this._message = null;
        this.stacktrace = null;
        this.$InnerException$k__BackingField = null;
        System.Exception.prototype.$ctor.call(this);
        this.set_Message(message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        this.message = null;
        this._message = null;
        this.stacktrace = null;
        this.$InnerException$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
        this.set_Message(message);
        this.set_InnerException(innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
    $p.InternalInit = function(error) {
        this.stacktrace = error.stack;
        this.message = this.toString();
        return this;
    };
    $p.get_Message = function() {
        return this._message;
    };
    $p.set_Message = function(value) {
        this._message = value;
        return value;
    };
    $p.get_StackTrace = function() {
        return this.stacktrace;
    };
    $p.toString = function() {
        return this.ToString();
    };
    $p.get_Item = function(key) {
        return null;
    };
    $p.ToString = function() {
        var builder = System.Text.StringBuilder.prototype.$ctor.$new();
        builder.Append$2(this.GetType().get_FullName());
        if (this.get_Message() != null)
            builder.AppendLine$2(": " + this.get_Message());
        else
            builder.AppendLine();
        builder.AppendLine$2(this.get_StackTrace());
        return builder.ToString();
    };
}).call(null, System.Exception, System.Exception.prototype);
$mscorlib$AssemblyTypes.push(System.Exception);
System.Enum = $define("System.Enum", System.ValueType);
(System.Enum.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Enum";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Enum", $arrayinit([], System.Attribute));this.$type.Init("System.Enum", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Enum, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("value", System.Object, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("enumsByTypeAndName", System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("enumsByTypeAndValue", System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("enumsByType", System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Enum.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumValues", System.Enum.prototype.GetEnumValues, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Array, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Enum.prototype.GetValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Enum.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Enum.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToObject", System.Enum.prototype.ToObject, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("InternalToObject", System.Enum.prototype.InternalToObject, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", Function, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Enum.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Enum, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Enum.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Enum.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetNames", System.Enum.prototype.GetNames, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("enumType", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Enum.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
        $t.enumsByTypeAndName = System.Collections.Generic.Dictionary$2$(String, System.Collections.Generic.Dictionary$2$(String, System.Enum)).prototype.$ctor.$new();
        $t.enumsByTypeAndValue = System.Collections.Generic.Dictionary$2$(String, System.Collections.Generic.Dictionary$2$(System.Object, System.Enum)).prototype.$ctor.$new();
        $t.enumsByType = System.Collections.Generic.Dictionary$2$(String, System.Collections.Generic.List$1$(System.Enum)).prototype.$ctor.$new();
    };
    $p.$ctor = function(name, value) {
        this.name = null;
        this.value = null;
        System.ValueType.prototype.$ctor.call(this);
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (value == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("value").InternalInit(new Error());
        this.name = name;
        this.value = value;
        var enumsByName;
        if (!(function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = System.Enum().enumsByTypeAndName.TryGetValue(this.$type.$typeName, $anon$1);
            enumsByName = $anon$1.value;
            return $result$;
        }).call(this)) {
            enumsByName = System.Collections.Generic.Dictionary$2$(String, System.Enum).prototype.$ctor.$new();
            System.Enum().enumsByTypeAndName.set_Item(this.$type.$typeName, enumsByName);
        }
        enumsByName.set_Item(name, this);
        var enumsByValue;
        if (!(function() {
            var $anon$2 = {
                value: null
            };
            var $result$ = System.Enum().enumsByTypeAndValue.TryGetValue(this.$type.$typeName, $anon$2);
            enumsByValue = $anon$2.value;
            return $result$;
        }).call(this)) {
            enumsByValue = System.Collections.Generic.Dictionary$2$(System.Object, System.Enum).prototype.$ctor.$new();
            System.Enum().enumsByTypeAndValue.set_Item(this.$type.$typeName, enumsByValue);
        }
        enumsByValue.set_Item(value, this);
        var enums;
        if (!(function() {
            var $anon$3 = {
                value: null
            };
            var $result$ = System.Enum().enumsByType.TryGetValue(this.$type.$typeName, $anon$3);
            enums = $anon$3.value;
            return $result$;
        }).call(this)) {
            enums = System.Collections.Generic.List$1$(System.Enum).prototype.$ctor.$new();
            System.Enum().enumsByType.set_Item(this.$type.$typeName, enums);
        }
        enums.Add(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
    $t.GetEnumValues = function(type) {
        return System.Linq.Enumerable.ToArray(System.Enum, System.Enum().enumsByType.get_Item(type.$type.$typeName));
    };
    $p.GetValue = function() {
        return this.value;
    };
    $p.ToString = function() {
        return this.name;
    };
    $t.Parse = function(enumType, value) {
        return System.Enum().enumsByTypeAndName.get_Item(enumType.thisType.$typeName).get_Item(value);
    };
    $t.ToObject = function(enumType, value) {
        return System.Enum().enumsByTypeAndValue.get_Item(enumType.thisType.$typeName).get_Item(value);
    };
    $t.InternalToObject = function(enumType, value) {
        var enumsByValue = System.Enum().enumsByTypeAndValue.get_Item(enumType.$typeName);
        var result;
        if ((function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = enumsByValue.TryGetValue(value, $anon$1);
            result = $anon$1.value;
            return $result$;
        }).call(this)) {
            return result;
        }
        else {
            result = new Number(value);
            {
                for (var property in enumType.prototype) {
                    result[property] = enumType.prototype[property];
                }
            }
            {
                for (var property in System.Enum.prototype) {
                    result[property] = System.Enum.prototype[property];
                }
            }
            result.$type = enumType;
            result.value = value;
            return result;
        }
    };
    $p.Equals$2 = function(other) {
        return System.Object.Equals$1(this.value, other.value);
    };
    $p.Equals = function(obj) {
        if (null == obj)
            return false;
        if (this == obj)
            return true;
        if (obj.GetType() != this.GetType())
            return false;
        return this.Equals$2($cast(System.Object, obj));
    };
    $p.GetHashCode = function() {
        return (this.value != null ? this.value.GetHashCode() : 0);
    };
    $t.GetNames = function(enumType) {
        if (enumType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("enumType").InternalInit(new Error());
        enumType.thisType();
        return System.Linq.Enumerable.ToArray(String, System.Linq.Enumerable.Select(
            System.Enum, 
            String, 
            System.Enum().enumsByType.get_Item(enumType.thisType.$typeName), 
            $delegate(this, System.Func$2$(System.Enum, String), function(x) {
                return x.name;
            })
        ));
    };
}).call(null, System.Enum, System.Enum.prototype);
$mscorlib$AssemblyTypes.push(System.Enum);
System.Collections.Generic.EqualityComparer$1 = $define("System.Collections.Generic.EqualityComparer<T>", System.Object);
(System.Collections.Generic.EqualityComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.EqualityComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("EqualityComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.EqualityComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.EqualityComparer$1, System.Object, $arrayinit([System.Collections.Generic.IEqualityComparer$1, System.Collections.IEqualityComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("defaultComparer", System.Collections.Generic.EqualityComparer$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.EqualityComparer$1.prototype.get_Default, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.EqualityComparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateComparer", System.Collections.Generic.EqualityComparer$1.prototype.CreateComparer, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.EqualityComparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.EqualityComparer$1.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.EqualityComparer$1.prototype.GetHashCode$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.Generic.EqualityComparer$1.prototype.IndexOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LastIndexOf", System.Collections.Generic.EqualityComparer$1.prototype.LastIndexOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEqualityComparer.GetHashCode", System.Collections.Generic.EqualityComparer$1.prototype.System$Collections$IEqualityComparer$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEqualityComparer.Equals", System.Collections.Generic.EqualityComparer$1.prototype.System$Collections$IEqualityComparer$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.EqualityComparer$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Default", System.Collections.Generic.EqualityComparer$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.EqualityComparer$1.prototype.get_Default, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.EqualityComparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.EqualityComparer$1, arguments)();
    };
    window.System.Collections.Generic.EqualityComparer$1$ = $t.$;
    $t.get_Default = function() {
        var equalityComparer = System.Collections.Generic.EqualityComparer$1$(T).defaultComparer;
        if (equalityComparer == null) {
            equalityComparer = System.Collections.Generic.EqualityComparer$1$(T).CreateComparer();
            System.Collections.Generic.EqualityComparer$1$(T).defaultComparer = equalityComparer;
        }
        return equalityComparer;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.CreateComparer = function() {
        return System.Collections.Generic.DefaultComparer$1$(T).prototype.$ctor.$new();
    };
    $p.Equals$2 = function(x, y) {};
    $p.System$Collections$Generic$IEqualityComparer$1$Equals = $p.Equals$2;
    $p.GetHashCode$1 = function(obj) {};
    $p.System$Collections$Generic$IEqualityComparer$1$GetHashCode = $p.GetHashCode$1;
    $p.IndexOf = function(array, value, startIndex, count) {
        var num = startIndex + count;
        for (var index = startIndex; index < num; ++index) {
            if (this.Equals$2(array[index], value))
                return index;
        }
        return -1;
    };
    $p.LastIndexOf = function(array, value, startIndex, count) {
        var num = startIndex - count + 1;
        for (var index = startIndex; index >= num; --index) {
            if (this.Equals$2(array[index], value))
                return index;
        }
        return -1;
    };
    $p.System$Collections$IEqualityComparer$GetHashCode = function(obj) {
        if (obj == null)
            return 0;
        if (T.$GetType().IsInstanceOfType(obj))
            return this.GetHashCode$1($cast(System.Object, obj));
        throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEqualityComparer$GetHashCode = $p.System$Collections$IEqualityComparer$GetHashCode;
    $p.System$Collections$IEqualityComparer$Equals = function(x, y) {
        if (x == y)
            return true;
        if (x == null || y == null)
            return false;
        if (T.$GetType().IsInstanceOfType(x) && T.$GetType().IsInstanceOfType(y))
            return this.Equals$2($cast(System.Object, x), $cast(System.Object, y));
        throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEqualityComparer$Equals = $p.System$Collections$IEqualityComparer$Equals;
}).call(
    null, 
    System.Collections.Generic.EqualityComparer$1, 
    System.Collections.Generic.EqualityComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.EqualityComparer$1);
System.YieldIterator$1 = $define("System.YieldIterator<T>", System.Object);
(System.YieldIterator$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.YieldIterator`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldIterator", $arrayinit([], System.Attribute));this.$type.Init("System.YieldIterator`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.YieldIterator$1, System.Object, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Current$k__BackingField", T, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.YieldIterator$1.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Current", System.YieldIterator$1.prototype.set_Current, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.YieldIterator$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.YieldIterator$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.YieldIterator$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.YieldIterator$1.prototype.Dispose, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.YieldIterator$1.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.YieldIterator$1.prototype.Reset, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.YieldIterator$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.YieldIterator$1.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Current", System.YieldIterator$1.prototype.set_Current, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.YieldIterator$1.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.YieldIterator$1, arguments)();
    };
    window.System.YieldIterator$1$ = $t.$;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.$Current$k__BackingField = $default(T);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.get_Current = function() {return this.$Current$k__BackingField;};
    $p.set_Current = function(value) {this.$Current$k__BackingField = value;return value;};
    $p.System$Collections$Generic$IEnumerator$1$get_Current = $p.get_Current;
    $p.GetEnumerator = function() {};
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.MoveNext = function() {};
    $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.Dispose = function() {};
    $p.System$IDisposable$Dispose = $p.Dispose;
    $p.System$Collections$IEnumerator$get_Current = function() {
        return this.get_Current();
    };
    $p.System$Collections$IEnumerator$get_Current = $p.System$Collections$IEnumerator$get_Current;
    $p.Reset = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerator$Reset = $p.Reset;
}).call(
    null, 
    System.YieldIterator$1, 
    System.YieldIterator$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.YieldIterator$1);
System.Linq.Expressions.Expression = $define("System.Linq.Expressions.Expression", System.Object);
(System.Linq.Expressions.Expression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.Expression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Expression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.Expression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.Expressions.Expression, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$NodeType$k__BackingField", System.Linq.Expressions.ExpressionType, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_NodeType", System.Linq.Expressions.Expression.prototype.get_NodeType, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.ExpressionType, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NodeType", System.Linq.Expressions.Expression.prototype.set_NodeType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.Expression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.Expression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), (function() {var TDelegate = $definetypeparameter("TDelegate", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.Expression.prototype.Lambda$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Linq.Expressions.ParameterExpression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TDelegate = $definetypeparameter("TDelegate", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.Expression.prototype.Lambda$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Linq.Expressions.ParameterExpression), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.Expression.prototype.Lambda, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Linq.Expressions.ParameterExpression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.LambdaExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.Expression.prototype.Lambda$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.ParameterExpression), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.LambdaExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.IndexExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.IndexExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.IndexExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyName", String, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("property", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Property", System.Linq.Expressions.Expression.prototype.Property, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyAccessor", System.Reflection.MethodInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("PropertyOrField", System.Linq.Expressions.Expression.prototype.PropertyOrField, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyOrFieldName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parameter", System.Linq.Expressions.Expression.prototype.Parameter, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ParameterExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Variable", System.Linq.Expressions.Expression.prototype.Variable, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ParameterExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Variable", System.Linq.Expressions.Expression.prototype.Variable$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ParameterExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parameter", System.Linq.Expressions.Expression.prototype.Parameter$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ParameterExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeMemberAccess", System.Linq.Expressions.Expression.prototype.MakeMemberAccess, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Call", System.Linq.Expressions.Expression.prototype.Call$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MethodCallExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Call", System.Linq.Expressions.Expression.prototype.Call, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MethodCallExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Constant", System.Linq.Expressions.Expression.prototype.Constant, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ConstantExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Constant", System.Linq.Expressions.Expression.prototype.Constant$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ConstantExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeBinary", System.Linq.Expressions.Expression.prototype.MakeBinary$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("liftToNull", System.Boolean, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeBinary", System.Linq.Expressions.Expression.prototype.MakeBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("binaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeUnary", System.Linq.Expressions.Expression.prototype.MakeUnary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("unaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeUnary", System.Linq.Expressions.Expression.prototype.MakeUnary$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("unaryType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("New", System.Linq.Expressions.Expression.prototype.New$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("New", System.Linq.Expressions.Expression.prototype.New, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("New", System.Linq.Expressions.Expression.prototype.New$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("New", System.Linq.Expressions.Expression.prototype.New$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Bind", System.Linq.Expressions.Expression.prototype.Bind, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberAssignment, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Bind", System.Linq.Expressions.Expression.prototype.Bind$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyAccessor", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberAssignment, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MemberInit", System.Linq.Expressions.Expression.prototype.MemberInit$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", $array(System.Linq.Expressions.MemberBinding), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MemberInit", System.Linq.Expressions.Expression.prototype.MemberInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.MemberBinding), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Linq.Expressions.Expression.prototype.GetProperty, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("mi", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", $array(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", $array(System.Linq.Expressions.ElementInit), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.Expression.prototype.ListInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.ElementInit), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ElementInit", System.Linq.Expressions.Expression.prototype.ElementInit$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ElementInit, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ElementInit", System.Linq.Expressions.Expression.prototype.ElementInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ElementInit, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayInit", System.Linq.Expressions.Expression.prototype.NewArrayInit$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewArrayExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayInit", System.Linq.Expressions.Expression.prototype.NewArrayInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewArrayExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayBounds", System.Linq.Expressions.Expression.prototype.NewArrayBounds$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bounds", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewArrayExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("NewArrayBounds", System.Linq.Expressions.Expression.prototype.NewArrayBounds, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bounds", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.NewArrayExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TypeAs", System.Linq.Expressions.Expression.prototype.TypeAs, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TypeIs", System.Linq.Expressions.Expression.prototype.TypeIs, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.TypeBinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Default", System.Linq.Expressions.Expression.prototype.Default, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.DefaultExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeIndex", System.Linq.Expressions.Expression.prototype.MakeIndex, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.IndexExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.Expression.prototype.ArrayIndex$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexes", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MethodCallExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.Expression.prototype.ArrayIndex, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexes", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MethodCallExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.Expression.prototype.ArrayIndex$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Condition", System.Linq.Expressions.Expression.prototype.Condition, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ConditionalExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Condition", System.Linq.Expressions.Expression.prototype.Condition$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ConditionalExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Linq.Expressions.Expression.prototype.Invoke$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.InvocationExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Linq.Expressions.Expression.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.InvocationExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Field", System.Linq.Expressions.Expression.prototype.Field, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("field", System.Reflection.FieldInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Field", System.Linq.Expressions.Expression.prototype.Field$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Field", System.Linq.Expressions.Expression.prototype.Field$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldName", String, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Convert", System.Linq.Expressions.Expression.prototype.Convert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Convert", System.Linq.Expressions.Expression.prototype.Convert$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Linq.Expressions.Expression.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Linq.Expressions.Expression.prototype.Add$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.Expression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("NodeType", System.Linq.Expressions.ExpressionType, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NodeType", System.Linq.Expressions.Expression.prototype.get_NodeType, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.ExpressionType, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NodeType", System.Linq.Expressions.Expression.prototype.set_NodeType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.Expression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.get_NodeType = function() {return this.$NodeType$k__BackingField;};
    $p.set_NodeType = function(value) {this.$NodeType$k__BackingField = value;return value;};
    $p.Accept = function(visitor) {};
    $p.get_Type = function() {};
    $p.$ctor = function(nodeType) {
        this.$NodeType$k__BackingField = 0;
        System.Object.prototype.$ctor.call(this);
        this.set_NodeType(nodeType);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType) {
        return new $p.$ctor.$type(this, nodeType);
    };
    $t.Lambda$2 = function(TDelegate, body, parameters) {
        return System.Linq.Expressions.Expression.Lambda$3(
            TDelegate, 
            body, 
            null, 
            false, 
            parameters
        );
    };
    $t.Lambda$3 = function(TDelegate, body, name, tailCall, parameters) {
        return System.Linq.Expressions.Expression$1$(TDelegate).prototype.$ctor.$new(
            body, 
            name, 
            tailCall, 
            parameters
        );
    };
    $t.Lambda = function(delegateType, body, parameters) {
        return System.Linq.Expressions.Expression.Lambda$1(
            delegateType, 
            body, 
            null, 
            false, 
            parameters
        );
    };
    $t.Lambda$1 = function(delegateType, body, name, tailCall, parameters) {
        return null;
    };
    $t.Property$6 = function(instance, propertyName, args) {
        return System.Linq.Expressions.Expression.Property$4(instance, null, args);
    };
    $t.Property$4 = function(instance, indexer, args) {
        return System.Linq.Expressions.Expression.Property$3(instance, indexer, $cast($array(System.Linq.Expressions.Expression), args));
    };
    $t.Property$3 = function(instance, indexer, args) {
        return System.Linq.Expressions.IndexExpression.prototype.$ctor.$new(
            instance, 
            indexer, 
            null, 
            System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args)
        );
    };
    $t.Property$2 = function(expression, propertyName) {
        var property = expression.GetType().GetProperty(propertyName);
        return System.Linq.Expressions.Expression.Property$1(expression, property);
    };
    $t.Property$5 = function(expression, type, propertyName) {
        var property = type.GetProperty(propertyName);
        return System.Linq.Expressions.Expression.Property$1(expression, property);
    };
    $t.Property$1 = function(expression, property) {
        return System.Linq.Expressions.MemberExpression.Make(expression, property);
    };
    $t.Property = function(expression, propertyAccessor) {
        return System.Linq.Expressions.Expression.Property$1(expression, System.Linq.Expressions.Expression.GetProperty(propertyAccessor));
    };
    $t.PropertyOrField = function(expression, propertyOrFieldName) {
        var property1 = expression.get_Type().GetProperty$1(propertyOrFieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (property1 != null)
            return System.Linq.Expressions.Expression.Property$1(expression, property1);
        var field1 = expression.get_Type().GetField$1(propertyOrFieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field1 != null)
            return System.Linq.Expressions.Expression.Field(expression, field1);
        var property2 = expression.get_Type().GetProperty$1(propertyOrFieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().NonPublic.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (property2 != null)
            return System.Linq.Expressions.Expression.Property$1(expression, property2);
        var field2 = expression.get_Type().GetField$1(propertyOrFieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().NonPublic.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field2 != null)
            return System.Linq.Expressions.Expression.Field(expression, field2);
        else
            throw System.Exception.prototype.$ctor$1.$new("Not found: " + propertyOrFieldName).InternalInit(new Error());
    };
    $t.Parameter = function(type) {
        return System.Linq.Expressions.Expression.Parameter$1(type, null);
    };
    $t.Variable = function(type) {
        return System.Linq.Expressions.Expression.Variable$1(type, null);
    };
    $t.Variable$1 = function(type, name) {
        return System.Linq.Expressions.ParameterExpression.prototype.$ctor.$new(type, name);
    };
    $t.Parameter$1 = function(type, name) {
        return System.Linq.Expressions.ParameterExpression.prototype.$ctor.$new(type, name);
    };
    $t.MakeMemberAccess = function(target, member) {
        if (System.Reflection.FieldInfo.$GetType().IsInstanceOfType(member))
            return System.Linq.Expressions.FieldExpression.prototype.$ctor.$new(target, $cast(System.Reflection.MemberInfo, member));
        else
            if (System.Reflection.PropertyInfo.$GetType().IsInstanceOfType(member))
                return System.Linq.Expressions.PropertyExpression.prototype.$ctor.$new(target, $cast(System.Reflection.MemberInfo, member));
            else
                throw System.InvalidOperationException.prototype.$ctor$1.$new("Only field and property members are supported").InternalInit(new Error());
    };
    $t.Call$1 = function(target, method, args) {
        return System.Linq.Expressions.MethodCallExpression.prototype.$ctor.$new(target, method, args);
    };
    $t.Call = function(method, args) {
        return System.Linq.Expressions.MethodCallExpression.prototype.$ctor.$new(null, method, args);
    };
    $t.Constant = function(value) {
        return System.Linq.Expressions.ConstantExpression.prototype.$ctor.$new(value);
    };
    $t.Constant$1 = function(value, type) {
        return System.Linq.Expressions.ConstantExpression.prototype.$ctor$1.$new(value, type);
    };
    $t.MakeBinary$1 = function(nodeType, left, right, liftToNull, method) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor$1.$new(
            left, 
            right, 
            nodeType, 
            liftToNull, 
            method
        );
    };
    $t.MakeBinary = function(binaryType, left, right) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor$1.$new(
            left, 
            right, 
            binaryType, 
            false, 
            null
        );
    };
    $t.MakeUnary = function(unaryType, operand, type) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            unaryType, 
            operand, 
            null, 
            type
        );
    };
    $t.MakeUnary$1 = function(unaryType, operand, type, method) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            unaryType, 
            operand, 
            method, 
            type
        );
    };
    $t.New$1 = function(type) {
        var constructor = System.Linq.Enumerable.Single$1(System.Reflection.ConstructorInfo, type.GetConstructors(), $delegate(this, System.Func$2$(System.Reflection.ConstructorInfo, System.Boolean), function(x) {
            return x.GetParameters().length == 0;
        }));
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, $arrayinit(new Array(0), System.Linq.Expressions.Expression));
    };
    $t.New = function(constructor) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, $arrayinit(new Array(0), System.Linq.Expressions.Expression));
    };
    $t.New$3 = function(constructor, args) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, args);
    };
    $t.New$2 = function(constructor, args) {
        return System.Linq.Expressions.NewExpression.prototype.$ctor.$new(constructor, args);
    };
    $t.Bind = function(member, expression) {
        return System.Linq.Expressions.MemberAssignment.prototype.$ctor.$new(member, expression);
    };
    $t.Bind$1 = function(propertyAccessor, expression) {
        var memberInfo = System.Linq.Expressions.Expression.GetProperty(propertyAccessor);
        return System.Linq.Expressions.MemberAssignment.prototype.$ctor.$new(memberInfo, expression);
    };
    $t.MemberInit$1 = function(newExpression, bindings) {
        return System.Linq.Expressions.Expression.MemberInit(newExpression, $cast($array(System.Linq.Expressions.MemberBinding), bindings));
    };
    $t.MemberInit = function(newExpression, bindings) {
        return System.Linq.Expressions.MemberInitExpression.prototype.$ctor.$new(newExpression, System.Linq.Enumerable.ToList(System.Linq.Expressions.MemberBinding, bindings));
    };
    $t.GetProperty = function(mi) {
        var propertyName = mi.get_Name();
        if (String.prototype.StartsWith.call(propertyName, "set_"))
            propertyName = String.prototype.Substring.call(propertyName, 4, 0);
        return mi.get_DeclaringType().GetProperty(propertyName);
    };
    $t.ListInit$3 = function(newExpression, initializers) {
        return System.Linq.Expressions.Expression.ListInit$1(newExpression, $cast($array(System.Linq.Expressions.Expression), initializers));
    };
    $t.ListInit$1 = function(newExpression, initializers) {
        var method = newExpression.get_Type().GetMethod("Add");
        return System.Linq.Expressions.Expression.ListInit$4(newExpression, method, initializers);
    };
    $t.ListInit$5 = function(newExpression, addMethod, initializers) {
        if (addMethod == null)
            return System.Linq.Expressions.Expression.ListInit$1(newExpression, $cast($array(System.Linq.Expressions.Expression), initializers));
        return System.Linq.Expressions.Expression.ListInit$4(newExpression, addMethod, $cast($array(System.Linq.Expressions.Expression), initializers));
    };
    $t.ListInit$4 = function(newExpression, addMethod, initializers) {
        if (addMethod == null)
            return System.Linq.Expressions.Expression.ListInit$1(newExpression, initializers);
        var list = System.Linq.Enumerable.ToArray(System.Linq.Expressions.ElementInit, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Linq.Expressions.ElementInit, 
            initializers, 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Linq.Expressions.ElementInit), function(x) {
                return System.Linq.Expressions.Expression.ElementInit(addMethod, (function() {
                    var $obj$ = System.Collections.Generic.List$1$(System.Linq.Expressions.Expression).prototype.$ctor.$new();
                    $obj$.Add$1(x);
                    return $obj$;
                }).call(this));
            })
        ));
        return System.Linq.Expressions.Expression.ListInit$2(newExpression, list);
    };
    $t.ListInit$2 = function(newExpression, initializers) {
        return System.Linq.Expressions.Expression.ListInit(newExpression, $cast($array(System.Linq.Expressions.ElementInit), initializers));
    };
    $t.ListInit = function(newExpression, initializers) {
        return System.Linq.Expressions.ListInitExpression.prototype.$ctor.$new(newExpression, System.Linq.Enumerable.ToList(System.Linq.Expressions.ElementInit, initializers));
    };
    $t.ElementInit$1 = function(addMethod, args) {
        return System.Linq.Expressions.Expression.ElementInit(addMethod, $cast($array(System.Linq.Expressions.Expression), args));
    };
    $t.ElementInit = function(addMethod, args) {
        return System.Linq.Expressions.ElementInit.prototype.$ctor.$new(addMethod, System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $t.NewArrayInit$1 = function(type, initializers) {
        return System.Linq.Expressions.Expression.NewArrayInit(type, $cast($array(System.Linq.Expressions.Expression), initializers));
    };
    $t.NewArrayInit = function(type, initializers) {
        var expressions = System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, initializers);
        var i = 0;
        var list = null;
        if (list != null)
            expressions = list;
        return System.Linq.Expressions.NewArrayExpression.prototype.$ctor.$new(System.Linq.Expressions.ExpressionType().NewArrayInit, type.MakeArrayType(), System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, expressions));
    };
    $t.NewArrayBounds$1 = function(type, bounds) {
        return System.Linq.Expressions.Expression.NewArrayBounds(type, $cast($array(System.Linq.Expressions.Expression), bounds));
    };
    $t.NewArrayBounds = function(type, bounds) {
        var expressions = System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, bounds);
        var count = expressions.length;
        return System.Linq.Expressions.NewArrayExpression.prototype.$ctor.$new(System.Linq.Expressions.ExpressionType().NewArrayBounds, count != 1 ? type.MakeArrayType$1(count) : type.MakeArrayType(), System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, expressions));
    };
    $t.TypeAs = function(expression, type) {
        return System.Linq.Expressions.UnaryExpression.prototype.$ctor.$new(
            System.Linq.Expressions.ExpressionType().TypeAs, 
            expression, 
            null, 
            type
        );
    };
    $t.TypeIs = function(expression, type) {
        return System.Linq.Expressions.TypeBinaryExpression.prototype.$ctor.$new(expression, type, System.Linq.Expressions.ExpressionType().TypeIs);
    };
    $t.Default = function(type) {
        return System.Linq.Expressions.DefaultExpression.prototype.$ctor.$new(type);
    };
    $t.MakeIndex = function(target, indexer, args) {
        return System.Linq.Expressions.IndexExpression.prototype.$ctor.$new(
            target, 
            indexer, 
            indexer != null ? indexer.get_PropertyType() : null, 
            System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args)
        );
    };
    $t.ArrayIndex$2 = function(array, indexes) {
        return System.Linq.Expressions.Expression.ArrayIndex(array, $cast($array(System.Linq.Expressions.Expression), indexes));
    };
    $t.ArrayIndex = function(array, indexes) {
        var method = Array.$GetType().GetMethod("Get");
        return System.Linq.Expressions.Expression.Call$1(array, method, System.Linq.Enumerable.ToArray(System.Linq.Expressions.Expression, indexes));
    };
    $t.ArrayIndex$1 = function(array, index) {
        return System.Linq.Expressions.BinaryExpression.prototype.$ctor.$new(array, index, System.Linq.Expressions.ExpressionType().ArrayIndex);
    };
    $t.Condition = function(test, ifTrue, ifFalse) {
        return System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1.$new(
            test, 
            ifTrue, 
            ifFalse, 
            ifTrue.get_Type()
        );
    };
    $t.Condition$1 = function(test, ifTrue, ifFalse, type) {
        return System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1.$new(
            test, 
            ifTrue, 
            ifFalse, 
            type
        );
    };
    $t.Invoke$1 = function(expression, args) {
        return System.Linq.Expressions.Expression.Invoke(expression, $cast($array(System.Linq.Expressions.Expression), args));
    };
    $t.Invoke = function(expression, args) {
        return System.Linq.Expressions.InvocationExpression.prototype.$ctor.$new(expression, System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args), System.Object.$GetType());
    };
    $t.Field = function(expression, field) {
        return System.Linq.Expressions.MemberExpression.Make(expression, field);
    };
    $t.Field$1 = function(expression, fieldName) {
        var field = expression.get_Type().GetField$1(fieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field == null)
            field = expression.get_Type().GetField$1(fieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().NonPublic.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new(fieldName + ": " + $safeToString(expression.get_Type())).InternalInit(new Error());
        else
            return System.Linq.Expressions.Expression.Field(expression, field);
    };
    $t.Field$2 = function(expression, type, fieldName) {
        var field = type.GetField$1(fieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field == null)
            field = type.GetField$1(fieldName, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().IgnoreCase.GetValue() | System.Reflection.BindingFlags().Instance.GetValue()).GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().NonPublic.GetValue()).GetValue() | System.Reflection.BindingFlags().FlattenHierarchy.GetValue()));
        if (field == null)
            throw System.Exception.prototype.$ctor$1.$new(fieldName + ": " + $safeToString(type)).InternalInit(new Error());
        else
            return System.Linq.Expressions.Expression.Field(expression, field);
    };
    $t.Convert = function(expression, type) {
        return System.Linq.Expressions.Expression.Convert$1(expression, type, null);
    };
    $t.Convert$1 = function(expression, type, method) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.Add = function(left, right) {
        return System.Linq.Expressions.Expression.Add$1(left, right, null);
    };
    $t.Add$1 = function(left, right, method) {
        return System.Linq.Expressions.Expression.MakeBinary$1(
            System.Linq.Expressions.ExpressionType().Add, 
            left, 
            right, 
            false, 
            method
        );
    };
}).call(null, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.Expression);
System.Linq.Expressions.LambdaExpression = $define("System.Linq.Expressions.LambdaExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.LambdaExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.LambdaExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("LambdaExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.LambdaExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("parameters", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("delegateType", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("tailCall", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.LambdaExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.LambdaExpression.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Body", System.Linq.Expressions.LambdaExpression.prototype.get_Body, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Parameters", System.Linq.Expressions.LambdaExpression.prototype.get_Parameters, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DelegateType", System.Linq.Expressions.LambdaExpression.prototype.get_DelegateType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TailCall", System.Linq.Expressions.LambdaExpression.prototype.get_TailCall, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.LambdaExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", System.Collections.Generic.List$1$(System.Linq.Expressions.ParameterExpression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compile", System.Linq.Expressions.LambdaExpression.prototype.Compile, $arrayinit([], System.Reflection.ParameterInfo), System.Delegate, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.LambdaExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Linq.Expressions.ParameterExpression), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.LambdaExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.LambdaExpression.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Body", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Body", System.Linq.Expressions.LambdaExpression.prototype.get_Body, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Parameters", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Parameters", System.Linq.Expressions.LambdaExpression.prototype.get_Parameters, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("DelegateType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DelegateType", System.Linq.Expressions.LambdaExpression.prototype.get_DelegateType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TailCall", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TailCall", System.Linq.Expressions.LambdaExpression.prototype.get_TailCall, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.$ctor = function(delegateType, name, body, tailCall, parameters) {
        this.name = null;
        this.body = null;
        this.parameters = null;
        this.delegateType = null;
        this.tailCall = false;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Lambda);
        this.name = name;
        this.body = body;
        this.parameters = System.Linq.Enumerable.ToList(System.Linq.Expressions.ParameterExpression, parameters);
        this.delegateType = delegateType;
        this.tailCall = tailCall;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(delegateType, name, body, tailCall, parameters) {
        return new $p.$ctor.$type(
            this, 
            delegateType, 
            name, 
            body, 
            tailCall, 
            parameters
        );
    };
    $p.get_Type = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_Body = function() {
        return this.body;
    };
    $p.get_Parameters = function() {
        return this.parameters;
    };
    $p.get_DelegateType = function() {
        return this.delegateType;
    };
    $p.get_TailCall = function() {
        return this.tailCall;
    };
    $p.Update = function(body, parameters) {
        return this;
    };
    $p.Compile = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
}).call(null, System.Linq.Expressions.LambdaExpression, System.Linq.Expressions.LambdaExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.LambdaExpression);
System.Linq.Expressions.MemberExpression = $define("System.Linq.Expressions.MemberExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.MemberExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MemberExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.Expressions.MemberExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Member$k__BackingField", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberExpression.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberExpression.prototype.set_Member, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MemberExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Make", System.Linq.Expressions.MemberExpression.prototype.Make, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberExpression.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberExpression.prototype.set_Member, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Expression = function() {return this.$Expression$k__BackingField;};
    $p.set_Expression = function(value) {this.$Expression$k__BackingField = value;return value;};
    $p.get_Member = function() {return this.$Member$k__BackingField;};
    $p.set_Member = function(value) {this.$Member$k__BackingField = value;return value;};
    $p.$ctor = function(expression, member) {
        this.$Expression$k__BackingField = null;
        this.$Member$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().MemberAccess);
        this.set_Expression(expression);
        this.set_Member(member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMember(this);
    };
    $t.Make = function(expression, member) {
        if (member.get_MemberType().GetValue() == System.Reflection.MemberTypes().Field.GetValue()) {
            return System.Linq.Expressions.FieldExpression.prototype.$ctor.$new(expression, $cast(System.Reflection.MemberInfo, member));
        }
        else {
            return System.Linq.Expressions.PropertyExpression.prototype.$ctor.$new(expression, $cast(System.Reflection.MemberInfo, member));
        }
    };
    $p.Update = function(Expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberExpression, System.Linq.Expressions.MemberExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberExpression);
System.Linq.Expressions.MemberBinding = $define("System.Linq.Expressions.MemberBinding", System.Object);
(System.Linq.Expressions.MemberBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.MemberBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberBinding", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberBinding", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MemberBinding, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$BindingType$k__BackingField", System.Linq.Expressions.MemberBindingType, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Member$k__BackingField", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_BindingType", System.Linq.Expressions.MemberBinding.prototype.get_BindingType, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberBindingType, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BindingType", System.Linq.Expressions.MemberBinding.prototype.set_BindingType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.MemberBindingType, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberBinding.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberBinding.prototype.set_Member, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberBinding.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("BindingType", System.Linq.Expressions.MemberBindingType, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BindingType", System.Linq.Expressions.MemberBinding.prototype.get_BindingType, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberBindingType, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BindingType", System.Linq.Expressions.MemberBinding.prototype.set_BindingType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.MemberBindingType, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Linq.Expressions.MemberBinding.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Member", System.Linq.Expressions.MemberBinding.prototype.set_Member, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.get_BindingType = function() {return this.$BindingType$k__BackingField;};
    $p.set_BindingType = function(value) {this.$BindingType$k__BackingField = value;return value;};
    $p.get_Member = function() {return this.$Member$k__BackingField;};
    $p.set_Member = function(value) {this.$Member$k__BackingField = value;return value;};
    $p.$ctor = function(bindingType, member) {
        this.$BindingType$k__BackingField = 0;
        this.$Member$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
        this.set_BindingType(bindingType);
        this.set_Member(member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member) {
        return new $p.$ctor.$type(this, bindingType, member);
    };
}).call(null, System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberBinding);
System.Reflection.MethodBase = $define("System.Reflection.MethodBase", System.Reflection.MemberInfo);
(System.Reflection.MethodBase.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.MethodBase";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodBase", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.MethodBase", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Reflection.MethodBase, System.Reflection.MemberInfo, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("parameters", $array(System.Reflection.ParameterInfo), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Family.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.MethodBase.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CallingConvention", System.Reflection.MethodBase.prototype.get_CallingConvention, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.CallingConventions, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethodDefinition", System.Reflection.MethodBase.prototype.get_IsGenericMethodDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ContainsGenericParameters", System.Reflection.MethodBase.prototype.get_ContainsGenericParameters, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethod", System.Reflection.MethodBase.prototype.get_IsGenericMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityCritical", System.Reflection.MethodBase.prototype.get_IsSecurityCritical, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecuritySafeCritical", System.Reflection.MethodBase.prototype.get_IsSecuritySafeCritical, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityTransparent", System.Reflection.MethodBase.prototype.get_IsSecurityTransparent, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.MethodBase.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.MethodBase.prototype.get_IsPrivate, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.MethodBase.prototype.get_IsFamily, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.MethodBase.prototype.get_IsAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyAndAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyOrAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.MethodBase.prototype.get_IsStatic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFinal", System.Reflection.MethodBase.prototype.get_IsFinal, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVirtual", System.Reflection.MethodBase.prototype.get_IsVirtual, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsHideBySig", System.Reflection.MethodBase.prototype.get_IsHideBySig, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Reflection.MethodBase.prototype.get_IsAbstract, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.MethodBase.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsConstructor", System.Reflection.MethodBase.prototype.get_IsConstructor, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.MethodBase.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCurrentMethod", System.Reflection.MethodBase.prototype.GetCurrentMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodBase, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetParametersNoCopy", System.Reflection.MethodBase.prototype.GetParametersNoCopy, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetParameters", System.Reflection.MethodBase.prototype.GetParameters, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.MethodBase.prototype.Invoke$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericArguments", System.Reflection.MethodBase.prototype.GetGenericArguments, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.MethodBase.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodFromHandle", System.Reflection.MethodBase.prototype.GetMethodFromHandle, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeMethodHandle, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodBase, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodFromHandle", System.Reflection.MethodBase.prototype.GetMethodFromHandle$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeMethodHandle, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("declaringType", System.RuntimeTypeHandle, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodBase, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodBase.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Reflection.ParameterInfo), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.MethodAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.MethodBase.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CallingConvention", System.Reflection.CallingConventions, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CallingConvention", System.Reflection.MethodBase.prototype.get_CallingConvention, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.CallingConventions, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericMethodDefinition", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethodDefinition", System.Reflection.MethodBase.prototype.get_IsGenericMethodDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("ContainsGenericParameters", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ContainsGenericParameters", System.Reflection.MethodBase.prototype.get_ContainsGenericParameters, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericMethod", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericMethod", System.Reflection.MethodBase.prototype.get_IsGenericMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecurityCritical", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityCritical", System.Reflection.MethodBase.prototype.get_IsSecurityCritical, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecuritySafeCritical", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecuritySafeCritical", System.Reflection.MethodBase.prototype.get_IsSecuritySafeCritical, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSecurityTransparent", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSecurityTransparent", System.Reflection.MethodBase.prototype.get_IsSecurityTransparent, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.MethodBase.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPrivate", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.MethodBase.prototype.get_IsPrivate, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamily", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.MethodBase.prototype.get_IsFamily, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.MethodBase.prototype.get_IsAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyAndAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyAndAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyOrAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.MethodBase.prototype.get_IsFamilyOrAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsStatic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.MethodBase.prototype.get_IsStatic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFinal", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFinal", System.Reflection.MethodBase.prototype.get_IsFinal, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsVirtual", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVirtual", System.Reflection.MethodBase.prototype.get_IsVirtual, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsHideBySig", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsHideBySig", System.Reflection.MethodBase.prototype.get_IsHideBySig, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAbstract", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Reflection.MethodBase.prototype.get_IsAbstract, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.MethodBase.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsConstructor", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsConstructor", System.Reflection.MethodBase.prototype.get_IsConstructor, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.MethodBase.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MemberInfo.$StaticInitializer();
    };
    $p.$ctor = function(name, parameters, methodAttributes, attributes) {
        this.parameters = null;
        this.methodAttributes = 0;
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.parameters = parameters;
        this.methodAttributes = methodAttributes;
        {
            var $anon$1iterator = parameters;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var parameter = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                parameter.containingMember = this;
            }
        }
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, parameters, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
    };
    $p.get_Attributes = function() {
        return this.methodAttributes;
    };
    $p.get_CallingConvention = function() {
        return System.Reflection.CallingConventions().Standard;
    };
    $p.get_IsGenericMethodDefinition = function() {
        return false;
    };
    $p.get_ContainsGenericParameters = function() {
        return false;
    };
    $p.get_IsGenericMethod = function() {
        return false;
    };
    $p.get_IsSecurityCritical = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsSecuritySafeCritical = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsSecurityTransparent = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_IsPublic = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().Public.GetValue();
    };
    $p.get_IsPrivate = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().Private.GetValue();
    };
    $p.get_IsFamily = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().Family.GetValue();
    };
    $p.get_IsAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().Assembly.GetValue();
    };
    $p.get_IsFamilyAndAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().FamANDAssem.GetValue();
    };
    $p.get_IsFamilyOrAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().MemberAccessMask.GetValue())).GetValue() == System.Reflection.MethodAttributes().FamORAssem.GetValue();
    };
    $p.get_IsStatic = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().Static.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsFinal = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().Final.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsVirtual = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().Virtual.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsHideBySig = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().HideBySig.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsAbstract = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().Abstract.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsSpecialName = function() {
        return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().SpecialName.GetValue())).GetValue() != System.Reflection.MethodAttributes().PrivateScope.GetValue();
    };
    $p.get_IsConstructor = function() {
        if (System.Reflection.ConstructorInfo.$GetType().IsInstanceOfType(this) && !this.get_IsStatic())
            return (System.Enum.InternalToObject(System.Reflection.MethodAttributes, this.get_Attributes().GetValue() & System.Reflection.MethodAttributes().RTSpecialName.GetValue())).GetValue() == System.Reflection.MethodAttributes().RTSpecialName.GetValue();
        else
            return false;
    };
    $p.get_FullName = function() {
        return $safeToString($cast(String, this.get_DeclaringType().get_FullName())) + "." + $safeToString($cast(String, this.get_Name()));
    };
    $t.GetCurrentMethod = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetParametersNoCopy = function() {
        return this.GetParameters();
    };
    $p.GetParameters = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.ParameterInfo, this.parameters);
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {};
    $p.GetGenericArguments = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.Invoke = function(obj, parameters) {
        return this.Invoke$1(
            obj, 
            System.Reflection.BindingFlags().Default, 
            null, 
            parameters, 
            null
        );
    };
    $t.GetMethodFromHandle = function(handle) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetMethodFromHandle$1 = function(handle, declaringType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
}).call(null, System.Reflection.MethodBase, System.Reflection.MethodBase.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodBase);
window.$AnonymousType$1 = $define("<anonymous type: string Name, object Value>", System.Object);
($AnonymousType$1.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "$AnonymousType$1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("", $arrayinit([], System.Attribute));this.$type.Init("$AnonymousType$1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), $AnonymousType$1, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", $AnonymousType$1.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", $AnonymousType$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", $AnonymousType$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("Name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("Value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", $AnonymousType$1.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", $AnonymousType$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$Name$k__BackingField = null;
    $p.get_Name = function() {
        return this.$Name$k__BackingField;
    };
    $p.$Value$k__BackingField = null;
    $p.get_Value = function() {
        return this.$Value$k__BackingField;
    };
}).call(null, $AnonymousType$1, $AnonymousType$1.prototype);
$mscorlib$AssemblyTypes.push($AnonymousType$1);
System.Action = $define("System.Action", System.MulticastDelegate);
(System.Action.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action.prototype.Invoke, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $p.Invoke = function() {
        return this();
    };
}).call(null, System.Action, System.Action.prototype);
$mscorlib$AssemblyTypes.push(System.Action);
System.Action$1 = $define("System.Action<T>", System.MulticastDelegate);
(System.Action$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$1, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$1.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$1.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$1.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$1, arguments)();
    };
    window.System.Action$1$ = $t.$;
    $p.Invoke = function(arg) {
        return this(arg);
    };
}).call(
    null, 
    System.Action$1, 
    System.Action$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$1);
System.Action$2 = $define("System.Action<T1, T2>", System.MulticastDelegate);
(System.Action$2.$TypeInitializer = function($t, $p, T1, T2) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$2, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$2.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$2.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$2.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$2, arguments)();
    };
    window.System.Action$2$ = $t.$;
    $p.Invoke = function(arg1, arg2) {
        return this(arg1, arg2);
    };
}).call(
    null, 
    System.Action$2, 
    System.Action$2.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$2);
System.Action$3 = $define("System.Action<T1, T2, T3>", System.MulticastDelegate);
(System.Action$3.$TypeInitializer = function($t, $p, T1, T2, T3) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$3, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$3.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$3.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$3.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$3, arguments)();
    };
    window.System.Action$3$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3) {
        return this(arg1, arg2, arg3);
    };
}).call(
    null, 
    System.Action$3, 
    System.Action$3.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$3);
System.Action$4 = $define("System.Action<T1, T2, T3, T4>", System.MulticastDelegate);
(System.Action$4.$TypeInitializer = function($t, $p, T1, T2, T3, T4) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`4", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$4, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$4.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$4.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$4.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$4.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$4, arguments)();
    };
    window.System.Action$4$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4
        );
    };
}).call(
    null, 
    System.Action$4, 
    System.Action$4.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$4);
System.Action$5 = $define("System.Action<T1, T2, T3, T4, T5>", System.MulticastDelegate);
(System.Action$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`5", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$5, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$5.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$5.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$5.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$5.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$5, arguments)();
    };
    window.System.Action$5$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg5) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg5
        );
    };
}).call(
    null, 
    System.Action$5, 
    System.Action$5.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$5);
System.Action$6 = $define("System.Action<T1, T2, T3, T4, T5, T6>", System.MulticastDelegate);
(System.Action$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`6", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$6, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$6.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$6.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$6.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$6.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$6, arguments)();
    };
    window.System.Action$6$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg5, arg6) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg5, 
            arg6
        );
    };
}).call(
    null, 
    System.Action$6, 
    System.Action$6.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$6);
System.Action$7 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7>", System.MulticastDelegate);
(System.Action$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`7", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$7, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$7.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 8, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$7.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$7.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$7.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$7, arguments)();
    };
    window.System.Action$7$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg5, 
            arg6, 
            arg7
        );
    };
}).call(
    null, 
    System.Action$7, 
    System.Action$7.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$7);
System.Action$8 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7, T8>", System.MulticastDelegate);
(System.Action$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`8", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$8, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$8.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 8, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 9, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$8.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$8.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$8.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$8, arguments)();
    };
    window.System.Action$8$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg5, 
            arg6, 
            arg7, 
            arg8
        );
    };
}).call(
    null, 
    System.Action$8, 
    System.Action$8.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("T8", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$8);
System.Action$9 = $define("System.Action<T1, T2, T3, T4, T5, T6, T7, T8, T9>", System.MulticastDelegate);
(System.Action$9.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, T9) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Action`9";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Action", $arrayinit([], System.Attribute));this.$type.Init("System.Action`9", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Action$9, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Action$9.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 9, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 10, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Action$9.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Action$9.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Action$9.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Action$9, arguments)();
    };
    window.System.Action$9$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg5, 
            arg6, 
            arg7, 
            arg8, 
            arg9
        );
    };
}).call(
    null, 
    System.Action$9, 
    System.Action$9.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("T8", System.Object), 
    $definetypeparameter("T9", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Action$9);
System.AppDomain = $define("System.AppDomain", System.Object);
(System.AppDomain.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.AppDomain";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AppDomain", $arrayinit([], System.Attribute));this.$type.Init("System.AppDomain", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.AppDomain, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("instance", System.AppDomain, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.AppDomain.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentDomain", System.AppDomain.prototype.get_CurrentDomain, $arrayinit([], System.Reflection.ParameterInfo), System.AppDomain, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAssemblies", System.AppDomain.prototype.GetAssemblies, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.Assembly), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AppDomain.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("CurrentDomain", System.AppDomain, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentDomain", System.AppDomain.prototype.get_CurrentDomain, $arrayinit([], System.Reflection.ParameterInfo), System.AppDomain, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.instance = System.AppDomain.prototype.$ctor.$new();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.get_CurrentDomain = function() {
        return System.AppDomain().instance;
    };
    $p.GetAssemblies = function() {
        var array = $assemblies;
        var result = $arrayinit(new Array(array.length), System.Reflection.Assembly);
        for (var i = 0; i < result.length; i++) {
            var getAssembly = array[i];
            result[i] = getAssembly();
        }
        return result;
    };
}).call(null, System.AppDomain, System.AppDomain.prototype);
$mscorlib$AssemblyTypes.push(System.AppDomain);
System.ArgumentException = $define("System.ArgumentException", System.Exception);
(System.ArgumentException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ArgumentException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArgumentException", $arrayinit([], System.Attribute));this.$type.Init("System.ArgumentException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ArgumentException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArgumentException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.ArgumentException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.ArgumentException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.ArgumentException, System.ArgumentException.prototype);
$mscorlib$AssemblyTypes.push(System.ArgumentException);
System.ArgumentNullException = $define("System.ArgumentNullException", System.Exception);
(System.ArgumentNullException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ArgumentNullException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArgumentNullException", $arrayinit([], System.Attribute));this.$type.Init("System.ArgumentNullException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ArgumentNullException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArgumentNullException.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(message) {
        return new $p.$ctor.$type(this, message);
    };
}).call(null, System.ArgumentNullException, System.ArgumentNullException.prototype);
$mscorlib$AssemblyTypes.push(System.ArgumentNullException);
System.ArgumentOutOfRangeException = $define("System.ArgumentOutOfRangeException", System.Exception);
(System.ArgumentOutOfRangeException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ArgumentOutOfRangeException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArgumentOutOfRangeException", $arrayinit([], System.Attribute));this.$type.Init("System.ArgumentOutOfRangeException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ArgumentOutOfRangeException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArgumentOutOfRangeException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.ArgumentOutOfRangeException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.ArgumentOutOfRangeException.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("argument", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.ArgumentOutOfRangeException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$3 = function(argument, message) {
        System.Exception.prototype.$ctor$1.call(this, argument + ": " + message);
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(argument, message) {
        return new $p.$ctor$3.$type(this, argument, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.ArgumentOutOfRangeException, System.ArgumentOutOfRangeException.prototype);
$mscorlib$AssemblyTypes.push(System.ArgumentOutOfRangeException);
(Array.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Array";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Array", $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("Array");$obj$.set_BuiltIn(true);return $obj$;}).call(this)], System.Attribute));this.$type.Init("Array", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), Array, System.Object, $arrayinit([System.Collections.IList, System.Collections.ICollection, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", Array.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", Array.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", Array.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", Array.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy", Array.prototype.Copy, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy", Array.prototype.Copy$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ConstrainedCopy", Array.prototype.ConstrainedCopy, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy", Array.prototype.Copy$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int64, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Copy", Array.prototype.Copy$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceArray", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("sourceIndex", System.Int64, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationArray", Array, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("destinationIndex", System.Int64, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int64, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", Array.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", Array.prototype.CopyTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", Array.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", Array.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", Array.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", Array.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", Array.prototype.Clear$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", Array.prototype.Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", Array.prototype.IndexOf$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.Insert", Array.prototype.System$Collections$IList$Insert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.Remove", Array.prototype.System$Collections$IList$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.RemoveAt", Array.prototype.System$Collections$IList$RemoveAt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetUpperBound", Array.prototype.GetUpperBound, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("dimension", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetLowerBound", Array.prototype.GetLowerBound, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("dimension", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", Array.prototype.CreateInstance, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Array, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", Array.prototype.GetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", Array.prototype.SetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", Array.prototype.GetValue$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", Array.prototype.SetValue$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", Array.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", Array.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", Array.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", Array.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", Array.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", Array.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type();
    };
    $p.GetEnumerator = function() {
        return System.ArrayEnumerator.prototype.$ctor.$new(this);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.GetEnumerator;
    $p.get_Count = function() {
        return this.length;
    };
    $p.System$Collections$ICollection$get_Count = $p.get_Count;
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$ICollection$get_SyncRoot = $p.get_SyncRoot;
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.System$Collections$ICollection$get_IsSynchronized = $p.get_IsSynchronized;
    $t.Copy = function(sourceArray, destinationArray, length) {
        Array.Copy$2(
            sourceArray, 
            sourceArray.GetLowerBound(0), 
            destinationArray, 
            destinationArray.GetLowerBound(0), 
            length
        );
    };
    $t.Copy$2 = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        for (var i = sourceIndex, j = destinationIndex; i < sourceArray.length && j < destinationArray.length && i < sourceIndex + length; i++, j++) {
            destinationArray[j] = sourceArray[i];
        }
    };
    $t.ConstrainedCopy = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        Array.Copy$2(
            sourceArray, 
            sourceIndex, 
            destinationArray, 
            destinationIndex, 
            length
        );
    };
    $t.Copy$1 = function(sourceArray, destinationArray, length) {
        Array.Copy(sourceArray, destinationArray, length);
    };
    $t.Copy$3 = function(sourceArray, sourceIndex, destinationArray, destinationIndex, length) {
        Array.Copy$2(
            sourceArray, 
            sourceIndex, 
            destinationArray, 
            destinationIndex, 
            length
        );
    };
    $p.CopyTo = function(array, index) {
        Array.Copy$2(
            this, 
            index, 
            array, 
            0, 
            array.length
        );
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.CopyTo$1 = function(array, index) {
        this.CopyTo(array, index);
    };
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.System$Collections$IList$get_IsReadOnly = $p.get_IsReadOnly;
    $p.get_IsFixedSize = function() {
        return true;
    };
    $p.System$Collections$IList$get_IsFixedSize = $p.get_IsFixedSize;
    $p.Add = function(value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Add = $p.Add;
    $p.Contains = function(value) {
        return this.indexOf(value) >= 0;
    };
    $p.System$Collections$IList$Contains = $p.Contains;
    $t.Clear$1 = function(array, startIndex, length) {
        for (var i = startIndex; i < startIndex + length; i++) {
            array[i] = null;
        }
    };
    $p.Clear = function() {
        Array.Clear$1(this, 0, this.length);
    };
    $p.System$Collections$IList$Clear = $p.Clear;
    $t.IndexOf$1 = function(array, value) {
        return array.indexOf(value);
    };
    $p.System$Collections$IList$Insert = function(index, value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Insert = $p.System$Collections$IList$Insert;
    $p.System$Collections$IList$Remove = function(value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$Remove = $p.System$Collections$IList$Remove;
    $p.System$Collections$IList$RemoveAt = function(index) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IList$RemoveAt = $p.System$Collections$IList$RemoveAt;
    $p.GetUpperBound = function(dimension) {
        return this.length - 1;
    };
    $p.GetLowerBound = function(dimension) {
        return 0;
    };
    $t.CreateInstance = function(elementType, length) {
        if (elementType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("elementType").InternalInit(new Error());
        if (length < 0)
            throw System.ArgumentOutOfRangeException.prototype.$ctor$3.$new("length", "ArgumentOutOfRange_NeedNonNegNum").InternalInit(new Error());
        return $arrayinit(new Array(length), elementType.thisType);
    };
    $p.GetValue = function(index) {
        return this[index];
    };
    $p.SetValue = function(value, index) {
        this[index] = value;
    };
    $p.GetValue$1 = function(index) {
        return this[index];
    };
    $p.SetValue$1 = function(value, index) {
        this[index] = value;
    };
}).call(null, Array, Array.prototype);
$mscorlib$AssemblyTypes.push(Array);
System.ArrayEnumerator$1 = $define("System.ArrayEnumerator<T>", System.Object);
(System.ArrayEnumerator$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ArrayEnumerator`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArrayEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.ArrayEnumerator`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ArrayEnumerator$1, System.Object, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator$1.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.ArrayEnumerator$1.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.ArrayEnumerator$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.ArrayEnumerator$1.prototype.Dispose, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.ArrayEnumerator$1.prototype.Reset, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArrayEnumerator$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator$1.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.ArrayEnumerator$1.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.ArrayEnumerator$1, arguments)();
    };
    window.System.ArrayEnumerator$1$ = $t.$;
    $p.$ctor = function(array) {
        this.array = null;
        this.index = -1;
        System.Object.prototype.$ctor.call(this);
        this.array = array;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(array) {
        return new $p.$ctor.$type(this, array);
    };
    $p.get_Current = function() {
        return this.array[this.index];
    };
    $p.System$Collections$Generic$IEnumerator$1$get_Current = $p.get_Current;
    $p.System$Collections$IEnumerator$get_Current = function() {
        return this.get_Current();
    };
    $p.System$Collections$IEnumerator$get_Current = $p.System$Collections$IEnumerator$get_Current;
    $p.MoveNext = function() {
        this.index++;
        return this.index < this.array.length;
    };
    $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    $p.Dispose = function() {};
    $p.System$IDisposable$Dispose = $p.Dispose;
    $p.Reset = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerator$Reset = $p.Reset;
}).call(
    null, 
    System.ArrayEnumerator$1, 
    System.ArrayEnumerator$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.ArrayEnumerator$1);
System.ArrayEnumerator = $define("System.ArrayEnumerator", System.Object);
(System.ArrayEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ArrayEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ArrayEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.ArrayEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ArrayEnumerator, System.Object, $arrayinit([System.Collections.IEnumerator], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.ArrayEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.ArrayEnumerator.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.ArrayEnumerator.prototype.Dispose, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.ArrayEnumerator.prototype.Reset, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ArrayEnumerator.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.ArrayEnumerator.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.ArrayEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(array) {
        this.array = null;
        this.index = -1;
        System.Object.prototype.$ctor.call(this);
        this.array = array;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(array) {
        return new $p.$ctor.$type(this, array);
    };
    $p.get_Current = function() {
        return this.array[this.index];
    };
    $p.System$Collections$IEnumerator$get_Current = function() {
        return this.get_Current();
    };
    $p.System$Collections$IEnumerator$get_Current = $p.System$Collections$IEnumerator$get_Current;
    $p.MoveNext = function() {
        this.index++;
        return this.index < this.array.length;
    };
    $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
    $p.Dispose = function() {};
    $p.Reset = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IEnumerator$Reset = $p.Reset;
}).call(null, System.ArrayEnumerator, System.ArrayEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.ArrayEnumerator);
System.Attribute = $define("System.Attribute", System.Object);
(System.Attribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Attribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Attribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(32767);$obj$.set_AllowMultiple(false);$obj$.set_Inherited(true);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Attribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Attribute, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Attribute.prototype.IsDefined, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("element", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Attribute.prototype.IsDefined$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("element", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Attribute.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.IsDefined = function(element, attributeType) {
        return System.Attribute.IsDefined$1(element, attributeType, true);
    };
    $t.IsDefined$1 = function(element, attributeType, inherit) {
        if (element == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("element").InternalInit(new Error());
        if (attributeType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("attributeType").InternalInit(new Error());
        if (!System.Attribute.$GetType().IsAssignableFrom(attributeType))
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument must subclass Attribute").InternalInit(new Error());
        return System.Linq.Enumerable.Any(System.Object, element.GetCustomAttributes$1(attributeType, inherit));
    };
}).call(null, System.Attribute, System.Attribute.prototype);
$mscorlib$AssemblyTypes.push(System.Attribute);
System.AttributeTargets = $define("System.AttributeTargets", System.Enum);
(System.AttributeTargets.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.AttributeTargets";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AttributeTargets", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.AttributeTargets", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.AttributeTargets, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Module", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Class", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Struct", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Enum", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Constructor", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Method", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Property", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 128, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Field", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 256, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Event", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 512, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Interface", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Parameter", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2048, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Delegate", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReturnValue", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GenericParameter", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16384, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("All", System.AttributeTargets, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32767, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AttributeTargets.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Assembly = $p.$ctor.$new("Assembly", 1);
        $t.Module = $p.$ctor.$new("Module", 2);
        $t.Class = $p.$ctor.$new("Class", 4);
        $t.Struct = $p.$ctor.$new("Struct", 8);
        $t.Enum = $p.$ctor.$new("Enum", 16);
        $t.Constructor = $p.$ctor.$new("Constructor", 32);
        $t.Method = $p.$ctor.$new("Method", 64);
        $t.Property = $p.$ctor.$new("Property", 128);
        $t.Field = $p.$ctor.$new("Field", 256);
        $t.Event = $p.$ctor.$new("Event", 512);
        $t.Interface = $p.$ctor.$new("Interface", 1024);
        $t.Parameter = $p.$ctor.$new("Parameter", 2048);
        $t.Delegate = $p.$ctor.$new("Delegate", 4096);
        $t.ReturnValue = $p.$ctor.$new("ReturnValue", 8192);
        $t.GenericParameter = $p.$ctor.$new("GenericParameter", 16384);
        $t.All = $p.$ctor.$new("All", System.Enum.InternalToObject(System.AttributeTargets, System.AttributeTargets().GenericParameter.GetValue() | System.AttributeTargets().ReturnValue.GetValue()) | System.AttributeTargets().Delegate | System.AttributeTargets().Parameter | System.AttributeTargets().Interface | System.AttributeTargets().Event | System.AttributeTargets().Field | System.AttributeTargets().Property | System.AttributeTargets().Method | System.AttributeTargets().Constructor | System.AttributeTargets().Enum | System.AttributeTargets().Struct | System.AttributeTargets().Class | System.AttributeTargets().Module | System.AttributeTargets().Assembly);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.AttributeTargets, System.AttributeTargets.prototype);
$mscorlib$AssemblyTypes.push(System.AttributeTargets);
System.AttributeUsageAttribute = $define("System.AttributeUsageAttribute", System.Attribute);
(System.AttributeUsageAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.AttributeUsageAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AttributeUsageAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(4);$obj$.set_Inherited(true);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.AttributeUsageAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.AttributeUsageAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$ValidOn$k__BackingField", System.AttributeTargets, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$AllowMultiple$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Inherited$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValidOn", System.AttributeUsageAttribute.prototype.get_ValidOn, $arrayinit([], System.Reflection.ParameterInfo), System.AttributeTargets, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ValidOn", System.AttributeUsageAttribute.prototype.set_ValidOn, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.AttributeTargets, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_AllowMultiple", System.AttributeUsageAttribute.prototype.get_AllowMultiple, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AllowMultiple", System.AttributeUsageAttribute.prototype.set_AllowMultiple, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Inherited", System.AttributeUsageAttribute.prototype.get_Inherited, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Inherited", System.AttributeUsageAttribute.prototype.set_Inherited, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.AttributeUsageAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("validOn", System.AttributeTargets, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("ValidOn", System.AttributeTargets, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValidOn", System.AttributeUsageAttribute.prototype.get_ValidOn, $arrayinit([], System.Reflection.ParameterInfo), System.AttributeTargets, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ValidOn", System.AttributeUsageAttribute.prototype.set_ValidOn, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.AttributeTargets, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("AllowMultiple", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AllowMultiple", System.AttributeUsageAttribute.prototype.get_AllowMultiple, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AllowMultiple", System.AttributeUsageAttribute.prototype.set_AllowMultiple, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Inherited", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Inherited", System.AttributeUsageAttribute.prototype.get_Inherited, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Inherited", System.AttributeUsageAttribute.prototype.set_Inherited, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.$ctor = function(validOn) {
        this.$ValidOn$k__BackingField = 0;
        this.$AllowMultiple$k__BackingField = false;
        this.$Inherited$k__BackingField = false;
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(validOn) {
        return new $p.$ctor.$type(this, validOn);
    };
    $p.get_ValidOn = function() {return this.$ValidOn$k__BackingField;};
    $p.set_ValidOn = function(value) {this.$ValidOn$k__BackingField = value;return value;};
    $p.get_AllowMultiple = function() {return this.$AllowMultiple$k__BackingField;};
    $p.set_AllowMultiple = function(value) {this.$AllowMultiple$k__BackingField = value;return value;};
    $p.get_Inherited = function() {return this.$Inherited$k__BackingField;};
    $p.set_Inherited = function(value) {this.$Inherited$k__BackingField = value;return value;};
}).call(null, System.AttributeUsageAttribute, System.AttributeUsageAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.AttributeUsageAttribute);
System.Boolean = $define("bool", System.ValueType);
(System.Boolean.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Boolean";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Boolean", $arrayinit([], System.Attribute));this.$type.Init("System.Boolean", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Boolean, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Boolean.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Boolean.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Boolean.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Parse = function(s) {
        return false;
    };
    $p.ToString = function() {
        return System.Object.prototype.ToString.call(this);
    };
}).call(null, System.Boolean, System.Boolean.prototype);
$mscorlib$AssemblyTypes.push(System.Boolean);
System.Byte = $define("byte", System.ValueType);
(System.Byte.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Byte";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Byte", $arrayinit([], System.Attribute));this.$type.Init("System.Byte", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Byte, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Byte.prototype.Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Byte.prototype.LocaleFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Byte.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Byte.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Byte, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Byte.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Byte, System.Byte.prototype);
$mscorlib$AssemblyTypes.push(System.Byte);
System.Char = $define("char", System.ValueType);
(System.Char.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Char";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Char", $arrayinit([], System.Attribute));this.$type.Init("System.Char", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Char, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("op_Explicit", System.Char.prototype.op_Explicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("ch", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsWhiteSpace", System.Char.prototype.IsWhiteSpace, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDigit", System.Char.prototype.IsDigit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Char.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.op_Explicit = function(ch) {
        return null;
    };
    $t.IsWhiteSpace = function(c) {
        return /\s/.test(c);
    };
    $t.IsDigit = function(c) {
        return /^\d+$/.test(c);
    };
}).call(null, System.Char, System.Char.prototype);
$mscorlib$AssemblyTypes.push(System.Char);
System.Collections.Comparer = $define("System.Collections.Comparer", System.Object);
(System.Collections.Comparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Comparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Comparer", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Collections.Comparer, System.Object, $arrayinit([System.Collections.IComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Collections.Comparer, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DefaultInvariant", System.Collections.Comparer, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_compareInfo", System.Globalization.CompareInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CompareInfoName", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "CompareInfo", $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Collections.Comparer.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Comparer.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("b", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Comparer.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Comparer.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.Default = System.Collections.Comparer.prototype.$ctor.$new(System.Globalization.CultureInfo().CurrentCulture);
        $t.DefaultInvariant = System.Collections.Comparer.prototype.$ctor.$new(System.Globalization.CultureInfo().InvariantCulture);
        $t.CompareInfoName = "CompareInfo";
    };
    $p.$ctor = function(culture) {
        this.m_compareInfo = null;
        System.Object.prototype.$ctor.call(this);
        if (culture == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("culture").InternalInit(new Error());
        this.m_compareInfo = culture.get_CompareInfo();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(culture) {
        return new $p.$ctor.$type(this, culture);
    };
    $p.$ctor = function() {
        this.m_compareInfo = null;
        System.Object.prototype.$ctor.call(this);
        this.m_compareInfo = null;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(a, b) {
        if (a == b)
            return 0;
        if (a == null)
            return -1;
        if (b == null)
            return 1;
        if (this.m_compareInfo != null) {
            var string1 = (function() {
                var $as$ = a;
                if (!System.Type.prototype.IsInstanceOfType.call(String.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            var string2 = (function() {
                var $as$ = b;
                if (!System.Type.prototype.IsInstanceOfType.call(String.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (string1 != null && string2 != null)
                return this.m_compareInfo.Compare(string1, string2);
        }
        var comparable1 = (function() {
            var $as$ = a;
            if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (comparable1 != null)
            return comparable1.System$IComparable$CompareTo(b);
        var comparable2 = (function() {
            var $as$ = b;
            if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (comparable2 != null)
            return -comparable2.System$IComparable$CompareTo(a);
        else
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument_ImplementIComparable").InternalInit(new Error());
    };
    $p.System$Collections$IComparer$Compare = $p.Compare;
}).call(null, System.Collections.Comparer, System.Collections.Comparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Comparer);
System.Collections.ComparisonComparer = $define("System.Collections.ComparisonComparer", System.Object);
(System.Collections.ComparisonComparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.ComparisonComparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ComparisonComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.ComparisonComparer", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.ComparisonComparer, System.Object, $arrayinit([System.Collections.IComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_comparison", System.Collections.Generic.Comparison$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.ComparisonComparer.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.ComparisonComparer.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1$(System.Object), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(comparison) {
        this._comparison = null;
        System.Object.prototype.$ctor.call(this);
        this._comparison = comparison;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(comparison) {
        return new $p.$ctor.$type(this, comparison);
    };
    $p.Compare = function(x, y) {
        return this._comparison(x, y);
    };
    $p.System$Collections$IComparer$Compare = $p.Compare;
}).call(null, System.Collections.ComparisonComparer, System.Collections.ComparisonComparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.ComparisonComparer);
System.Collections.Generic.Comparer$1 = $define("System.Collections.Generic.Comparer<T>", System.Object);
(System.Collections.Generic.Comparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Comparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Comparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.Comparer$1, System.Object, $arrayinit([System.Collections.Generic.IComparer$1, System.Collections.IComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("defaultComparer", System.Collections.Generic.Comparer$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.Comparer$1.prototype.get_Default, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.Comparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Collections.Generic.Comparer$1.prototype.Create, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.Comparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateComparer", System.Collections.Generic.Comparer$1.prototype.CreateComparer, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.Comparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.Comparer$1.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IComparer.Compare", System.Collections.Generic.Comparer$1.prototype.System$Collections$IComparer$Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Comparer$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Default", System.Collections.Generic.Comparer$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Default", System.Collections.Generic.Comparer$1.prototype.get_Default, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.Comparer$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.Comparer$1, arguments)();
    };
    window.System.Collections.Generic.Comparer$1$ = $t.$;
    $t.get_Default = function() {
        var comparer = System.Collections.Generic.Comparer$1$(T).defaultComparer;
        if (comparer == null) {
            comparer = System.Collections.Generic.Comparer$1$(T).CreateComparer();
            System.Collections.Generic.Comparer$1$(T).defaultComparer = comparer;
        }
        return comparer;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Create = function(comparison) {
        if (comparison == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("comparison").InternalInit(new Error());
        else
            return System.Collections.Generic.ComparisonComparer$1$(T).prototype.$ctor.$new(comparison);
    };
    $t.CreateComparer = function() {
        var genericParameter1 = T.$GetType();
        if (System.IComparable$1$(T).$GetType().IsAssignableFrom(genericParameter1))
            return $cast(System.Object, System.Activator.CreateInstance$2(System.Collections.Generic.GenericComparer$1$(System.Int32).$GetType(), $arrayinit([genericParameter1], System.Object)));
        return System.Collections.Generic.ObjectComparer$1$(T).prototype.$ctor.$new();
    };
    $p.Compare = function(x, y) {};
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.System$Collections$IComparer$Compare = function(x, y) {
        if (x == null) {
            return y != null ? -1 : 0;
        }
        else {
            if (y == null)
                return 1;
            if (T.$GetType().IsInstanceOfType(x) && T.$GetType().IsInstanceOfType(y))
                return this.Compare($cast(System.Object, x), $cast(System.Object, y));
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument_InvalidArgumentForComparison").InternalInit(new Error());
        }
    };
    $p.System$Collections$IComparer$Compare = $p.System$Collections$IComparer$Compare;
}).call(
    null, 
    System.Collections.Generic.Comparer$1, 
    System.Collections.Generic.Comparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Comparer$1);
System.Collections.Generic.ComparisonComparer$1 = $define("System.Collections.Generic.ComparisonComparer<T>", System.Collections.Generic.Comparer$1);
(System.Collections.Generic.ComparisonComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.ComparisonComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ComparisonComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.ComparisonComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.ComparisonComparer$1, System.Collections.Generic.Comparer$1, $arrayinit([System.Collections.Generic.IComparer$1, System.Collections.IComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_comparison", System.Collections.Generic.Comparison$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.ComparisonComparer$1.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.ComparisonComparer$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Collections.Generic.Comparer$1$(T).$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.ComparisonComparer$1, arguments)();
    };
    window.System.Collections.Generic.ComparisonComparer$1$ = $t.$;
    $p.$ctor = function(comparison) {
        this._comparison = null;
        System.Collections.Generic.Comparer$1$(T).prototype.$ctor.call(this);
        this._comparison = comparison;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(comparison) {
        return new $p.$ctor.$type(this, comparison);
    };
    $p.Compare = function(x, y) {
        return this._comparison(x, y);
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
}).call(
    null, 
    System.Collections.Generic.ComparisonComparer$1, 
    System.Collections.Generic.ComparisonComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ComparisonComparer$1);
System.Collections.DictionaryEntry = $define("System.Collections.DictionaryEntry", System.ValueType);
(System.Collections.DictionaryEntry.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Collections.DictionaryEntry";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DictionaryEntry", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.DictionaryEntry", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Collections.DictionaryEntry, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_key", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("_value", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.DictionaryEntry.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.DictionaryEntry.prototype.set_Key, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.DictionaryEntry.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.DictionaryEntry.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.DictionaryEntry.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.DictionaryEntry.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.DictionaryEntry.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.DictionaryEntry.prototype.set_Key, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.DictionaryEntry.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.DictionaryEntry.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.get_Key = function() {
        return this._key;
    };
    $p.set_Key = function(value) {
        this._key = value;
        return value;
    };
    $p.get_Value = function() {
        return this._value;
    };
    $p.set_Value = function(value) {
        this._value = value;
        return value;
    };
    $p.$ctor$1 = function(key, value) {
        this._key = null;
        this._value = null;
        System.ValueType.prototype.$ctor.call(this);
        this._key = key;
        this._value = value;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(key, value) {
        return new $p.$ctor$1.$type(this, key, value);
    };
}).call(null, System.Collections.DictionaryEntry, System.Collections.DictionaryEntry.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.DictionaryEntry);
System.Collections.Generic.Comparison$1 = $define("System.Collections.Generic.Comparison<T>", System.MulticastDelegate);
(System.Collections.Generic.Comparison$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Collections.Generic.Comparison`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Comparison", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Comparison`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Collections.Generic.Comparison$1, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Collections.Generic.Comparison$1.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Collections.Generic.Comparison$1.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Collections.Generic.Comparison$1.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Comparison$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.Comparison$1, arguments)();
    };
    window.System.Collections.Generic.Comparison$1$ = $t.$;
    $p.Invoke = function(x, y) {
        return this(x, y);
    };
}).call(
    null, 
    System.Collections.Generic.Comparison$1, 
    System.Collections.Generic.Comparison$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Comparison$1);
System.Collections.Generic.DefaultComparer$1 = $define("System.Collections.Generic.DefaultComparer<T>", System.Collections.Generic.EqualityComparer$1);
(System.Collections.Generic.DefaultComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Collections.Generic.EqualityComparer$1;
    $p.$typeName = "System.Collections.Generic.DefaultComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DefaultComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.DefaultComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.DefaultComparer$1, System.Collections.Generic.EqualityComparer$1, $arrayinit([System.Collections.Generic.IEqualityComparer$1, System.Collections.IEqualityComparer], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.DefaultComparer$1.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.DefaultComparer$1.prototype.GetHashCode$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.DefaultComparer$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Collections.Generic.EqualityComparer$1$(T).$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.DefaultComparer$1, arguments)();
    };
    window.System.Collections.Generic.DefaultComparer$1$ = $t.$;
    $p.$ctor = function() {
        System.Collections.Generic.EqualityComparer$1$(T).prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Equals$2 = function(x, y) {
        var xObj = x;
        var yObj = y;
        if (xObj == yObj)
            return true;
        if (xObj == null || yObj == null)
            return false;
        return xObj.Equals(yObj);
    };
    $p.System$Collections$Generic$IEqualityComparer$1$Equals = $p.Equals$2;
    $p.GetHashCode$1 = function(obj) {
        return obj.GetHashCode();
    };
    $p.System$Collections$Generic$IEqualityComparer$1$GetHashCode = $p.GetHashCode$1;
}).call(
    null, 
    System.Collections.Generic.DefaultComparer$1, 
    System.Collections.Generic.DefaultComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.DefaultComparer$1);
System.Collections.Generic.Dictionary$2 = $define("System.Collections.Generic.Dictionary<TKey, TValue>", System.Object);
(System.Collections.Generic.Dictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Dictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Dictionary", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Dictionary`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Dictionary$2, System.Object, $arrayinit([System.Collections.Generic.IReadOnlyDictionary$2, System.Collections.Generic.IReadOnlyCollection$1, System.Collections.IDictionary, System.Collections.ICollection, System.Collections.Generic.IDictionary$2, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("buckets", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("keys", System.Collections.Generic.Dictionary$2.DictionaryKeys, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.Dictionary$2.prototype.Add$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.Dictionary$2.prototype.Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ContainsKey", System.Collections.Generic.Dictionary$2.prototype.ContainsKey, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.Dictionary$2.prototype.Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TryGetValue", System.Collections.Generic.Dictionary$2.prototype.TryGetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.Dictionary$2.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.Dictionary$2.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.Dictionary$2.prototype.get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.Dictionary$2.prototype.get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.Dictionary$2.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.prototype.CopyTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(System.Collections.Generic.KeyValuePair$2$(TKey, TValue)), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.set_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.Dictionary$2.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.Contains", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.Add", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.GetEnumerator", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IDictionaryEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.Remove", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Collections.Generic.Dictionary$2.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.Collections.Generic.Dictionary$2.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("capacity", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$5", System.Collections.Generic.Dictionary$2.prototype.$ctor$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("capacity", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.Dictionary$2.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.IDictionary$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$4", System.Collections.Generic.Dictionary$2.prototype.$ctor$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.IDictionary$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.Dictionary$2.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.Dictionary$2.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.Dictionary$2.prototype.get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.Dictionary$2.prototype.get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.set_Item", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.Keys", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IDictionary.Values", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IDictionary.get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$IDictionary$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.Dictionary$2.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Keys", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.get_Values", System.Collections.Generic.Dictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.Dictionary$2, arguments)();
    };
    window.System.Collections.Generic.Dictionary$2$ = $t.$;
    $p.$ctor = function() {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor$2.call(this, System.Collections.Generic.EqualityComparer$1$(TKey).get_Default());
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$2 = function(comparer) {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Object.prototype.$ctor.call(this);
        this.keys = System.Collections.Generic.Dictionary$2$(TKey, TValue).DictionaryKeys$().prototype.$ctor.$new(this);
        this.comparer = comparer;
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(comparer) {
        return new $p.$ctor$2.$type(this, comparer);
    };
    $p.$ctor$3 = function(capacity) {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor.call(this);
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(capacity) {
        return new $p.$ctor$3.$type(this, capacity);
    };
    $p.$ctor$5 = function(capacity, comparer) {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor$2.call(this, comparer || System.Collections.Generic.EqualityComparer$1$(TKey).get_Default());
    };
    $p.$ctor$5.$type = $t;
    $p.$ctor$5.$new = function(capacity, comparer) {
        return new $p.$ctor$5.$type(this, capacity, comparer);
    };
    $p.$ctor$1 = function(dictionary) {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor$4.call(this, dictionary, null);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(dictionary) {
        return new $p.$ctor$1.$type(this, dictionary);
    };
    $p.$ctor$4 = function(dictionary, comparer) {
        this.storage = new Object();
        this.buckets = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$()).prototype.$ctor.$new();
        this.comparer = null;
        this.count = 0;
        this.keys = null;
        System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor$5.call(this, dictionary != null ? dictionary.System$Collections$Generic$ICollection$1$get_Count() : 0, comparer);
        if (dictionary == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("dictionary").InternalInit(new Error());
        {
            var $anon$1iterator = $cast(System.Collections.Generic.IDictionary$2$(TKey, TValue), dictionary);
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var keyValuePair = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.Add$1(keyValuePair.get_Key(), keyValuePair.get_Value());
            }
        }
    };
    $p.$ctor$4.$type = $t;
    $p.$ctor$4.$new = function(dictionary, comparer) {
        return new $p.$ctor$4.$type(this, dictionary, comparer);
    };
    $p.Add$1 = function(key, value) {
        if (key == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("key").InternalInit(new Error());
        var hashCode = this.comparer.System$Collections$Generic$IEqualityComparer$1$GetHashCode(key).ToString();
        var bucket = this.storage[hashCode];
        if (bucket == null) {
            bucket = System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$().prototype.$ctor.$new(hashCode);
            this.storage[hashCode] = bucket;
            this.buckets.Add(bucket);
        }
        var existingItem = System.Linq.Enumerable.SingleOrDefault$1(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), bucket.Items, $delegate(this, System.Func$2$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), System.Boolean), function(x) {
            return this.comparer.System$Collections$Generic$IEqualityComparer$1$Equals(x.get_Key(), key);
        }));
        if (existingItem == null) {
            bucket.Items.Add(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$().prototype.$ctor.$new(key, value));
            this.count++;
        }
        else {
            existingItem.set_Value(value);
        }
    };
    $p.System$Collections$Generic$IDictionary$2$Add = $p.Add$1;
    $p.Remove = function(key) {
        var hashCode = this.comparer.System$Collections$Generic$IEqualityComparer$1$GetHashCode(key).ToString();
        var bucket = this.storage[hashCode];
        if (bucket != null) {
            var items = System.Linq.Enumerable.Where(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), bucket.Items, $delegate(this, System.Func$2$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), System.Boolean), function(x) {
                return this.comparer.System$Collections$Generic$IEqualityComparer$1$Equals(x.get_Key(), key);
            })).System$Collections$Generic$IEnumerable$1$GetEnumerator();
            if (items.System$Collections$IEnumerator$MoveNext()) {
                var item = items.System$Collections$Generic$IEnumerator$1$get_Current();
                items.System$IDisposable$Dispose();
                bucket.Items.Remove(item);
                if (bucket.Items.get_Count() == 0) {
                    delete this.storage[hashCode];
                }
                this.count--;
                return true;
            }
        }
        return false;
    };
    $p.System$Collections$Generic$IDictionary$2$Remove = $p.Remove;
    $p.ContainsKey = function(key) {
        var hashCode = this.comparer.System$Collections$Generic$IEqualityComparer$1$GetHashCode(key).ToString();
        var bucket = this.storage[hashCode];
        if (bucket == null)
            return false;
        return System.Linq.Enumerable.Any$1(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), bucket.Items, $delegate(this, System.Func$2$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), System.Boolean), function(x) {
            return this.comparer.System$Collections$Generic$IEqualityComparer$1$Equals(x.get_Key(), key);
        }));
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey = $p.ContainsKey;
    $p.System$Collections$Generic$IDictionary$2$ContainsKey = $p.ContainsKey;
    $p.Clear = function() {
        {
            var $anon$1iterator = this.buckets;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var bucket = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                var hashCode = bucket.get_HashCode();
                delete this.storage[hashCode];
            }
        }
        this.count = 0;
    };
    $p.System$Collections$IDictionary$Clear = $p.Clear;
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.TryGetValue = function(key, value) {
        var hashCode = this.comparer.System$Collections$Generic$IEqualityComparer$1$GetHashCode(key).ToString();
        var bucket = this.storage[hashCode];
        if (bucket == null) {
            value.value = $default(TValue);
            return false;
        }
        var items = bucket.Items.GetEnumerator();
        if (!items.System$Collections$IEnumerator$MoveNext()) {
            value.value = $default(TValue);
            return false;
        }
        value.value = items.System$Collections$Generic$IEnumerator$1$get_Current().get_Value();
        items.System$IDisposable$Dispose();
        return true;
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue = $p.TryGetValue;
    $p.System$Collections$Generic$IDictionary$2$TryGetValue = $p.TryGetValue;
    $p.get_Item = function(key) {
        var result;
        if (!(function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = this.TryGetValue(key, $anon$1);
            result = $anon$1.value;
            return $result$;
        }).call(this))
            throw System.Collections.Generic.KeyNotFoundException.prototype.$ctor$1.$new(key.ToString()).InternalInit(new Error());
        return result;
    };
    $p.set_Item = function(key, value) {
        this.Add$1(key, value);
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Item = $p.get_Item;
    $p.System$Collections$Generic$IDictionary$2$get_Item = $p.get_Item;
    $p.System$Collections$Generic$IDictionary$2$set_Item = $p.set_Item;
    $p.get_Keys = function() {
        return this.keys;
    };
    $p.System$Collections$Generic$IDictionary$2$get_Keys = $p.get_Keys;
    $p.get_Values = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$IDictionary$2$get_Values = $p.get_Values;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.get_Count = function() {
        return this.count;
    };
    $p.System$Collections$Generic$IReadOnlyCollection$1$get_Count = $p.get_Count;
    $p.System$Collections$ICollection$get_Count = $p.get_Count;
    $p.System$Collections$Generic$ICollection$1$get_Count = $p.get_Count;
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$ICollection$get_SyncRoot = $p.get_SyncRoot;
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.System$Collections$ICollection$get_IsSynchronized = $p.get_IsSynchronized;
    $p.CopyTo = function(array, index) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.GetEnumerator = function() {
        return System.Collections.Generic.Dictionary$2$(TKey, TValue).YieldEnumerator$GetEnumerator$().prototype.$ctor.$new(this);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.System$Collections$IDictionary$get_IsReadOnly = $p.get_IsReadOnly;
    $p.System$Collections$Generic$ICollection$1$get_IsReadOnly = $p.get_IsReadOnly;
    $p.Add = function(item) {
        this.Add$1(item.get_Key(), item.get_Value());
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
    $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains = function(item) {
        return this.ContainsKey(item.get_Key()) && this.get_Item(item.get_Key()).Equals(item.get_Value());
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {};
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove = function(item) {
        return false;
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.System$Collections$Generic$ICollection$System$Collections$Generic$KeyValuePair$TKey$TValue$$$Remove;
    $p.System$Collections$IDictionary$get_Item = function(key) {
        return this.get_Item($cast(System.Object, key));
    };
    $p.System$Collections$IDictionary$set_Item = function(key, value) {
        this.set_Item($cast(System.Object, key), $cast(System.Object, value));
    };
    $p.System$Collections$IDictionary$get_Item = $p.System$Collections$IDictionary$get_Item;
    $p.System$Collections$IDictionary$set_Item = $p.System$Collections$IDictionary$set_Item;
    $p.System$Collections$IDictionary$get_Keys = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$get_Keys = $p.System$Collections$IDictionary$get_Keys;
    $p.System$Collections$IDictionary$get_Values = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$get_Values = $p.System$Collections$IDictionary$get_Values;
    $p.get_IsFixedSize = function() {
        return false;
    };
    $p.System$Collections$IDictionary$get_IsFixedSize = $p.get_IsFixedSize;
    $p.System$Collections$IDictionary$Contains = function(key) {
        return false;
    };
    $p.System$Collections$IDictionary$Contains = $p.System$Collections$IDictionary$Contains;
    $p.System$Collections$IDictionary$Add = function(key, value) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$Add = $p.System$Collections$IDictionary$Add;
    $p.System$Collections$IDictionary$GetEnumerator = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$IDictionary$GetEnumerator = $p.System$Collections$IDictionary$GetEnumerator;
    $p.System$Collections$IDictionary$Remove = function(key) {
        this.Remove($cast(System.Object, key));
    };
    $p.System$Collections$IDictionary$Remove = $p.System$Collections$IDictionary$Remove;
    $p.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys = function() {
        return this.get_Keys();
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys = $p.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Keys;
    $p.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values = function() {
        return this.get_Values();
    };
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Values = $p.System$Collections$Generic$IReadOnlyDictionary$TKey$TValue$$get_Values;
    $t.Bucket = $define("System.Collections.Generic.Dictionary<TKey, TValue>.Bucket", System.Object);
    ($t.Bucket.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.Bucket";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Bucket", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Dictionary`2.Bucket", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Dictionary$2.Bucket, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$HashCode$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Items", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Public, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.get_HashCode, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.set_HashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.Bucket.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("hashCode", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("HashCode", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.get_HashCode, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_HashCode", System.Collections.Generic.Dictionary$2.Bucket.prototype.set_HashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.Bucket, arguments)();
        };
        this.Bucket$ = $t.$;
        $p.get_HashCode = function() {return this.$HashCode$k__BackingField;};
        $p.set_HashCode = function(value) {this.$HashCode$k__BackingField = value;return value;};
        $p.$ctor = function(hashCode) {
            this.Items = System.Collections.Generic.List$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$()).prototype.$ctor.$new();
            this.$HashCode$k__BackingField = null;
            System.Object.prototype.$ctor.call(this);
            this.set_HashCode(hashCode);
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(hashCode) {
            return new $p.$ctor.$type(this, hashCode);
        };
    }).call($t, $t.Bucket, $t.Bucket.prototype);
    $mscorlib$AssemblyTypes.push($t.Bucket);
    $t.BucketItem = $define("System.Collections.Generic.Dictionary<TKey, TValue>.BucketItem", System.Object);
    ($t.BucketItem.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.BucketItem";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BucketItem", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Dictionary`2.BucketItem", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Dictionary$2.BucketItem, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Key$k__BackingField", TKey, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Value$k__BackingField", TValue, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Key, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.BucketItem.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Key", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Key, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Collections.Generic.Dictionary$2.BucketItem.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.BucketItem, arguments)();
        };
        this.BucketItem$ = $t.$;
        $p.get_Key = function() {return this.$Key$k__BackingField;};
        $p.set_Key = function(value) {this.$Key$k__BackingField = value;return value;};
        $p.get_Value = function() {return this.$Value$k__BackingField;};
        $p.set_Value = function(value) {this.$Value$k__BackingField = value;return value;};
        $p.$ctor = function(key, value) {
            this.$Key$k__BackingField = $default(TKey);
            this.$Value$k__BackingField = $default(TValue);
            System.Object.prototype.$ctor.call(this);
            this.set_Key(key);
            this.set_Value(value);
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(key, value) {
            return new $p.$ctor.$type(this, key, value);
        };
    }).call($t, $t.BucketItem, $t.BucketItem.prototype);
    $mscorlib$AssemblyTypes.push($t.BucketItem);
    $t.DictionaryKeys = $define("System.Collections.Generic.Dictionary<TKey, TValue>.DictionaryKeys", System.Object);
    ($t.DictionaryKeys.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.DictionaryKeys";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DictionaryKeys", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Dictionary`2.DictionaryKeys", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Dictionary$2.DictionaryKeys, System.Object, $arrayinit([System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.CopyTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(TKey), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.Dictionary$2.DictionaryKeys.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.DictionaryKeys, arguments)();
        };
        this.DictionaryKeys$ = $t.$;
        $p.$ctor = function(dictionary) {
            this.dictionary = null;
            System.Object.prototype.$ctor.call(this);
            this.dictionary = dictionary;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(dictionary) {
            return new $p.$ctor.$type(this, dictionary);
        };
        $p.Contains = function(item) {
            return this.dictionary.ContainsKey(item);
        };
        $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
        $p.get_Count = function() {
            return this.dictionary.get_Count();
        };
        $p.System$Collections$Generic$ICollection$1$get_Count = $p.get_Count;
        $p.GetEnumerator = function() {
            return System.Linq.Enumerable.Select(
                System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), 
                TKey, 
                System.Linq.Enumerable.SelectMany(
                    System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$(), 
                    System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), 
                    this.dictionary.buckets, 
                    $delegate(this, System.Func$2$(System.Collections.Generic.Dictionary$2$(TKey, TValue).Bucket$(), System.Collections.Generic.IEnumerable$1$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$())), function(x) {
                        return x.Items;
                    })
                ), 
                $delegate(this, System.Func$2$(System.Collections.Generic.Dictionary$2$(TKey, TValue).BucketItem$(), TKey), function(x) {
                    return x.get_Key();
                })
            ).System$Collections$Generic$IEnumerable$1$GetEnumerator();
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.System$Collections$IEnumerable$GetEnumerator = function() {
            return this.GetEnumerator();
        };
        $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
        $p.get_SyncRoot = function() {
            return this.dictionary.get_SyncRoot();
        };
        $p.get_IsSynchronized = function() {
            return this.dictionary.get_IsSynchronized();
        };
        $p.CopyTo = function(array, index) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.get_IsReadOnly = function() {
            return true;
        };
        $p.System$Collections$Generic$ICollection$1$get_IsReadOnly = $p.get_IsReadOnly;
        $p.Add = function(item) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
        $p.Clear = function() {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
        $p.CopyTo$1 = function(array, arrayIndex) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
        $p.Remove = function(item) {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    }).call($t, $t.DictionaryKeys, $t.DictionaryKeys.prototype);
    $mscorlib$AssemblyTypes.push($t.DictionaryKeys);
    $t.YieldEnumerator$GetEnumerator = $define("System.Collections.Generic.Dictionary<TKey, TValue>.YieldEnumerator$GetEnumerator", System.YieldIterator$1);
    ($t.YieldEnumerator$GetEnumerator.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Collections.Generic.Dictionary`2.YieldEnumerator$GetEnumerator";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$GetEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Dictionary`2.YieldEnumerator$GetEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Dictionary$2.YieldEnumerator$GetEnumerator, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("bucket", System.Collections.Generic.Dictionary$2.Bucket, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("bucket$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", System.Collections.Generic.Dictionary$2.BucketItem, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Dictionary$2.YieldEnumerator$GetEnumerator.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.Generic.Dictionary$2.YieldEnumerator$GetEnumerator.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Collections.Generic.Dictionary$2.YieldEnumerator$GetEnumerator.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Dictionary$2.YieldEnumerator$GetEnumerator.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Dictionary$2$(TKey, TValue), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(System.Collections.Generic.KeyValuePair$2$(TKey, TValue)).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$GetEnumerator, arguments)();
        };
        this.YieldEnumerator$GetEnumerator$ = $t.$;
        $p.$ctor = function($this) {
            this.$this = null;
            this.$isStarted = false;
            this.$state = 0;
            this.bucket = null;
            this.bucket$enumerator = null;
            this.item = null;
            this.item$enumerator = null;
            System.YieldIterator$1$(System.Collections.Generic.KeyValuePair$2$(TKey, TValue)).prototype.$ctor.call(this);
            this.$this = $this;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this) {
            return new $p.$ctor.$type(this, $this);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.bucket$enumerator = this.$this.buckets.GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.bucket$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.bucket = this.bucket$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.item$enumerator = this.bucket.Items.GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(System.Collections.Generic.KeyValuePair$2$(TKey, TValue).prototype.$ctor$1.$new(this.item.get_Key(), this.item.get_Value()));
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Collections.Generic.Dictionary$2$(TKey, TValue).YieldEnumerator$GetEnumerator$().prototype.$ctor.$new(this.$this);
            }
        };
    }).call($t, $t.YieldEnumerator$GetEnumerator, $t.YieldEnumerator$GetEnumerator.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$GetEnumerator);
}).call(
    null, 
    System.Collections.Generic.Dictionary$2, 
    System.Collections.Generic.Dictionary$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TValue", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Dictionary$2);
System.Collections.Generic.GenericComparer$1 = $define("System.Collections.Generic.GenericComparer<T>", System.Collections.Generic.Comparer$1);
(System.Collections.Generic.GenericComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.GenericComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GenericComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.GenericComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.GenericComparer$1, System.Collections.Generic.Comparer$1, $arrayinit([System.Collections.Generic.IComparer$1, System.Collections.IComparer], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.GenericComparer$1.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.GenericComparer$1.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.GenericComparer$1.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.GenericComparer$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Collections.Generic.Comparer$1$(T).$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.GenericComparer$1, arguments)();
    };
    window.System.Collections.Generic.GenericComparer$1$ = $t.$;
    $p.$ctor = function() {
        System.Collections.Generic.Comparer$1$(T).prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(x, y) {
        if ($cast(T, x) != null) {
            if ($cast(T, y) != null)
                return x.System$IComparable$1$CompareTo(y);
            else
                return 1;
        }
        else
            return $cast(T, y) != null ? -1 : 0;
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.Equals = function(obj) {
        return System.Collections.Generic.GenericComparer$1$(T).$GetType().IsInstanceOfType(obj);
    };
    $p.GetHashCode = function() {
        return this.GetType().get_Name().GetHashCode();
    };
}).call(
    null, 
    System.Collections.Generic.GenericComparer$1, 
    System.Collections.Generic.GenericComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.GenericComparer$1);
System.Collections.Generic.HashSet$1 = $define("System.Collections.Generic.HashSet<T>", System.Object);
(System.Collections.Generic.HashSet$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.HashSet`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("HashSet", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.HashSet`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.HashSet$1, System.Object, $arrayinit([System.Collections.Generic.ISet$1, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("storage", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.HashSet$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.HashSet$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.HashSet$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.HashSet$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.HashSet$1.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.HashSet$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.HashSet$1.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.ICollection<T>.Add", System.Collections.Generic.HashSet$1.prototype.System$Collections$Generic$ICollection$T$$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.HashSet$1.prototype.Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.HashSet$1.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.HashSet$1.prototype.CopyTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.HashSet$1.prototype.Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.HashSet$1.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("UnionWith", System.Collections.Generic.HashSet$1.prototype.UnionWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IntersectWith", System.Collections.Generic.HashSet$1.prototype.IntersectWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ExceptWith", System.Collections.Generic.HashSet$1.prototype.ExceptWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SymmetricExceptWith", System.Collections.Generic.HashSet$1.prototype.SymmetricExceptWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSubsetOf", System.Collections.Generic.HashSet$1.prototype.IsSubsetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSupersetOf", System.Collections.Generic.HashSet$1.prototype.IsSupersetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSupersetOf", System.Collections.Generic.HashSet$1.prototype.IsProperSupersetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSubsetOf", System.Collections.Generic.HashSet$1.prototype.IsProperSubsetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Overlaps", System.Collections.Generic.HashSet$1.prototype.Overlaps, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetEquals", System.Collections.Generic.HashSet$1.prototype.SetEquals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.HashSet$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.HashSet$1.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Collections.Generic.HashSet$1.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.Collections.Generic.HashSet$1.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("collection", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(T), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.HashSet$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.HashSet$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.HashSet$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.HashSet$1.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.HashSet$1, arguments)();
    };
    window.System.Collections.Generic.HashSet$1$ = $t.$;
    $p.$ctor = function() {
        this.storage = null;
        System.Object.prototype.$ctor.call(this);
        this.storage = System.Collections.Generic.Dictionary$2$(T, T).prototype.$ctor.$new();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(source) {
        this.storage = null;
        System.Collections.Generic.HashSet$1$(T).prototype.$ctor.call(this);
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.Add(item);
            }
        }
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(source) {
        return new $p.$ctor$1.$type(this, source);
    };
    $p.$ctor$2 = function(comparer) {
        this.storage = null;
        System.Object.prototype.$ctor.call(this);
        if (comparer == null)
            comparer = System.Collections.Generic.EqualityComparer$1$(T).get_Default();
        this.storage = System.Collections.Generic.Dictionary$2$(T, T).prototype.$ctor$2.$new(comparer);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(comparer) {
        return new $p.$ctor$2.$type(this, comparer);
    };
    $p.$ctor$3 = function(collection, comparer) {
        this.storage = null;
        System.Collections.Generic.HashSet$1$(T).prototype.$ctor$2.call(this, comparer);
        if (collection == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("collection").InternalInit(new Error());
        {
            var $anon$1iterator = collection;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.Add(item);
            }
        }
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(collection, comparer) {
        return new $p.$ctor$3.$type(this, collection, comparer);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.get_Count = function() {
        return this.storage.get_Count();
    };
    $p.System$Collections$Generic$ICollection$1$get_Count = $p.get_Count;
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.CopyTo = function(array, index) {
        var i = 0;
        {
            var $anon$1iterator = this;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                array[i++] = item;
            }
        }
    };
    $p.GetEnumerator = function() {
        return this.storage.get_Keys().System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.System$Collections$Generic$ICollection$1$get_IsReadOnly = $p.get_IsReadOnly;
    $p.System$Collections$Generic$ICollection$T$$Add = function(item) {
        this.storage.set_Item(item, item);
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.System$Collections$Generic$ICollection$T$$Add;
    $p.Clear = function() {
        this.storage.Clear();
    };
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.Contains = function(item) {
        return this.storage.ContainsKey(item);
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {
        var i = 0;
        {
            var $anon$1iterator = this;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                array[i++] = item;
            }
        }
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.Remove = function(item) {
        return this.storage.Remove(item);
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    $p.Add = function(item) {
        if (!this.storage.ContainsKey(item)) {
            this.storage.set_Item(item, item);
            return true;
        }
        return false;
    };
    $p.UnionWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$UnionWith = $p.UnionWith;
    $p.IntersectWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IntersectWith = $p.IntersectWith;
    $p.ExceptWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$ExceptWith = $p.ExceptWith;
    $p.SymmetricExceptWith = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$SymmetricExceptWith = $p.SymmetricExceptWith;
    $p.IsSubsetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsSubsetOf = $p.IsSubsetOf;
    $p.IsSupersetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsSupersetOf = $p.IsSupersetOf;
    $p.IsProperSupersetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsProperSupersetOf = $p.IsProperSupersetOf;
    $p.IsProperSubsetOf = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$IsProperSubsetOf = $p.IsProperSubsetOf;
    $p.Overlaps = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$Overlaps = $p.Overlaps;
    $p.SetEquals = function(other) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.System$Collections$Generic$ISet$1$SetEquals = $p.SetEquals;
}).call(
    null, 
    System.Collections.Generic.HashSet$1, 
    System.Collections.Generic.HashSet$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.HashSet$1);
System.Collections.Generic.ICollection$1 = $define("System.Collections.Generic.ICollection<T>", System.Object);
(System.Collections.Generic.ICollection$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.ICollection`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICollection", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.ICollection`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.ICollection$1, null, $arrayinit([System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.ICollection$1.prototype.System$Collections$Generic$ICollection$1$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.ICollection$1, arguments)();
    };
    window.System.Collections.Generic.ICollection$1$ = $t.$;
    $p.System$Collections$Generic$ICollection$1$get_Count = function() {};
    $p.System$Collections$Generic$ICollection$1$get_IsReadOnly = function() {};
    $p.System$Collections$Generic$ICollection$1$Add = function(item) {};
    $p.System$Collections$Generic$ICollection$1$Clear = function() {};
    $p.System$Collections$Generic$ICollection$1$Contains = function(item) {};
    $p.System$Collections$Generic$ICollection$1$CopyTo = function(array, arrayIndex) {};
    $p.System$Collections$Generic$ICollection$1$Remove = function(item) {};
}).call(
    null, 
    System.Collections.Generic.ICollection$1, 
    System.Collections.Generic.ICollection$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ICollection$1);
System.Collections.Generic.IComparer$1 = $define("System.Collections.Generic.IComparer<T>", System.Object);
(System.Collections.Generic.IComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IComparer$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.IComparer$1.prototype.System$Collections$Generic$IComparer$1$Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IComparer$1, arguments)();
    };
    window.System.Collections.Generic.IComparer$1$ = $t.$;
    $p.System$Collections$Generic$IComparer$1$Compare = function(x, y) {};
}).call(
    null, 
    System.Collections.Generic.IComparer$1, 
    System.Collections.Generic.IComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IComparer$1);
System.Collections.Generic.IDictionary$2 = $define("System.Collections.Generic.IDictionary<TKey, TValue>", System.Object);
(System.Collections.Generic.IDictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IDictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionary", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IDictionary`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IDictionary$2, null, $arrayinit([System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ContainsKey", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$ContainsKey, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TryGetValue", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$TryGetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.ICollection$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.IDictionary$2.prototype.System$Collections$Generic$IDictionary$2$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.ICollection$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IDictionary$2, arguments)();
    };
    window.System.Collections.Generic.IDictionary$2$ = $t.$;
    $p.System$Collections$Generic$IDictionary$2$get_Item = function(key) {};
    $p.System$Collections$Generic$IDictionary$2$set_Item = function(key, value) {};
    $p.System$Collections$Generic$IDictionary$2$get_Keys = function() {};
    $p.System$Collections$Generic$IDictionary$2$get_Values = function() {};
    $p.System$Collections$Generic$IDictionary$2$ContainsKey = function(key) {};
    $p.System$Collections$Generic$IDictionary$2$Add = function(key, value) {};
    $p.System$Collections$Generic$IDictionary$2$Remove = function(key) {};
    $p.System$Collections$Generic$IDictionary$2$TryGetValue = function(key, value) {};
}).call(
    null, 
    System.Collections.Generic.IDictionary$2, 
    System.Collections.Generic.IDictionary$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TValue", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IDictionary$2);
System.Collections.Generic.IEnumerable$1 = $define("System.Collections.Generic.IEnumerable<T>", System.Object);
(System.Collections.Generic.IEnumerable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEnumerable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IEnumerable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IEnumerable$1, null, $arrayinit([System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.IEnumerable$1.prototype.System$Collections$Generic$IEnumerable$1$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IEnumerable$1, arguments)();
    };
    window.System.Collections.Generic.IEnumerable$1$ = $t.$;
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = function() {};
}).call(
    null, 
    System.Collections.Generic.IEnumerable$1, 
    System.Collections.Generic.IEnumerable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEnumerable$1);
System.Collections.Generic.IEnumerator$1 = $define("System.Collections.Generic.IEnumerator<T>", System.Object);
(System.Collections.Generic.IEnumerator$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEnumerator`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IEnumerator`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IEnumerator$1, null, $arrayinit([System.Collections.IEnumerator, System.IDisposable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.IEnumerator$1.prototype.System$Collections$Generic$IEnumerator$1$get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.IEnumerator$1.prototype.System$Collections$Generic$IEnumerator$1$get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IEnumerator$1, arguments)();
    };
    window.System.Collections.Generic.IEnumerator$1$ = $t.$;
    $p.System$Collections$Generic$IEnumerator$1$get_Current = function() {};
}).call(
    null, 
    System.Collections.Generic.IEnumerator$1, 
    System.Collections.Generic.IEnumerator$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEnumerator$1);
System.Collections.Generic.IEqualityComparer$1 = $define("System.Collections.Generic.IEqualityComparer<T>", System.Object);
(System.Collections.Generic.IEqualityComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IEqualityComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEqualityComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IEqualityComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IEqualityComparer$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.IEqualityComparer$1.prototype.System$Collections$Generic$IEqualityComparer$1$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.IEqualityComparer$1.prototype.System$Collections$Generic$IEqualityComparer$1$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IEqualityComparer$1, arguments)();
    };
    window.System.Collections.Generic.IEqualityComparer$1$ = $t.$;
    $p.System$Collections$Generic$IEqualityComparer$1$Equals = function(x, y) {};
    $p.System$Collections$Generic$IEqualityComparer$1$GetHashCode = function(obj) {};
}).call(
    null, 
    System.Collections.Generic.IEqualityComparer$1, 
    System.Collections.Generic.IEqualityComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IEqualityComparer$1);
System.Collections.Generic.IReadOnlyCollection$1 = $define("System.Collections.Generic.IReadOnlyCollection<T>", System.Object);
(System.Collections.Generic.IReadOnlyCollection$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IReadOnlyCollection`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IReadOnlyCollection", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IReadOnlyCollection`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IReadOnlyCollection$1, null, $arrayinit([System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.IReadOnlyCollection$1.prototype.System$Collections$Generic$IReadOnlyCollection$1$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.IReadOnlyCollection$1.prototype.System$Collections$Generic$IReadOnlyCollection$1$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IReadOnlyCollection$1, arguments)();
    };
    window.System.Collections.Generic.IReadOnlyCollection$1$ = $t.$;
    $p.System$Collections$Generic$IReadOnlyCollection$1$get_Count = function() {};
}).call(
    null, 
    System.Collections.Generic.IReadOnlyCollection$1, 
    System.Collections.Generic.IReadOnlyCollection$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IReadOnlyCollection$1);
System.Collections.Generic.IReadOnlyDictionary$2 = $define("System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>", System.Object);
(System.Collections.Generic.IReadOnlyDictionary$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IReadOnlyDictionary`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IReadOnlyDictionary", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IReadOnlyDictionary`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IReadOnlyDictionary$2, null, $arrayinit([System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ContainsKey", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TryGetValue", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.Generic.IReadOnlyDictionary$2.prototype.System$Collections$Generic$IReadOnlyDictionary$2$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IReadOnlyDictionary$2, arguments)();
    };
    window.System.Collections.Generic.IReadOnlyDictionary$2$ = $t.$;
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Item = function(key) {};
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Keys = function() {};
    $p.System$Collections$Generic$IReadOnlyDictionary$2$get_Values = function() {};
    $p.System$Collections$Generic$IReadOnlyDictionary$2$ContainsKey = function(key) {};
    $p.System$Collections$Generic$IReadOnlyDictionary$2$TryGetValue = function(key, value) {};
}).call(
    null, 
    System.Collections.Generic.IReadOnlyDictionary$2, 
    System.Collections.Generic.IReadOnlyDictionary$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TValue", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IReadOnlyDictionary$2);
System.Collections.Generic.IReadOnlyList$1 = $define("System.Collections.Generic.IReadOnlyList<T>", System.Object);
(System.Collections.Generic.IReadOnlyList$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IReadOnlyList`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IReadOnlyList", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IReadOnlyList`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IReadOnlyList$1, null, $arrayinit([System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IReadOnlyList$1.prototype.System$Collections$Generic$IReadOnlyList$1$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IReadOnlyList$1.prototype.System$Collections$Generic$IReadOnlyList$1$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IReadOnlyList$1, arguments)();
    };
    window.System.Collections.Generic.IReadOnlyList$1$ = $t.$;
    $p.System$Collections$Generic$IReadOnlyList$1$get_Item = function(index) {};
}).call(
    null, 
    System.Collections.Generic.IReadOnlyList$1, 
    System.Collections.Generic.IReadOnlyList$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IReadOnlyList$1);
System.Collections.Generic.KeyNotFoundException = $define("System.Collections.Generic.KeyNotFoundException", System.Exception);
(System.Collections.Generic.KeyNotFoundException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.Collections.Generic.KeyNotFoundException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("KeyNotFoundException", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.KeyNotFoundException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.KeyNotFoundException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.KeyNotFoundException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.KeyNotFoundException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Collections.Generic.KeyNotFoundException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.Collections.Generic.KeyNotFoundException, System.Collections.Generic.KeyNotFoundException.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.KeyNotFoundException);
System.Collections.Generic.KeyValuePair$2 = $define("System.Collections.Generic.KeyValuePair<TKey, TValue>", System.ValueType);
(System.Collections.Generic.KeyValuePair$2.$TypeInitializer = function($t, $p, TKey, TValue) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Collections.Generic.KeyValuePair`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("KeyValuePair", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.KeyValuePair`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Collections.Generic.KeyValuePair$2, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("key", TKey, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("value", TValue, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.KeyValuePair$2.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.KeyValuePair$2.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Collections.Generic.KeyValuePair$2.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.KeyValuePair$2.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.KeyValuePair$2.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TValue, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.Generic.KeyValuePair$2.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", TValue, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.Generic.KeyValuePair$2.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), TValue, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.KeyValuePair$2, arguments)();
    };
    window.System.Collections.Generic.KeyValuePair$2$ = $t.$;
    $p.get_Key = function() {
        return this.key;
    };
    $p.get_Value = function() {
        return this.value;
    };
    $p.$ctor$1 = function(key, value) {
        this.key = $default(TKey);
        this.value = $default(TValue);
        System.ValueType.prototype.$ctor.call(this);
        this.key = key;
        this.value = value;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(key, value) {
        return new $p.$ctor$1.$type(this, key, value);
    };
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append("[");
        if (this.get_Key() != null)
            sb.Append$2(this.get_Key().ToString());
        sb.Append$2(", ");
        if (this.get_Value() != null)
            sb.Append$2(this.get_Value().ToString());
        sb.Append("]");
        return sb.ToString();
    };
}).call(
    null, 
    System.Collections.Generic.KeyValuePair$2, 
    System.Collections.Generic.KeyValuePair$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TValue", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.KeyValuePair$2);
System.Collections.Generic.ObjectComparer$1 = $define("System.Collections.Generic.ObjectComparer<T>", System.Collections.Generic.Comparer$1);
(System.Collections.Generic.ObjectComparer$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Collections.Generic.Comparer$1;
    $p.$typeName = "System.Collections.Generic.ObjectComparer`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ObjectComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.ObjectComparer`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.ObjectComparer$1, System.Collections.Generic.Comparer$1, $arrayinit([System.Collections.Generic.IComparer$1, System.Collections.IComparer], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.Generic.ObjectComparer$1.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.Generic.ObjectComparer$1.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.Generic.ObjectComparer$1.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.ObjectComparer$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Collections.Generic.Comparer$1$(T).$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.ObjectComparer$1, arguments)();
    };
    window.System.Collections.Generic.ObjectComparer$1$ = $t.$;
    $p.$ctor = function() {
        System.Collections.Generic.Comparer$1$(T).prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(x, y) {
        return System.Collections.Comparer().Default.Compare(x, y);
    };
    $p.System$Collections$Generic$IComparer$1$Compare = $p.Compare;
    $p.Equals = function(obj) {
        return System.Collections.Generic.ObjectComparer$1$(T).$GetType().IsInstanceOfType(obj);
    };
    $p.GetHashCode = function() {
        return this.GetType().get_Name().GetHashCode();
    };
}).call(
    null, 
    System.Collections.Generic.ObjectComparer$1, 
    System.Collections.Generic.ObjectComparer$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ObjectComparer$1);
System.Collections.Generic.Queue$1 = $define("System.Collections.Generic.Queue<T>", System.Object);
(System.Collections.Generic.Queue$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Queue`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Queue", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Queue`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Queue$1, System.Object, $arrayinit([System.Collections.ICollection, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Enqueue", System.Collections.Generic.Queue$1.prototype.Enqueue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Dequeue", System.Collections.Generic.Queue$1.prototype.Dequeue, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Peek", System.Collections.Generic.Queue$1.prototype.Peek, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Queue$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.Queue$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Queue$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerable", System.Collections.Generic.Queue$1.prototype.GetEnumerable, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Queue$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Queue$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Queue$1.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Queue$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.Queue$1.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("collection", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Queue$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Queue$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Queue$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.Queue$1, arguments)();
    };
    window.System.Collections.Generic.Queue$1$ = $t.$;
    $p.$ctor = function() {
        this.storage = new Array();
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(collection) {
        this.storage = new Array();
        System.Object.prototype.$ctor.call(this);
        if (collection == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("collection").InternalInit(new Error());
        {
            var $anon$1iterator = collection;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var obj = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.Enqueue(obj);
            }
        }
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(collection) {
        return new $p.$ctor$1.$type(this, collection);
    };
    $p.Enqueue = function(item) {
        this.storage.push(item);
    };
    $p.Dequeue = function() {
        return this.storage.shift();
    };
    $p.Peek = function() {
        if (this.storage.length == 0)
            throw System.InvalidOperationException.prototype.$ctor.$new().InternalInit(new Error());
        return this.storage[0];
    };
    $p.get_Count = function() {
        return this.storage.length;
    };
    $p.System$Collections$ICollection$get_Count = $p.get_Count;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        return this.GetEnumerable().System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.GetEnumerable = function() {
        return System.Collections.Generic.Queue$1$(T).YieldEnumerator$GetEnumerable$().prototype.$ctor.$new(this);
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$ICollection$get_SyncRoot = $p.get_SyncRoot;
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.System$Collections$ICollection$get_IsSynchronized = $p.get_IsSynchronized;
    $p.CopyTo = function(array, index) {
        for (var i = 0, j = index; index < array.length && i < this.storage.length; i++, j++) {
            array[index] = this.storage[i];
        }
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $t.YieldEnumerator$GetEnumerable = $define("System.Collections.Generic.Queue<T>.YieldEnumerator$GetEnumerable", System.YieldIterator$1);
    ($t.YieldEnumerator$GetEnumerable.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Collections.Generic.Queue`1.YieldEnumerator$GetEnumerable";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$GetEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Queue`1.YieldEnumerator$GetEnumerable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Queue$1.YieldEnumerator$GetEnumerable, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Queue$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("i", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Queue$1.YieldEnumerator$GetEnumerable.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.Generic.Queue$1.YieldEnumerator$GetEnumerable.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Collections.Generic.Queue$1.YieldEnumerator$GetEnumerable.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Queue$1.YieldEnumerator$GetEnumerable.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Queue$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(T).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$GetEnumerable, arguments)();
        };
        this.YieldEnumerator$GetEnumerable$ = $t.$;
        $p.$ctor = function($this) {
            this.$this = null;
            this.$isStarted = false;
            this.$state = 0;
            this.i = 0;
            System.YieldIterator$1$(T).prototype.$ctor.call(this);
            this.$this = $this;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this) {
            return new $p.$ctor.$type(this, $this);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.i = 0;
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.i < this.$this.storage.length) {
                            this.$state = 3;
                            this.set_Current(this.$this.storage[this.i]);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.i++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Collections.Generic.Queue$1$(T).YieldEnumerator$GetEnumerable$().prototype.$ctor.$new(this.$this);
            }
        };
    }).call($t, $t.YieldEnumerator$GetEnumerable, $t.YieldEnumerator$GetEnumerable.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$GetEnumerable);
}).call(
    null, 
    System.Collections.Generic.Queue$1, 
    System.Collections.Generic.Queue$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Queue$1);
System.Collections.IComparer = $define("System.Collections.IComparer", System.Object);
(System.Collections.IComparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IComparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IComparer", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IComparer, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Collections.IComparer.prototype.System$Collections$IComparer$Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IComparer$Compare = function(x, y) {};
}).call(null, System.Collections.IComparer, System.Collections.IComparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IComparer);
System.Collections.IDictionary = $define("System.Collections.IDictionary", System.Object);
(System.Collections.IDictionary.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IDictionary";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionary", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IDictionary", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IDictionary, null, $arrayinit([System.Collections.ICollection, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.IDictionary.prototype.System$Collections$IDictionary$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IDictionaryEnumerator, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.IDictionary.prototype.System$Collections$IDictionary$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.IDictionary.prototype.System$Collections$IDictionary$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Keys", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Keys", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Keys, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Values", System.Collections.ICollection, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Values", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_Values, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.ICollection, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.IDictionary.prototype.System$Collections$IDictionary$get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IDictionary$get_Item = function(key) {};
    $p.System$Collections$IDictionary$set_Item = function(key, value) {};
    $p.System$Collections$IDictionary$get_Keys = function() {};
    $p.System$Collections$IDictionary$get_Values = function() {};
    $p.System$Collections$IDictionary$get_IsReadOnly = function() {};
    $p.System$Collections$IDictionary$get_IsFixedSize = function() {};
    $p.System$Collections$IDictionary$Contains = function(key) {};
    $p.System$Collections$IDictionary$Add = function(key, value) {};
    $p.System$Collections$IDictionary$Clear = function() {};
    $p.System$Collections$IDictionary$GetEnumerator = function() {};
    $p.System$Collections$IDictionary$Remove = function(key) {};
}).call(null, System.Collections.IDictionary, System.Collections.IDictionary.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IDictionary);
System.Collections.IDictionaryEnumerator = $define("System.Collections.IDictionaryEnumerator", System.Object);
(System.Collections.IDictionaryEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IDictionaryEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDictionaryEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IDictionaryEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IDictionaryEnumerator, null, $arrayinit([System.Collections.IEnumerator], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Key, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Entry", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Entry, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.DictionaryEntry, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Key, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Entry", System.Collections.DictionaryEntry, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Entry", System.Collections.IDictionaryEnumerator.prototype.System$Collections$IDictionaryEnumerator$get_Entry, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.DictionaryEntry, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IDictionaryEnumerator$get_Key = function() {};
    $p.System$Collections$IDictionaryEnumerator$get_Value = function() {};
    $p.System$Collections$IDictionaryEnumerator$get_Entry = function() {};
}).call(null, System.Collections.IDictionaryEnumerator, System.Collections.IDictionaryEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IDictionaryEnumerator);
System.Collections.IEqualityComparer = $define("System.Collections.IEqualityComparer", System.Object);
(System.Collections.IEqualityComparer.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEqualityComparer";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEqualityComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IEqualityComparer", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IEqualityComparer, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.IEqualityComparer.prototype.System$Collections$IEqualityComparer$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.IEqualityComparer.prototype.System$Collections$IEqualityComparer$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IEqualityComparer$Equals = function(x, y) {};
    $p.System$Collections$IEqualityComparer$GetHashCode = function(obj) {};
}).call(null, System.Collections.IEqualityComparer, System.Collections.IEqualityComparer.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEqualityComparer);
System.Collections.Generic.IList$1 = $define("System.Collections.Generic.IList<T>", System.Object);
(System.Collections.Generic.IList$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.IList`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IList", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.IList`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.IList$1, null, $arrayinit([System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$IndexOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$Insert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveAt", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$RemoveAt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.IList$1.prototype.System$Collections$Generic$IList$1$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.IList$1, arguments)();
    };
    window.System.Collections.Generic.IList$1$ = $t.$;
    $p.System$Collections$Generic$IList$1$get_Item = function(index) {};
    $p.System$Collections$Generic$IList$1$set_Item = function(index, value) {};
    $p.System$Collections$Generic$IList$1$IndexOf = function(item) {};
    $p.System$Collections$Generic$IList$1$Insert = function(index, item) {};
    $p.System$Collections$Generic$IList$1$RemoveAt = function(index) {};
}).call(
    null, 
    System.Collections.Generic.IList$1, 
    System.Collections.Generic.IList$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.IList$1);
System.Collections.Generic.ISet$1 = $define("System.Collections.Generic.ISet<T>", System.Object);
(System.Collections.Generic.ISet$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.ISet`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ISet", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.ISet`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.Generic.ISet$1, null, $arrayinit([System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("UnionWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$UnionWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IntersectWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IntersectWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ExceptWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$ExceptWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SymmetricExceptWith", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$SymmetricExceptWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSubsetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsSubsetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsSupersetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsSupersetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSupersetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsProperSupersetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsProperSubsetOf", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$IsProperSubsetOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Overlaps", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$Overlaps, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetEquals", System.Collections.Generic.ISet$1.prototype.System$Collections$Generic$ISet$1$SetEquals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.ISet$1, arguments)();
    };
    window.System.Collections.Generic.ISet$1$ = $t.$;
    $p.System$Collections$Generic$ISet$1$UnionWith = function(other) {};
    $p.System$Collections$Generic$ISet$1$IntersectWith = function(other) {};
    $p.System$Collections$Generic$ISet$1$ExceptWith = function(other) {};
    $p.System$Collections$Generic$ISet$1$SymmetricExceptWith = function(other) {};
    $p.System$Collections$Generic$ISet$1$IsSubsetOf = function(other) {};
    $p.System$Collections$Generic$ISet$1$IsSupersetOf = function(other) {};
    $p.System$Collections$Generic$ISet$1$IsProperSupersetOf = function(other) {};
    $p.System$Collections$Generic$ISet$1$IsProperSubsetOf = function(other) {};
    $p.System$Collections$Generic$ISet$1$Overlaps = function(other) {};
    $p.System$Collections$Generic$ISet$1$SetEquals = function(other) {};
}).call(
    null, 
    System.Collections.Generic.ISet$1, 
    System.Collections.Generic.ISet$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.ISet$1);
System.Collections.Generic.List$1 = $define("System.Collections.Generic.List<T>", System.Object);
(System.Collections.Generic.List$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.List`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("List", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.List`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.List$1, System.Object, $arrayinit([System.Collections.IList, System.Collections.ICollection, System.Collections.Generic.IReadOnlyList$1, System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IList$1, System.Collections.Generic.ICollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.List$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.List$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.List$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.List$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.List$1.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.get_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.set_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.List$1.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.List$1.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.List$1.prototype.Add$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.List$1.prototype.Contains$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.Generic.List$1.prototype.Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.Generic.List$1.prototype.IndexOf$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert", System.Collections.Generic.List$1.prototype.Insert$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.List$1.prototype.Remove$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveAt", System.Collections.Generic.List$1.prototype.RemoveAt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.List$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.Generic.List$1.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.Generic.List$1.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.List$1.prototype.CopyTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", $array(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arrayIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.Generic.List$1.prototype.Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.List$1.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.List$1.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.Generic.List$1.prototype.IndexOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert", System.Collections.Generic.List$1.prototype.Insert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sort", System.Collections.Generic.List$1.prototype.Sort, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sort", System.Collections.Generic.List$1.prototype.Sort$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sort", System.Collections.Generic.List$1.prototype.Sort$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparison", System.Collections.Generic.Comparison$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.List$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Collections.Generic.List$1.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("collection", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.List$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.List$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.List$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IList.this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.get_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IList.set_Item", System.Collections.Generic.List$1.prototype.System$Collections$IList$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.Generic.List$1.prototype.get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.Generic.List$1.prototype.get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.Generic.List$1.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.Generic.List$1.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.List$1, arguments)();
    };
    window.System.Collections.Generic.List$1$ = $t.$;
    $p.$ctor = function() {
        this.storage = new Array();
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(collection) {
        this.storage = new Array();
        System.Object.prototype.$ctor.call(this);
        {
            var $anon$1iterator = collection;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.Add(item);
            }
        }
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(collection) {
        return new $p.$ctor$1.$type(this, collection);
    };
    $p.get_Count = function() {
        return this.storage.length;
    };
    $p.System$Collections$ICollection$get_Count = $p.get_Count;
    $p.System$Collections$Generic$IReadOnlyCollection$1$get_Count = $p.get_Count;
    $p.System$Collections$Generic$ICollection$1$get_Count = $p.get_Count;
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.System$Collections$ICollection$get_IsSynchronized = $p.get_IsSynchronized;
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$ICollection$get_SyncRoot = $p.get_SyncRoot;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.CopyTo = function(array, index) {
        for (var i = index; i < array.length; i++) {
            array[i] = this.get_Item(i - index);
        }
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $p.System$Collections$IList$get_Item = function(index) {
        return this.get_Item(index);
    };
    $p.System$Collections$IList$set_Item = function(index, value) {
        this.set_Item(index, $cast(System.Object, value));
    };
    $p.System$Collections$IList$get_Item = $p.System$Collections$IList$get_Item;
    $p.System$Collections$IList$set_Item = $p.System$Collections$IList$set_Item;
    $p.get_IsReadOnly = function() {
        return false;
    };
    $p.System$Collections$IList$get_IsReadOnly = $p.get_IsReadOnly;
    $p.System$Collections$Generic$ICollection$1$get_IsReadOnly = $p.get_IsReadOnly;
    $p.get_IsFixedSize = function() {
        return false;
    };
    $p.System$Collections$IList$get_IsFixedSize = $p.get_IsFixedSize;
    $p.Add$1 = function(value) {
        this.storage.push(value);
        return this.storage.length;
    };
    $p.System$Collections$IList$Add = $p.Add$1;
    $p.Contains$1 = function(value) {
        return this.storage.indexOf(value) >= 0;
    };
    $p.System$Collections$IList$Contains = $p.Contains$1;
    $p.Clear = function() {
        this.storage.length = 0;
    };
    $p.System$Collections$IList$Clear = $p.Clear;
    $p.System$Collections$Generic$ICollection$1$Clear = $p.Clear;
    $p.IndexOf$1 = function(value) {
        return this.storage.indexOf(value);
    };
    $p.System$Collections$IList$IndexOf = $p.IndexOf$1;
    $p.Insert$1 = function(index, value) {
        this.storage.splice(index, 0, value);
    };
    $p.System$Collections$IList$Insert = $p.Insert$1;
    $p.Remove$1 = function(value) {
        var index = this.IndexOf$1(value);
        if (index >= 0)
            this.RemoveAt(index);
    };
    $p.System$Collections$IList$Remove = $p.Remove$1;
    $p.RemoveAt = function(index) {
        this.storage.splice(index, 1);
    };
    $p.System$Collections$IList$RemoveAt = $p.RemoveAt;
    $p.System$Collections$Generic$IList$1$RemoveAt = $p.RemoveAt;
    $p.GetEnumerator = function() {
        return System.Collections.Generic.List$1$(T).ListEnumerator$().prototype.$ctor.$new(this);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.Add = function(item) {
        this.storage.push(item);
    };
    $p.System$Collections$Generic$ICollection$1$Add = $p.Add;
    $p.Contains = function(item) {
        return this.storage.indexOf(item) >= 0;
    };
    $p.System$Collections$Generic$ICollection$1$Contains = $p.Contains;
    $p.CopyTo$1 = function(array, arrayIndex) {
        for (var i = arrayIndex; i < array.length; i++) {
            array[i] = this.get_Item(i - arrayIndex);
        }
    };
    $p.System$Collections$Generic$ICollection$1$CopyTo = $p.CopyTo$1;
    $p.Remove = function(item) {
        var index = this.IndexOf(item);
        if (index >= 0) {
            this.RemoveAt(index);
            return true;
        }
        return false;
    };
    $p.System$Collections$Generic$ICollection$1$Remove = $p.Remove;
    $p.get_Item = function(index) {
        return this.storage[index];
    };
    $p.set_Item = function(index, value) {
        this.storage[index] = value;
    };
    $p.System$Collections$Generic$IReadOnlyList$1$get_Item = $p.get_Item;
    $p.System$Collections$Generic$IList$1$get_Item = $p.get_Item;
    $p.System$Collections$Generic$IList$1$set_Item = $p.set_Item;
    $p.IndexOf = function(item) {
        return this.storage.indexOf(item);
    };
    $p.System$Collections$Generic$IList$1$IndexOf = $p.IndexOf;
    $p.Insert = function(index, item) {
        this.storage.splice(index, 0, item);
    };
    $p.System$Collections$Generic$IList$1$Insert = $p.Insert;
    $p.Sort = function() {
        this.Sort$2(System.Collections.Generic.Comparer$1$(T).get_Default());
    };
    $p.Sort$2 = function(comparer) {
        if (comparer == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("comparer").InternalInit(new Error());
        if (this.get_Count() <= 0)
            return;
        this.storage.sort(function(x, y) {
            return comparer.System$Collections$Generic$IComparer$1$Compare(x, y);
        });
    };
    $p.Sort$1 = function(comparison) {
        if (comparison == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("comparison").InternalInit(new Error());
        this.Sort$2(System.Collections.Generic.ComparisonComparer$1$(T).prototype.$ctor.$new(comparison));
    };
    $t.ListEnumerator = $define("System.Collections.Generic.List<T>.ListEnumerator", System.Object);
    ($t.ListEnumerator.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Collections.Generic.List`1.ListEnumerator";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ListEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.List`1.ListEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.List$1.ListEnumerator, System.Object, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("list", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.Collections.Generic.List$1.ListEnumerator.prototype.Dispose, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.Generic.List$1.ListEnumerator.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.Collections.Generic.List$1.ListEnumerator.prototype.Reset, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.List$1.ListEnumerator.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("list", System.Collections.Generic.List$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.IEnumerator.Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerator.get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.Generic.List$1.ListEnumerator.prototype.get_Current, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.ListEnumerator, arguments)();
        };
        this.ListEnumerator$ = $t.$;
        $p.$ctor = function(list) {
            this.index = -1;
            this.list = null;
            System.Object.prototype.$ctor.call(this);
            this.list = list;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(list) {
            return new $p.$ctor.$type(this, list);
        };
        $p.Dispose = function() {};
        $p.System$IDisposable$Dispose = $p.Dispose;
        $p.System$Collections$IEnumerator$get_Current = function() {
            return this.get_Current();
        };
        $p.System$Collections$IEnumerator$get_Current = $p.System$Collections$IEnumerator$get_Current;
        $p.MoveNext = function() {
            this.index++;
            return this.index < this.list.get_Count();
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Reset = function() {
            throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
        };
        $p.System$Collections$IEnumerator$Reset = $p.Reset;
        $p.get_Current = function() {
            return this.list.get_Item(this.index);
        };
        $p.System$Collections$Generic$IEnumerator$1$get_Current = $p.get_Current;
    }).call($t, $t.ListEnumerator, $t.ListEnumerator.prototype);
    $mscorlib$AssemblyTypes.push($t.ListEnumerator);
}).call(
    null, 
    System.Collections.Generic.List$1, 
    System.Collections.Generic.List$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.List$1);
System.Collections.ICollection = $define("System.Collections.ICollection", System.Object);
(System.Collections.ICollection.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.ICollection";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICollection", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.ICollection", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.ICollection, null, $arrayinit([System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.ICollection.prototype.System$Collections$ICollection$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.ICollection.prototype.System$Collections$ICollection$get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.ICollection.prototype.System$Collections$ICollection$get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.ICollection.prototype.System$Collections$ICollection$CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.ICollection.prototype.System$Collections$ICollection$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.ICollection.prototype.System$Collections$ICollection$get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.ICollection.prototype.System$Collections$ICollection$get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$ICollection$get_Count = function() {};
    $p.System$Collections$ICollection$get_SyncRoot = function() {};
    $p.System$Collections$ICollection$get_IsSynchronized = function() {};
    $p.System$Collections$ICollection$CopyTo = function(array, index) {};
}).call(null, System.Collections.ICollection, System.Collections.ICollection.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.ICollection);
System.Collections.IEnumerable = $define("System.Collections.IEnumerable", System.Object);
(System.Collections.IEnumerable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEnumerable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IEnumerable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IEnumerable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.IEnumerable.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {};
}).call(null, System.Collections.IEnumerable, System.Collections.IEnumerable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEnumerable);
System.Collections.IEnumerator = $define("System.Collections.IEnumerator", System.Object);
(System.Collections.IEnumerator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IEnumerator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IEnumerator, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Reset", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$Reset, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Current", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Current", System.Collections.IEnumerator.prototype.System$Collections$IEnumerator$get_Current, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IEnumerator$get_Current = function() {};
    $p.System$Collections$IEnumerator$MoveNext = function() {};
    $p.System$Collections$IEnumerator$Reset = function() {};
}).call(null, System.Collections.IEnumerator, System.Collections.IEnumerator.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IEnumerator);
System.Collections.IList = $define("System.Collections.IList", System.Object);
(System.Collections.IList.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IList";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IList", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IList", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IList, null, $arrayinit([System.Collections.ICollection, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.IList.prototype.System$Collections$IList$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.IList.prototype.System$Collections$IList$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.IList.prototype.System$Collections$IList$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.IList.prototype.System$Collections$IList$get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Collections.IList.prototype.System$Collections$IList$Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Collections.IList.prototype.System$Collections$IList$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clear", System.Collections.IList.prototype.System$Collections$IList$Clear, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IndexOf", System.Collections.IList.prototype.System$Collections$IList$IndexOf, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Insert", System.Collections.IList.prototype.System$Collections$IList$Insert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Remove", System.Collections.IList.prototype.System$Collections$IList$Remove, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveAt", System.Collections.IList.prototype.System$Collections$IList$RemoveAt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Collections.IList.prototype.System$Collections$IList$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Collections.IList.prototype.System$Collections$IList$set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReadOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReadOnly", System.Collections.IList.prototype.System$Collections$IList$get_IsReadOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFixedSize", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFixedSize", System.Collections.IList.prototype.System$Collections$IList$get_IsFixedSize, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IList$get_Item = function(index) {};
    $p.System$Collections$IList$set_Item = function(index, value) {};
    $p.System$Collections$IList$get_IsReadOnly = function() {};
    $p.System$Collections$IList$get_IsFixedSize = function() {};
    $p.System$Collections$IList$Add = function(value) {};
    $p.System$Collections$IList$Contains = function(value) {};
    $p.System$Collections$IList$Clear = function() {};
    $p.System$Collections$IList$IndexOf = function(value) {};
    $p.System$Collections$IList$Insert = function(index, value) {};
    $p.System$Collections$IList$Remove = function(value) {};
    $p.System$Collections$IList$RemoveAt = function(index) {};
}).call(null, System.Collections.IList, System.Collections.IList.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IList);
System.Collections.IStructuralComparable = $define("System.Collections.IStructuralComparable", System.Object);
(System.Collections.IStructuralComparable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IStructuralComparable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IStructuralComparable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IStructuralComparable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IStructuralComparable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Collections.IStructuralComparable.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {};
}).call(null, System.Collections.IStructuralComparable, System.Collections.IStructuralComparable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IStructuralComparable);
System.Collections.IStructuralEquatable = $define("System.Collections.IStructuralEquatable", System.Object);
(System.Collections.IStructuralEquatable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.IStructuralEquatable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IStructuralEquatable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.IStructuralEquatable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Collections.IStructuralEquatable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Collections.IStructuralEquatable.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Collections.IStructuralEquatable.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {};
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {};
}).call(null, System.Collections.IStructuralEquatable, System.Collections.IStructuralEquatable.prototype);
$mscorlib$AssemblyTypes.push(System.Collections.IStructuralEquatable);
System.Collections.Generic.Stack$1 = $define("System.Collections.Generic.Stack<T>", System.Object);
(System.Collections.Generic.Stack$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Collections.Generic.Stack`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Stack", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Stack`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Stack$1, System.Object, $arrayinit([System.Collections.ICollection, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Push", System.Collections.Generic.Stack$1.prototype.Push, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Pop", System.Collections.Generic.Stack$1.prototype.Pop, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Peek", System.Collections.Generic.Stack$1.prototype.Peek, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Stack$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Collections.Generic.Stack$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Stack$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerable", System.Collections.Generic.Stack$1.prototype.GetEnumerable, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Stack$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Stack$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CopyTo", System.Collections.Generic.Stack$1.prototype.CopyTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("array", Array, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Stack$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Collections.Generic.Stack$1.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SyncRoot", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SyncRoot", System.Collections.Generic.Stack$1.prototype.get_SyncRoot, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSynchronized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSynchronized", System.Collections.Generic.Stack$1.prototype.get_IsSynchronized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Collections.Generic.Stack$1, arguments)();
    };
    window.System.Collections.Generic.Stack$1$ = $t.$;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
        this.storage = new Array();
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Push = function(item) {
        this.storage.push(item);
    };
    $p.Pop = function() {
        return this.storage.pop();
    };
    $p.Peek = function() {
        if (this.storage.length == 0)
            throw System.InvalidOperationException.prototype.$ctor.$new().InternalInit(new Error());
        return this.storage[this.storage.length - 1];
    };
    $p.get_Count = function() {
        return this.storage.length;
    };
    $p.System$Collections$ICollection$get_Count = $p.get_Count;
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        return this.GetEnumerable().System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.GetEnumerable = function() {
        return System.Collections.Generic.Stack$1$(T).YieldEnumerator$GetEnumerable$().prototype.$ctor.$new(this);
    };
    $p.get_SyncRoot = function() {
        return this;
    };
    $p.System$Collections$ICollection$get_SyncRoot = $p.get_SyncRoot;
    $p.get_IsSynchronized = function() {
        return true;
    };
    $p.System$Collections$ICollection$get_IsSynchronized = $p.get_IsSynchronized;
    $p.CopyTo = function(array, index) {
        for (var i = 0, j = index; index < array.length && i < this.storage.length; i++, j++) {
            array[index] = this.storage[i];
        }
    };
    $p.System$Collections$ICollection$CopyTo = $p.CopyTo;
    $t.YieldEnumerator$GetEnumerable = $define("System.Collections.Generic.Stack<T>.YieldEnumerator$GetEnumerable", System.YieldIterator$1);
    ($t.YieldEnumerator$GetEnumerable.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Collections.Generic.Stack`1.YieldEnumerator$GetEnumerable";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$GetEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Collections.Generic.Stack`1.YieldEnumerator$GetEnumerable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Collections.Generic.Stack$1.YieldEnumerator$GetEnumerable, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Stack$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("i", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Collections.Generic.Stack$1.YieldEnumerator$GetEnumerable.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Collections.Generic.Stack$1.YieldEnumerator$GetEnumerable.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Collections.Generic.Stack$1.YieldEnumerator$GetEnumerable.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Collections.Generic.Stack$1.YieldEnumerator$GetEnumerable.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", System.Collections.Generic.Stack$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(T).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$GetEnumerable, arguments)();
        };
        this.YieldEnumerator$GetEnumerable$ = $t.$;
        $p.$ctor = function($this) {
            this.$this = null;
            this.$isStarted = false;
            this.$state = 0;
            this.i = 0;
            System.YieldIterator$1$(T).prototype.$ctor.call(this);
            this.$this = $this;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this) {
            return new $p.$ctor.$type(this, $this);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.i = this.$this.storage.length - 1;
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.i >= 0) {
                            this.$state = 3;
                            this.set_Current(this.$this.storage[this.i]);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.i--;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Collections.Generic.Stack$1$(T).YieldEnumerator$GetEnumerable$().prototype.$ctor.$new(this.$this);
            }
        };
    }).call($t, $t.YieldEnumerator$GetEnumerable, $t.YieldEnumerator$GetEnumerable.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$GetEnumerable);
}).call(
    null, 
    System.Collections.Generic.Stack$1, 
    System.Collections.Generic.Stack$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Collections.Generic.Stack$1);
System.Console = $define("System.Console", System.Object);
(System.Console.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Console";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Console", $arrayinit([], System.Attribute));this.$type.Init("System.Console", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Console, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("WriteLine", System.Console.prototype.WriteLine$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("WriteLine", System.Console.prototype.WriteLine, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("WriteLine", System.Console.prototype.WriteLine$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Console.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.WriteLine$1 = function(value) {
        console.log(value);
    };
    $t.WriteLine = function(value) {
        System.Console.WriteLine$1(value.ToString());
    };
    $t.WriteLine$2 = function(format, arg) {
        if (arg == null)
            System.Console.WriteLine$1(format);
        else
            System.Console.WriteLine$1(String.Format(format, arg));
    };
}).call(null, System.Console, System.Console.prototype);
$mscorlib$AssemblyTypes.push(System.Console);
System.Convert = $define("System.Convert", System.Object);
(System.Convert.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Convert";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Convert", $arrayinit([], System.Attribute));this.$type.Init("System.Convert", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Convert, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("ChangeType", System.Convert.prototype.ChangeType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("conversionType", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Convert.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.ChangeType = function(value, conversionType) {
        if (value == null) {
            if (conversionType.get_IsValueType())
                throw System.Exception.prototype.$ctor$1.$new("Null object cannot be converted to a value type").InternalInit(new Error());
            return null;
        }
        if (value.GetType() == conversionType) {
            return value;
        }
        if (String.$GetType().IsInstanceOfType(value)) {
            var s = $cast(System.Object, value);
            if (conversionType == System.Int32.$GetType())
                return System.Int32.Parse(s);
            if (conversionType == System.Int16.$GetType())
                return System.Int16.Parse(s);
        }
        throw System.Exception.prototype.$ctor$1.$new("Could not convert " + $safeToString(value) + " (" + value.GetType().get_FullName() + ") to " + conversionType.get_FullName()).InternalInit(new Error());
    };
}).call(null, System.Convert, System.Convert.prototype);
$mscorlib$AssemblyTypes.push(System.Convert);
System.DateTime = $define("System.DateTime", System.ValueType);
(System.DateTime.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.DateTime";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DateTime", $arrayinit([], System.Attribute));this.$type.Init("System.DateTime", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.DateTime, System.ValueType, $arrayinit([System.IEquatable$1, System.IComparable$1, System.IConvertible, System.IFormattable, System.IComparable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("kind", System.DateTimeKind, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_JsDate", System.DateTime.prototype.get_JsDate, $arrayinit([], System.Reflection.ParameterInfo), Date, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Date", System.DateTime.prototype.get_Date, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Day", System.DateTime.prototype.get_Day, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DayOfWeek", System.DateTime.prototype.get_DayOfWeek, $arrayinit([], System.Reflection.ParameterInfo), System.DayOfWeek, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DayOfYear", System.DateTime.prototype.get_DayOfYear, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Hour", System.DateTime.prototype.get_Hour, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Kind", System.DateTime.prototype.get_Kind, $arrayinit([], System.Reflection.ParameterInfo), System.DateTimeKind, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Millisecond", System.DateTime.prototype.get_Millisecond, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Minute", System.DateTime.prototype.get_Minute, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Month", System.DateTime.prototype.get_Month, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Now", System.DateTime.prototype.get_Now, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_UtcNow", System.DateTime.prototype.get_UtcNow, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Second", System.DateTime.prototype.get_Second, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Today", System.DateTime.prototype.get_Today, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Year", System.DateTime.prototype.get_Year, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SpecifyKind", System.DateTime.prototype.SpecifyKind, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.DateTime, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("kind", System.DateTimeKind, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.DateTime.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.DateTime, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.DateTime.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypeCode", System.DateTime.prototype.GetTypeCode, $arrayinit([], System.Reflection.ParameterInfo), System.TypeCode, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.DateTime.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.DateTime, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDateTime", System.DateTime.prototype.ToDateTime, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.DateTime.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.DateTime.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.DateTime.prototype.ToString$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("formatProvider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToBoolean", System.DateTime.prototype.ToBoolean, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToChar", System.DateTime.prototype.ToChar, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Char, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToSByte", System.DateTime.prototype.ToSByte, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.SByte, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToByte", System.DateTime.prototype.ToByte, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Byte, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt16", System.DateTime.prototype.ToInt16, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt16", System.DateTime.prototype.ToUInt16, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt16, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt32", System.DateTime.prototype.ToInt32, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt32", System.DateTime.prototype.ToUInt32, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt64", System.DateTime.prototype.ToInt64, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt64", System.DateTime.prototype.ToUInt64, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToSingle", System.DateTime.prototype.ToSingle, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDouble", System.DateTime.prototype.ToDouble, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDecimal", System.DateTime.prototype.ToDecimal, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToType", System.DateTime.prototype.ToType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("conversionType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Subtraction", System.DateTime.prototype.op_Subtraction, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.DateTime, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.DateTime, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.DateTime.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddTicks", System.DateTime.prototype.AddTicks, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Int64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddYears", System.DateTime.prototype.AddYears, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddMonths", System.DateTime.prototype.AddMonths, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("months", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddDays", System.DateTime.prototype.AddDays, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddHours", System.DateTime.prototype.AddHours, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddMilliseconds", System.DateTime.prototype.AddMilliseconds, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddMinutes", System.DateTime.prototype.AddMinutes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddSeconds", System.DateTime.prototype.AddSeconds, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.DateTime.prototype.Add$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("scale", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.DateTime.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.DateTime.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", Date, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("kind", System.DateTimeKind, 1, System.Reflection.ParameterAttributes().HasDefault, 0, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.DateTime.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("year", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("month", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("day", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.DateTime.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("year", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("month", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("day", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hour", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minute", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Int32, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$4", System.DateTime.prototype.$ctor$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("year", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("month", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("day", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hour", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minute", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("kind", System.DateTimeKind, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$5", System.DateTime.prototype.$ctor$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("year", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("month", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("day", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hour", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minute", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("millisecond", System.Int32, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$6", System.DateTime.prototype.$ctor$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("year", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("month", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("day", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hour", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minute", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("millisecond", System.Int32, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("kind", System.DateTimeKind, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("JsDate", Date, System.Reflection.MethodInfo.prototype.$ctor.$new("get_JsDate", System.DateTime.prototype.get_JsDate, $arrayinit([], System.Reflection.ParameterInfo), Date, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Date", System.DateTime, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Date", System.DateTime.prototype.get_Date, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Day", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Day", System.DateTime.prototype.get_Day, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("DayOfWeek", System.DayOfWeek, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DayOfWeek", System.DateTime.prototype.get_DayOfWeek, $arrayinit([], System.Reflection.ParameterInfo), System.DayOfWeek, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("DayOfYear", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DayOfYear", System.DateTime.prototype.get_DayOfYear, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Hour", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Hour", System.DateTime.prototype.get_Hour, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Kind", System.DateTimeKind, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Kind", System.DateTime.prototype.get_Kind, $arrayinit([], System.Reflection.ParameterInfo), System.DateTimeKind, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Millisecond", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Millisecond", System.DateTime.prototype.get_Millisecond, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Minute", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Minute", System.DateTime.prototype.get_Minute, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Month", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Month", System.DateTime.prototype.get_Month, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Now", System.DateTime, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Now", System.DateTime.prototype.get_Now, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("UtcNow", System.DateTime, System.Reflection.MethodInfo.prototype.$ctor.$new("get_UtcNow", System.DateTime.prototype.get_UtcNow, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Second", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Second", System.DateTime.prototype.get_Second, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Today", System.DateTime, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Today", System.DateTime.prototype.get_Today, $arrayinit([], System.Reflection.ParameterInfo), System.DateTime, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Year", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Year", System.DateTime.prototype.get_Year, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor$1 = function(value, kind) {
        this.value = null;
        this.kind = 0;
        System.ValueType.prototype.$ctor.call(this);
        this.value = value;
        this.kind = kind;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(value, kind) {
        return new $p.$ctor$1.$type(this, value, kind);
    };
    $p.get_JsDate = function() {
        return this.value;
    };
    $p.$ctor$2 = function(year, month, day) {
        this.value = null;
        this.kind = 0;
        System.DateTime.prototype.$ctor$1.call(this, new Date(year, month - 1, day), 0);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(year, month, day) {
        return new $p.$ctor$2.$type(
            this, 
            year, 
            month, 
            day
        );
    };
    $p.$ctor$3 = function(year, month, day, hour, minute, second) {
        this.value = null;
        this.kind = 0;
        System.DateTime.prototype.$ctor$1.call(this, new Date(
            year, 
            month - 1, 
            day, 
            hour, 
            minute, 
            second
        ), 0);
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(year, month, day, hour, minute, second) {
        return new $p.$ctor$3.$type(
            this, 
            year, 
            month, 
            day, 
            hour, 
            minute, 
            second
        );
    };
    $p.$ctor$4 = function(year, month, day, hour, minute, second, kind) {
        this.value = null;
        this.kind = 0;
        System.DateTime.prototype.$ctor$1.call(this, new Date(
            year, 
            month - 1, 
            day, 
            hour, 
            minute, 
            second
        ), kind);
    };
    $p.$ctor$4.$type = $t;
    $p.$ctor$4.$new = function(year, month, day, hour, minute, second, kind) {
        return new $p.$ctor$4.$type(
            this, 
            year, 
            month, 
            day, 
            hour, 
            minute, 
            second, 
            kind
        );
    };
    $p.$ctor$5 = function(year, month, day, hour, minute, second, millisecond) {
        this.value = null;
        this.kind = 0;
        System.DateTime.prototype.$ctor$1.call(this, new Date(
            year, 
            month - 1, 
            day, 
            hour, 
            minute, 
            second, 
            millisecond
        ), 0);
    };
    $p.$ctor$5.$type = $t;
    $p.$ctor$5.$new = function(year, month, day, hour, minute, second, millisecond) {
        return new $p.$ctor$5.$type(
            this, 
            year, 
            month, 
            day, 
            hour, 
            minute, 
            second, 
            millisecond
        );
    };
    $p.$ctor$6 = function(year, month, day, hour, minute, second, millisecond, kind) {
        this.value = null;
        this.kind = 0;
        System.DateTime.prototype.$ctor$1.call(this, new Date(
            year, 
            month - 1, 
            day, 
            hour, 
            minute, 
            second, 
            millisecond
        ), kind);
    };
    $p.$ctor$6.$type = $t;
    $p.$ctor$6.$new = function(year, month, day, hour, minute, second, millisecond, kind) {
        return new $p.$ctor$6.$type(
            this, 
            year, 
            month, 
            day, 
            hour, 
            minute, 
            second, 
            millisecond, 
            kind
        );
    };
    $p.get_Date = function() {
        var clone = new Date(this.value.getTime());
        clone.setHours(0);
        clone.setMinutes(0);
        clone.setSeconds(0);
        clone.setMilliseconds(0);
        return System.DateTime.prototype.$ctor$1.$new(clone, this.kind);
    };
    $p.get_Day = function() {
        return this.value.getDate();
    };
    $p.get_DayOfWeek = function() {
        return System.Enum.InternalToObject(System.DayOfWeek(), this.value.getDay());
    };
    $p.get_DayOfYear = function() {
        var now = new Date();
        var start = new Date(now.getFullYear(), 0);
        var diff = now - start;
        var oneDay = 1000 * 60 * 60 * 24;
        var day = Math.ceil(diff / oneDay);
        return day;
    };
    $p.get_Hour = function() {
        return this.value.getHours();
    };
    $p.get_Kind = function() {
        return this.kind;
    };
    $p.get_Millisecond = function() {
        return this.value.getMilliseconds();
    };
    $p.get_Minute = function() {
        return this.value.getMinutes();
    };
    $p.get_Month = function() {
        return this.value.getMonth() + 1;
    };
    $t.get_Now = function() {
        return System.DateTime.prototype.$ctor$1.$new(new Date(), System.DateTimeKind().Local);
    };
    $t.get_UtcNow = function() {
        var now = new Date();
        var utcNow = new Date(
            now.getUTCFullYear(), 
            now.getUTCMonth(), 
            now.getUTCDate(), 
            now.getUTCHours(), 
            now.getUTCMinutes(), 
            now.getUTCSeconds(), 
            now.getUTCMilliseconds()
        );
        return System.DateTime.prototype.$ctor$1.$new(utcNow, System.DateTimeKind().Utc);
    };
    $p.get_Second = function() {
        return this.value.getSeconds();
    };
    $t.get_Today = function() {
        return System.DateTime().get_Now().get_Date();
    };
    $p.get_Year = function() {
        return this.value.getFullYear();
    };
    $t.SpecifyKind = function(value, kind) {
        return System.DateTime.prototype.$ctor$1.$new(value.value, kind);
    };
    $p.CompareTo = function(other) {
        return (this.value.getTime() - other.value.getTime());
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo;
    $p.CompareTo$1 = function(obj) {
        if (!(System.DateTime.$GetType().IsInstanceOfType(obj)))
            return 1;
        return this.CompareTo($cast(System.Object, obj));
    };
    $p.System$IComparable$CompareTo = $p.CompareTo$1;
    $p.GetTypeCode = function() {
        return System.TypeCode().DateTime;
    };
    $p.System$IConvertible$GetTypeCode = $p.GetTypeCode;
    $p.Equals$2 = function(other) {
        return this.value.getTime() == other.value.getTime();
    };
    $p.System$IEquatable$1$Equals = $p.Equals$2;
    $p.ToDateTime = function(provider) {
        return this;
    };
    $p.System$IConvertible$ToDateTime = $p.ToDateTime;
    $p.ToString = function() {
        return this.value.toString();
    };
    $p.ToString$1 = function(provider) {
        return this.ToString();
    };
    $p.System$IConvertible$ToString = $p.ToString$1;
    $p.ToString$2 = function(format, formatProvider) {
        return this.ToString();
    };
    $p.System$IFormattable$ToString = $p.ToString$2;
    $p.ToBoolean = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Boolean'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToBoolean = $p.ToBoolean;
    $p.ToChar = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Char'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToChar = $p.ToChar;
    $p.ToSByte = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'SByte'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToSByte = $p.ToSByte;
    $p.ToByte = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Byte'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToByte = $p.ToByte;
    $p.ToInt16 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Int16'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToInt16 = $p.ToInt16;
    $p.ToUInt16 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'UInt16'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToUInt16 = $p.ToUInt16;
    $p.ToInt32 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Int32'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToInt32 = $p.ToInt32;
    $p.ToUInt32 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'UInt32'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToUInt32 = $p.ToUInt32;
    $p.ToInt64 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Int64'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToInt64 = $p.ToInt64;
    $p.ToUInt64 = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'UInt64'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToUInt64 = $p.ToUInt64;
    $p.ToSingle = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Single'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToSingle = $p.ToSingle;
    $p.ToDouble = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Double'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToDouble = $p.ToDouble;
    $p.ToDecimal = function(provider) {
        throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to 'Decimal'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToDecimal = $p.ToDecimal;
    $p.ToType = function(conversionType, provider) {
        if (conversionType == System.DateTime.$GetType())
            return this;
        else
            if (conversionType == String.$GetType())
                return this.ToString();
            else
                throw System.InvalidCastException.prototype.$ctor.$new("Invalid cast from 'DateTime' to '" + conversionType.get_Name() + "'").InternalInit(new Error());
    };
    $p.System$IConvertible$ToType = $p.ToType;
    $t.op_Subtraction = function(left, right) {
        return System.TimeSpan.FromMilliseconds(left.value - right.value);
    };
    $p.Add = function(value) {
        return this.AddTicks(value.ticks);
    };
    $p.AddTicks = function(value) {
        var milliseconds = value / System.TimeSpan().TicksPerMillisecond;
        var newDate = new Date(this.value.getTime());
        newDate.setMilliseconds(newDate.getMilliseconds() + (milliseconds));
        return System.DateTime.prototype.$ctor$1.$new(newDate, 0);
    };
    $p.AddYears = function(value) {
        return this.AddMonths(value * 12);
    };
    $p.AddMonths = function(months) {
        var newDate = new Date(this.value.getTime());
        newDate.setMonth(newDate.getMonth() + months);
        return System.DateTime.prototype.$ctor$1.$new(newDate, 0);
    };
    $p.AddDays = function(value) {
        return this.Add$1(value, 86400000);
    };
    $p.AddHours = function(value) {
        return this.Add$1(value, 3600000);
    };
    $p.AddMilliseconds = function(value) {
        return this.Add$1(value, 1);
    };
    $p.AddMinutes = function(value) {
        return this.Add$1(value, 60000);
    };
    $p.AddSeconds = function(value) {
        return this.Add$1(value, 1000);
    };
    $p.Add$1 = function(value, scale) {
        var num = $trunc((value * scale + (value >= 0 ? 0.5 : -0.5)));
        return this.AddTicks(num * 10000);
    };
}).call(null, System.DateTime, System.DateTime.prototype);
$mscorlib$AssemblyTypes.push(System.DateTime);
System.DateTimeKind = $define("System.DateTimeKind", System.Enum);
(System.DateTimeKind.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.DateTimeKind";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DateTimeKind", $arrayinit([], System.Attribute));this.$type.Init("System.DateTimeKind", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.DateTimeKind, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Unspecified", System.DateTimeKind, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Utc", System.DateTimeKind, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Local", System.DateTimeKind, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.DateTimeKind.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Unspecified = $p.$ctor.$new("Unspecified", 0);
        $t.Utc = $p.$ctor.$new("Utc", System.DateTimeKind().Unspecified + 1);
        $t.Local = $p.$ctor.$new("Local", System.DateTimeKind().Utc + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.DateTimeKind, System.DateTimeKind.prototype);
$mscorlib$AssemblyTypes.push(System.DateTimeKind);
System.DayOfWeek = $define("System.DayOfWeek", System.Enum);
(System.DayOfWeek.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.DayOfWeek";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DayOfWeek", $arrayinit([], System.Attribute));this.$type.Init("System.DayOfWeek", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.DayOfWeek, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Sunday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Monday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Tuesday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Wednesday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Thursday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Friday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Saturday", System.DayOfWeek, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.DayOfWeek.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Sunday = $p.$ctor.$new("Sunday", 0);
        $t.Monday = $p.$ctor.$new("Monday", System.DayOfWeek().Sunday + 1);
        $t.Tuesday = $p.$ctor.$new("Tuesday", System.DayOfWeek().Monday + 1);
        $t.Wednesday = $p.$ctor.$new("Wednesday", System.DayOfWeek().Tuesday + 1);
        $t.Thursday = $p.$ctor.$new("Thursday", System.DayOfWeek().Wednesday + 1);
        $t.Friday = $p.$ctor.$new("Friday", System.DayOfWeek().Thursday + 1);
        $t.Saturday = $p.$ctor.$new("Saturday", System.DayOfWeek().Friday + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.DayOfWeek, System.DayOfWeek.prototype);
$mscorlib$AssemblyTypes.push(System.DayOfWeek);
System.Decimal = $define("decimal", System.ValueType);
(System.Decimal.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Decimal";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Decimal", $arrayinit([], System.Attribute));this.$type.Init("System.Decimal", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Decimal, System.ValueType, $arrayinit([System.IEquatable$1, System.IComparable$1, System.IComparable, System.IFormattable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Decimal.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("formatProvider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Decimal.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Decimal.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Decimal.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Decimal.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Decimal.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Decimal.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.ToString$1 = function(format, formatProvider) {
        return this.ToString();
    };
    $p.System$IFormattable$ToString = $p.ToString$1;
    $p.CompareTo$1 = function(obj) {
        return this.CompareTo(obj);
    };
    $p.System$IComparable$CompareTo = $p.CompareTo$1;
    $p.CompareTo = function(other) {
        return this.CompareTo(other);
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo;
    $p.Equals$2 = function(other) {
        return this == other;
    };
    $p.System$IEquatable$1$Equals = $p.Equals$2;
    $p.GetHashCode = function() {
        return System.Object.prototype.GetHashCode.call(this);
    };
    $p.Equals = function(obj) {
        return System.Object.prototype.Equals.call(this, obj);
    };
}).call(null, System.Decimal, System.Decimal.prototype);
$mscorlib$AssemblyTypes.push(System.Decimal);
System.Diagnostics.Debug = $define("System.Diagnostics.Debug", System.Object);
(System.Diagnostics.Debug.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Diagnostics.Debug";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Debug", $arrayinit([], System.Attribute));this.$type.Init("System.Diagnostics.Debug", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Diagnostics.Debug, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Assert", System.Diagnostics.Debug.prototype.Assert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("condition", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Diagnostics.Debug.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Assert = function(condition) {
        if (!condition)
            throw System.Exception.prototype.$ctor$1.$new("Assertion failed").InternalInit(new Error());
    };
}).call(null, System.Diagnostics.Debug, System.Diagnostics.Debug.prototype);
$mscorlib$AssemblyTypes.push(System.Diagnostics.Debug);
System.Double = $define("double", Number);
(System.Double.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = Number;
    $p.$typeName = "System.Double";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Double", $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_BaseType(System.Number);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Double", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Double, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Double.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", System.Double.prototype.ToExponential, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", System.Double.prototype.ToExponential$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", System.Double.prototype.ToFixed, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", System.Double.prototype.ToFixed$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", System.Double.prototype.ToPrecision, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", System.Double.prototype.ToPrecision$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("precision", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Double.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsNaN", System.Double.prototype.IsNaN, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Double.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Parse = function(s) {
        return parseFloat(s);
    };
    $p.ToExponential = function() {
        return null;
    };
    $p.ToExponential$1 = function(fractionDigits) {
        return null;
    };
    $p.ToFixed = function() {
        return null;
    };
    $p.ToFixed$1 = function(fractionDigits) {
        return null;
    };
    $p.ToPrecision = function() {
        return null;
    };
    $p.ToPrecision$1 = function(precision) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
    $t.IsNaN = function(value) {
        return value == Number().NaN;
    };
}).call(null, System.Double, System.Double.prototype);
$mscorlib$AssemblyTypes.push(System.Double);
System.Environment = $define("System.Environment", System.Object);
(System.Environment.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Environment";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Environment", $arrayinit([], System.Attribute));this.$type.Init("System.Environment", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Environment, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentManagedThreadId", System.Environment.prototype.get_CurrentManagedThreadId, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Environment.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("CurrentManagedThreadId", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CurrentManagedThreadId", System.Environment.prototype.get_CurrentManagedThreadId, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.get_CurrentManagedThreadId = function() {
        return 1;
    };
}).call(null, System.Environment, System.Environment.prototype);
$mscorlib$AssemblyTypes.push(System.Environment);
System.EventArgs = $define("System.EventArgs", System.Object);
(System.EventArgs.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.EventArgs";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("EventArgs", $arrayinit([], System.Attribute));this.$type.Init("System.EventArgs", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.EventArgs, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", System.EventArgs, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.EventArgs.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.EventArgs.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.Empty = System.EventArgs.prototype.$ctor.$new();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.EventArgs, System.EventArgs.prototype);
$mscorlib$AssemblyTypes.push(System.EventArgs);
System.FlagsAttribute = $define("System.FlagsAttribute", System.Attribute);
(System.FlagsAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.FlagsAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FlagsAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(16);$obj$.set_Inherited(false);$obj$.set_AllowMultiple(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.FlagsAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.FlagsAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.FlagsAttribute.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.FlagsAttribute, System.FlagsAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.FlagsAttribute);
System.FormatException = $define("System.FormatException", System.Exception);
(System.FormatException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.FormatException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FormatException", $arrayinit([], System.Attribute));this.$type.Init("System.FormatException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.FormatException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.FormatException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.FormatException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.FormatException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.FormatException, System.FormatException.prototype);
$mscorlib$AssemblyTypes.push(System.FormatException);
System.Func$1 = $define("System.Func<TResult>", System.MulticastDelegate);
(System.Func$1.$TypeInitializer = function($t, $p, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$1, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$1.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$1.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$1.prototype.Invoke, $arrayinit([], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$1, arguments)();
    };
    window.System.Func$1$ = $t.$;
    $p.Invoke = function() {
        return this();
    };
}).call(
    null, 
    System.Func$1, 
    System.Func$1.prototype, 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$1);
System.Func$2 = $define("System.Func<T1, TResult>", System.MulticastDelegate);
(System.Func$2.$TypeInitializer = function($t, $p, T1, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$2, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$2.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$2.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$2.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$2, arguments)();
    };
    window.System.Func$2$ = $t.$;
    $p.Invoke = function(arg1) {
        return this(arg1);
    };
}).call(
    null, 
    System.Func$2, 
    System.Func$2.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$2);
System.Func$3 = $define("System.Func<T1, T2, TResult>", System.MulticastDelegate);
(System.Func$3.$TypeInitializer = function($t, $p, T1, T2, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$3, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$3.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$3.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$3.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$3, arguments)();
    };
    window.System.Func$3$ = $t.$;
    $p.Invoke = function(arg1, arg2) {
        return this(arg1, arg2);
    };
}).call(
    null, 
    System.Func$3, 
    System.Func$3.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$3);
System.Func$4 = $define("System.Func<T1, T2, T3, TResult>", System.MulticastDelegate);
(System.Func$4.$TypeInitializer = function($t, $p, T1, T2, T3, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`4", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$4, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$4.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$4.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$4.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$4.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$4, arguments)();
    };
    window.System.Func$4$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3) {
        return this(arg1, arg2, arg3);
    };
}).call(
    null, 
    System.Func$4, 
    System.Func$4.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$4);
System.Func$5 = $define("System.Func<T1, T2, T3, T4, TResult>", System.MulticastDelegate);
(System.Func$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`5", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$5, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$5.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$5.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$5.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$5.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$5, arguments)();
    };
    window.System.Func$5$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4
        );
    };
}).call(
    null, 
    System.Func$5, 
    System.Func$5.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$5);
System.Func$6 = $define("System.Func<T1, T2, T3, T4, T5, TResult>", System.MulticastDelegate);
(System.Func$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`6", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$6, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$6.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$6.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$6.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$6.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$6, arguments)();
    };
    window.System.Func$6$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg
        );
    };
}).call(
    null, 
    System.Func$6, 
    System.Func$6.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$6);
System.Func$7 = $define("System.Func<T1, T2, T3, T4, T5, T6, TResult>", System.MulticastDelegate);
(System.Func$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`7", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$7, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$7.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$7.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$7.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$7.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$7, arguments)();
    };
    window.System.Func$7$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg, arg6) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg, 
            arg6
        );
    };
}).call(
    null, 
    System.Func$7, 
    System.Func$7.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$7);
System.Func$8 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, TResult>", System.MulticastDelegate);
(System.Func$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`8", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$8, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$8.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 8, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$8.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$8.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$8.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$8, arguments)();
    };
    window.System.Func$8$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg, arg6, arg7) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg, 
            arg6, 
            arg7
        );
    };
}).call(
    null, 
    System.Func$8, 
    System.Func$8.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$8);
System.Func$9 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>", System.MulticastDelegate);
(System.Func$9.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`9";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`9", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$9, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$9.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 8, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 9, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$9.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$9.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$9.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$9, arguments)();
    };
    window.System.Func$9$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg, arg6, arg7, arg8) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg, 
            arg6, 
            arg7, 
            arg8
        );
    };
}).call(
    null, 
    System.Func$9, 
    System.Func$9.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("T8", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$9);
System.Func$10 = $define("System.Func<T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult>", System.MulticastDelegate);
(System.Func$10.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, T8, T9, TResult) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.MulticastDelegate;
    $p.$typeName = "System.Func`10";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Func", $arrayinit([], System.Attribute));this.$type.Init("System.Func`10", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Func$10, System.MulticastDelegate, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("BeginInvoke", System.Func$10.prototype.BeginInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callback", System.AsyncCallback, 9, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 10, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IAsyncResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndInvoke", System.Func$10.prototype.EndInvoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.IAsyncResult, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Func$10.prototype.Invoke, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg8", T8, 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg9", T9, 8, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Func$10.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("object", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.IntPtr, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.MulticastDelegate.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Func$10, arguments)();
    };
    window.System.Func$10$ = $t.$;
    $p.Invoke = function(arg1, arg2, arg3, arg4, arg, arg6, arg7, arg8, arg9) {
        return this(
            arg1, 
            arg2, 
            arg3, 
            arg4, 
            arg, 
            arg6, 
            arg7, 
            arg8, 
            arg9
        );
    };
}).call(
    null, 
    System.Func$10, 
    System.Func$10.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("T8", System.Object), 
    $definetypeparameter("T9", System.Object), 
    $definetypeparameter("TResult", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Func$10);
System.GenericArray$1 = $define("System.GenericArray<T>", System.Object);
(System.GenericArray$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.GenericArray`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GenericArray", $arrayinit([], System.Attribute));this.$type.Init("System.GenericArray`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.GenericArray$1, System.Object, $arrayinit([System.Collections.Generic.IReadOnlyList$1, System.Collections.Generic.IReadOnlyCollection$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.GenericArray$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyList<T>.get_Item", System.GenericArray$1.prototype.System$Collections$Generic$IReadOnlyList$T$$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.GenericArray$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyList<T>.this[]", T, System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.Generic.IReadOnlyList<T>.get_Item", System.GenericArray$1.prototype.System$Collections$Generic$IReadOnlyList$T$$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.GenericArray$1, arguments)();
    };
    window.System.GenericArray$1$ = $t.$;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetEnumerator = function() {
        var array = this;
        return System.ArrayEnumerator$1$(T).prototype.$ctor.$new(array);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.System$Collections$Generic$IReadOnlyList$T$$get_Item = function(index) {
        var array = this;
        var result = array[index];
        return result;
    };
    $p.System$Collections$Generic$IReadOnlyList$1$get_Item = $p.System$Collections$Generic$IReadOnlyList$T$$get_Item;
}).call(
    null, 
    System.GenericArray$1, 
    System.GenericArray$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.GenericArray$1);
System.Globalization.CompareInfo = $define("System.Globalization.CompareInfo", System.Object);
(System.Globalization.CompareInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Globalization.CompareInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CompareInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Globalization.CompareInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Globalization.CompareInfo, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length1", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length2", System.Int32, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Globalization.CompareInfo.prototype.Compare$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("string1", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset1", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length1", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("string2", String, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("offset2", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length2", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.Globalization.CompareOptions, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CompareInfo.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Compare = function(string1, string2) {
        return this.Compare$1(string1, string2, System.Globalization.CompareOptions().None);
    };
    $p.Compare$1 = function(string1, string2, options) {
        return String.Compare(string1, string2);
    };
    $p.Compare$4 = function(string1, offset1, length1, string2, offset2, length2) {
        return this.Compare$5(
            string1, 
            offset1, 
            length1, 
            string2, 
            offset2, 
            length2, 
            System.Globalization.CompareOptions().None
        );
    };
    $p.Compare$3 = function(string1, offset1, string2, offset2, options) {
        return this.Compare$5(
            string1, 
            offset1, 
            string1 == null ? 0 : string1.length - offset1, 
            string2, 
            offset2, 
            string2 == null ? 0 : string2.length - offset2, 
            options
        );
    };
    $p.Compare$2 = function(string1, offset1, string2, offset2) {
        return this.Compare$3(
            string1, 
            offset1, 
            string2, 
            offset2, 
            System.Globalization.CompareOptions().None
        );
    };
    $p.Compare$5 = function(string1, offset1, length1, string2, offset2, length2, options) {
        return String.Compare$1(String.prototype.Substring.call(string1, offset1, length1), String.prototype.Substring.call(string2, offset2, length2), System.StringComparison().OrdinalIgnoreCase);
    };
}).call(null, System.Globalization.CompareInfo, System.Globalization.CompareInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CompareInfo);
System.Globalization.CompareOptions = $define("System.Globalization.CompareOptions", System.Enum);
(System.Globalization.CompareOptions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Globalization.CompareOptions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CompareOptions", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Globalization.CompareOptions", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Globalization.CompareOptions, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreCase", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreNonSpace", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreSymbols", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreKanaType", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreWidth", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 268435456, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("StringSort", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 536870912, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.Globalization.CompareOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1073741824, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CompareOptions.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.None = $p.$ctor.$new("None", 0);
        $t.IgnoreCase = $p.$ctor.$new("IgnoreCase", 1);
        $t.IgnoreNonSpace = $p.$ctor.$new("IgnoreNonSpace", 2);
        $t.IgnoreSymbols = $p.$ctor.$new("IgnoreSymbols", 4);
        $t.IgnoreKanaType = $p.$ctor.$new("IgnoreKanaType", 8);
        $t.IgnoreWidth = $p.$ctor.$new("IgnoreWidth", 16);
        $t.OrdinalIgnoreCase = $p.$ctor.$new("OrdinalIgnoreCase", 268435456);
        $t.StringSort = $p.$ctor.$new("StringSort", 536870912);
        $t.Ordinal = $p.$ctor.$new("Ordinal", 1073741824);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Globalization.CompareOptions, System.Globalization.CompareOptions.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CompareOptions);
System.Globalization.CultureInfo = $define("System.Globalization.CultureInfo", System.Object);
(System.Globalization.CultureInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Globalization.CultureInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CultureInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Globalization.CultureInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Globalization.CultureInfo, System.Object, $arrayinit([System.IFormatProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCulture", System.Globalization.CultureInfo, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCulture", System.Globalization.CultureInfo, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.Globalization.CultureInfo, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.Globalization.CultureInfo, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$CompareInfo$k__BackingField", System.Globalization.CompareInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Globalization.CultureInfo.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Globalization.CultureInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Globalization.CultureInfo.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CompareInfo", System.Globalization.CultureInfo.prototype.get_CompareInfo, $arrayinit([], System.Reflection.ParameterInfo), System.Globalization.CompareInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CompareInfo", System.Globalization.CultureInfo.prototype.set_CompareInfo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CompareInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFormat", System.Globalization.CultureInfo.prototype.GetFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("formatType", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Globalization.CultureInfo.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Globalization.CultureInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Globalization.CultureInfo.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CompareInfo", System.Globalization.CompareInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CompareInfo", System.Globalization.CultureInfo.prototype.get_CompareInfo, $arrayinit([], System.Reflection.ParameterInfo), System.Globalization.CompareInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CompareInfo", System.Globalization.CultureInfo.prototype.set_CompareInfo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CompareInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.CurrentCulture = System.Globalization.CultureInfo.prototype.$ctor.$new();
        $t.InvariantCulture = System.Globalization.CultureInfo.prototype.$ctor.$new();
        $t.Ordinal = System.Globalization.CultureInfo.prototype.$ctor.$new();
        $t.OrdinalIgnoreCase = System.Globalization.CultureInfo.prototype.$ctor.$new();
    };
    $p.get_Name = function() {return this.$Name$k__BackingField;};
    $p.set_Name = function(value) {this.$Name$k__BackingField = value;return value;};
    $p.get_CompareInfo = function() {return this.$CompareInfo$k__BackingField;};
    $p.set_CompareInfo = function(value) {this.$CompareInfo$k__BackingField = value;return value;};
    $p.$ctor = function() {
        this.$Name$k__BackingField = null;
        this.$CompareInfo$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
        this.set_CompareInfo(System.Globalization.CompareInfo.prototype.$ctor.$new());
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetFormat = function(formatType) {
        return null;
    };
    $p.System$IFormatProvider$GetFormat = $p.GetFormat;
}).call(null, System.Globalization.CultureInfo, System.Globalization.CultureInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Globalization.CultureInfo);
System.Guid = $define("System.Guid", System.ValueType);
(System.Guid.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Guid";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Guid", $arrayinit([], System.Attribute));this.$type.Init("System.Guid", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Guid, System.ValueType, $arrayinit([System.IEquatable$1, System.IComparable$1, System.IComparable, System.IFormattable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("value", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("NewGuid", System.Guid.prototype.NewGuid, $arrayinit([], System.Reflection.ParameterInfo), System.Guid, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Guid.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("formatProvider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Guid.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Guid.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Guid, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Guid.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Guid, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Guid.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.NewGuid = function() {
        return null;
    };
    $p.ToString$1 = function(format, formatProvider) {
        return this.value;
    };
    $p.System$IFormattable$ToString = $p.ToString$1;
    $p.CompareTo$1 = function(obj) {
        return this.value.CompareTo$1(($cast(System.Object, obj)).value);
    };
    $p.System$IComparable$CompareTo = $p.CompareTo$1;
    $p.CompareTo = function(other) {
        return this.value.CompareTo$1(other.value);
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo;
    $p.Equals$2 = function(other) {
        return this.value == other.value;
    };
    $p.System$IEquatable$1$Equals = $p.Equals$2;
}).call(null, System.Guid, System.Guid.prototype);
$mscorlib$AssemblyTypes.push(System.Guid);
System.IComparable = $define("System.IComparable", System.Object);
(System.IComparable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IComparable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparable", $arrayinit([], System.Attribute));this.$type.Init("System.IComparable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IComparable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.IComparable.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IComparable$CompareTo = function(obj) {};
}).call(null, System.IComparable, System.IComparable.prototype);
$mscorlib$AssemblyTypes.push(System.IComparable);
System.IComparable$1 = $define("System.IComparable<T>", System.Object);
(System.IComparable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IComparable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IComparable", $arrayinit([], System.Attribute));this.$type.Init("System.IComparable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IComparable$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.IComparable$1.prototype.System$IComparable$1$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.IComparable$1, arguments)();
    };
    window.System.IComparable$1$ = $t.$;
    $p.System$IComparable$1$CompareTo = function(other) {};
}).call(
    null, 
    System.IComparable$1, 
    System.IComparable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.IComparable$1);
System.IConvertible = $define("System.IConvertible", System.Object);
(System.IConvertible.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IConvertible";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IConvertible", $arrayinit([], System.Attribute));this.$type.Init("System.IConvertible", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IConvertible, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypeCode", System.IConvertible.prototype.System$IConvertible$GetTypeCode, $arrayinit([], System.Reflection.ParameterInfo), System.TypeCode, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToBoolean", System.IConvertible.prototype.System$IConvertible$ToBoolean, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToChar", System.IConvertible.prototype.System$IConvertible$ToChar, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Char, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToSByte", System.IConvertible.prototype.System$IConvertible$ToSByte, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.SByte, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToByte", System.IConvertible.prototype.System$IConvertible$ToByte, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Byte, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt16", System.IConvertible.prototype.System$IConvertible$ToInt16, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt16", System.IConvertible.prototype.System$IConvertible$ToUInt16, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt16, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt32", System.IConvertible.prototype.System$IConvertible$ToInt32, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt32", System.IConvertible.prototype.System$IConvertible$ToUInt32, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToInt64", System.IConvertible.prototype.System$IConvertible$ToInt64, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToUInt64", System.IConvertible.prototype.System$IConvertible$ToUInt64, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToSingle", System.IConvertible.prototype.System$IConvertible$ToSingle, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDouble", System.IConvertible.prototype.System$IConvertible$ToDouble, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDecimal", System.IConvertible.prototype.System$IConvertible$ToDecimal, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToDateTime", System.IConvertible.prototype.System$IConvertible$ToDateTime, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.DateTime, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.IConvertible.prototype.System$IConvertible$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToType", System.IConvertible.prototype.System$IConvertible$ToType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("conversionType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IConvertible$GetTypeCode = function() {};
    $p.System$IConvertible$ToBoolean = function(provider) {};
    $p.System$IConvertible$ToChar = function(provider) {};
    $p.System$IConvertible$ToSByte = function(provider) {};
    $p.System$IConvertible$ToByte = function(provider) {};
    $p.System$IConvertible$ToInt16 = function(provider) {};
    $p.System$IConvertible$ToUInt16 = function(provider) {};
    $p.System$IConvertible$ToInt32 = function(provider) {};
    $p.System$IConvertible$ToUInt32 = function(provider) {};
    $p.System$IConvertible$ToInt64 = function(provider) {};
    $p.System$IConvertible$ToUInt64 = function(provider) {};
    $p.System$IConvertible$ToSingle = function(provider) {};
    $p.System$IConvertible$ToDouble = function(provider) {};
    $p.System$IConvertible$ToDecimal = function(provider) {};
    $p.System$IConvertible$ToDateTime = function(provider) {};
    $p.System$IConvertible$ToString = function(provider) {};
    $p.System$IConvertible$ToType = function(conversionType, provider) {};
}).call(null, System.IConvertible, System.IConvertible.prototype);
$mscorlib$AssemblyTypes.push(System.IConvertible);
System.ICustomFormatter = $define("System.ICustomFormatter", System.Object);
(System.ICustomFormatter.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ICustomFormatter";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICustomFormatter", $arrayinit([], System.Attribute));this.$type.Init("System.ICustomFormatter", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.ICustomFormatter, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.ICustomFormatter.prototype.System$ICustomFormatter$Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("formatProvider", System.IFormatProvider, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$ICustomFormatter$Format = function(format, arg, formatProvider) {};
}).call(null, System.ICustomFormatter, System.ICustomFormatter.prototype);
$mscorlib$AssemblyTypes.push(System.ICustomFormatter);
System.IdentityFunction$1 = $define("System.IdentityFunction<T>", System.Object);
(System.IdentityFunction$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IdentityFunction`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IdentityFunction", $arrayinit([], System.Attribute));this.$type.Init("System.IdentityFunction`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.IdentityFunction$1, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Func$2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.IdentityFunction$1.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.IdentityFunction$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.Default = $delegate(this, System.Func$2$(T, T), function(x) {
            return x;
        });
    };
    $t.$ = function() {
        return $generic.call(null, System.IdentityFunction$1, arguments)();
    };
    window.System.IdentityFunction$1$ = $t.$;
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(
    null, 
    System.IdentityFunction$1, 
    System.IdentityFunction$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.IdentityFunction$1);
System.IDisposable = $define("System.IDisposable", System.Object);
(System.IDisposable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IDisposable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IDisposable", $arrayinit([], System.Attribute));this.$type.Init("System.IDisposable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IDisposable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Dispose", System.IDisposable.prototype.System$IDisposable$Dispose, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IDisposable$Dispose = function() {};
}).call(null, System.IDisposable, System.IDisposable.prototype);
$mscorlib$AssemblyTypes.push(System.IDisposable);
System.IEquatable$1 = $define("System.IEquatable<T>", System.Object);
(System.IEquatable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IEquatable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IEquatable", $arrayinit([], System.Attribute));this.$type.Init("System.IEquatable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IEquatable$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.IEquatable$1.prototype.System$IEquatable$1$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.IEquatable$1, arguments)();
    };
    window.System.IEquatable$1$ = $t.$;
    $p.System$IEquatable$1$Equals = function(other) {};
}).call(
    null, 
    System.IEquatable$1, 
    System.IEquatable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.IEquatable$1);
System.IFormatProvider = $define("System.IFormatProvider", System.Object);
(System.IFormatProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IFormatProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IFormatProvider", $arrayinit([], System.Attribute));this.$type.Init("System.IFormatProvider", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IFormatProvider, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetFormat", System.IFormatProvider.prototype.System$IFormatProvider$GetFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("formatType", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IFormatProvider$GetFormat = function(formatType) {};
}).call(null, System.IFormatProvider, System.IFormatProvider.prototype);
$mscorlib$AssemblyTypes.push(System.IFormatProvider);
System.IFormattable = $define("System.IFormattable", System.Object);
(System.IFormattable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IFormattable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IFormattable", $arrayinit([], System.Attribute));this.$type.Init("System.IFormattable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IFormattable, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.IFormattable.prototype.System$IFormattable$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("formatProvider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IFormattable$ToString = function(format, formatProvider) {};
}).call(null, System.IFormattable, System.IFormattable.prototype);
$mscorlib$AssemblyTypes.push(System.IFormattable);
System.Int16 = $define("short", System.ValueType);
(System.Int16.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Int16";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int16", $arrayinit([], System.Attribute));this.$type.Init("System.Int16", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Int16, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Int16.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Int16.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Int16.prototype.Parse$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Int16.prototype.ToString$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Int16.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Int16.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Int16.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Int16, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TryParse", System.Int16.prototype.TryParse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.Int16, 1, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int16.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $t.Parse = function(s) {
        var result = parseInt(s);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $t.Parse$1 = function(s, radix) {
        var result = parseInt(s, radix);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $p.ToString$2 = function(format) {
        return this.ToString$2(format);
    };
    $p.ToString$1 = function(radix) {
        return this.ToString$1(radix);
    };
    $p.CompareTo = function(obj) {
        return this.CompareTo$1($cast(System.Object, obj));
    };
    $p.CompareTo$1 = function(other) {
        return this - other;
    };
    $t.TryParse = function(s, result) {
        var returnValue = parseInt(s);
        if (isNaN(returnValue)) {
            result.value = 0;
            return false;
        }
        result.value = returnValue;
        return true;
    };
}).call(null, System.Int16, System.Int16.prototype);
$mscorlib$AssemblyTypes.push(System.Int16);
System.Int32 = $define("int", Number);
(System.Int32.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = Number;
    $p.$typeName = "System.Int32";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int32", $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_BaseType(System.Number);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Int32", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Int32, System.ValueType, $arrayinit([System.IComparable$1, System.IComparable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("MaxValue", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2147483647, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MinValue", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), -2147483648, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Int32.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Int32.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Int32.prototype.Parse$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Int32.prototype.ToString$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Int32.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Int32.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.Int32.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("TryParse", System.Int32.prototype.TryParse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.Int32, 1, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int32.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
        $t.MaxValue = 2147483647;
        $t.MinValue = -2147483648;
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $t.Parse = function(s) {
        var result = parseInt(s);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $t.Parse$1 = function(s, radix) {
        var result = parseInt(s, radix);
        if (isNaN(result))
            throw System.FormatException.prototype.$ctor$1.$new("String not convertible to int: " + s).InternalInit(new Error());
        return result;
    };
    $p.ToString$2 = function(format) {
        return this.ToString$2(format);
    };
    $p.ToString$1 = function(radix) {
        return this.ToString$1(radix);
    };
    $p.CompareTo$1 = function(obj) {
        return this.CompareTo($cast(System.Object, obj));
    };
    $p.System$IComparable$CompareTo = $p.CompareTo$1;
    $p.CompareTo = function(other) {
        return this - other;
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo;
    $t.TryParse = function(s, result) {
        var returnValue = parseInt(s);
        if (isNaN(returnValue)) {
            result.value = 0;
            return false;
        }
        result.value = returnValue;
        return true;
    };
}).call(null, System.Int32, System.Int32.prototype);
$mscorlib$AssemblyTypes.push(System.Int32);
System.Int64 = $define("long", System.ValueType);
(System.Int64.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Int64";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Int64", $arrayinit([], System.Attribute));this.$type.Init("System.Int64", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Int64, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("MinValue", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MaxValue", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Int64.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.Int64.prototype.Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.Int64.prototype.LocaleFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Int64.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Int64.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Int64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Int64.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
        $t.MinValue = -9.007199E+15;
        $t.MaxValue = 9.007199E+15;
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.Int64, System.Int64.prototype);
$mscorlib$AssemblyTypes.push(System.Int64);
System.InvalidCastException = $define("System.InvalidCastException", System.Exception);
(System.InvalidCastException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.InvalidCastException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvalidCastException", $arrayinit([], System.Attribute));this.$type.Init("System.InvalidCastException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.InvalidCastException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.InvalidCastException.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(message) {
        return new $p.$ctor.$type(this, message);
    };
}).call(null, System.InvalidCastException, System.InvalidCastException.prototype);
$mscorlib$AssemblyTypes.push(System.InvalidCastException);
System.InvalidOperationException = $define("System.InvalidOperationException", System.Exception);
(System.InvalidOperationException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.InvalidOperationException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvalidOperationException", $arrayinit([], System.Attribute));this.$type.Init("System.InvalidOperationException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.InvalidOperationException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.InvalidOperationException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.InvalidOperationException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.InvalidOperationException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.InvalidOperationException, System.InvalidOperationException.prototype);
$mscorlib$AssemblyTypes.push(System.InvalidOperationException);
System.IObservable$1 = $define("System.IObservable<T>", System.Object);
(System.IObservable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IObservable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IObservable", $arrayinit([], System.Attribute));this.$type.Init("System.IObservable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IObservable$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Subscribe", System.IObservable$1.prototype.System$IObservable$1$Subscribe, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("observer", System.IObserver$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.IDisposable, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.IObservable$1, arguments)();
    };
    window.System.IObservable$1$ = $t.$;
    $p.System$IObservable$1$Subscribe = function(observer) {};
}).call(
    null, 
    System.IObservable$1, 
    System.IObservable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.IObservable$1);
System.IObserver$1 = $define("System.IObserver<T>", System.Object);
(System.IObserver$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IObserver`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IObserver", $arrayinit([], System.Attribute));this.$type.Init("System.IObserver`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IObserver$1, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("OnNext", System.IObserver$1.prototype.System$IObserver$1$OnNext, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("OnError", System.IObserver$1.prototype.System$IObserver$1$OnError, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("error", System.Exception, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("OnCompleted", System.IObserver$1.prototype.System$IObserver$1$OnCompleted, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.IObserver$1, arguments)();
    };
    window.System.IObserver$1$ = $t.$;
    $p.System$IObserver$1$OnNext = function(value) {};
    $p.System$IObserver$1$OnError = function(error) {};
    $p.System$IObserver$1$OnCompleted = function() {};
}).call(
    null, 
    System.IObserver$1, 
    System.IObserver$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.IObserver$1);
System.IServiceProvider = $define("System.IServiceProvider", System.Object);
(System.IServiceProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.IServiceProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IServiceProvider", $arrayinit([], System.Attribute));this.$type.Init("System.IServiceProvider", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.IServiceProvider, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetService", System.IServiceProvider.prototype.System$IServiceProvider$GetService, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("serviceType", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$IServiceProvider$GetService = function(serviceType) {};
}).call(null, System.IServiceProvider, System.IServiceProvider.prototype);
$mscorlib$AssemblyTypes.push(System.IServiceProvider);
System.LazyThreadSafetyMode = $define("System.LazyThreadSafetyMode", System.Enum);
(System.LazyThreadSafetyMode.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.LazyThreadSafetyMode";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("LazyThreadSafetyMode", $arrayinit([], System.Attribute));this.$type.Init("System.LazyThreadSafetyMode", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.LazyThreadSafetyMode, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("ExecutionAndPublication", System.LazyThreadSafetyMode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.LazyThreadSafetyMode.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.ExecutionAndPublication = $p.$ctor.$new("ExecutionAndPublication", 0);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.LazyThreadSafetyMode, System.LazyThreadSafetyMode.prototype);
$mscorlib$AssemblyTypes.push(System.LazyThreadSafetyMode);
System.Lazy$1 = $define("System.Lazy<T>", System.Object);
(System.Lazy$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Lazy`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Lazy", $arrayinit([], System.Attribute));this.$type.Init("System.Lazy`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Lazy$1, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("PUBLICATION_ONLY_OR_ALREADY_INITIALIZED", System.Func$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_boxed", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_valueFactory", System.Func$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_threadSafeObj", System.Object, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Lazy$1.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetObjectFromMode", System.Lazy$1.prototype.GetObjectFromMode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("mode", System.LazyThreadSafetyMode, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Lazy$1.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValueForDebugDisplay", System.Lazy$1.prototype.get_ValueForDebugDisplay, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Mode", System.Lazy$1.prototype.get_Mode, $arrayinit([], System.Reflection.ParameterInfo), System.LazyThreadSafetyMode, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueFaulted", System.Lazy$1.prototype.get_IsValueFaulted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueCreated", System.Lazy$1.prototype.get_IsValueCreated, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Lazy$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LazyInitValue", System.Lazy$1.prototype.LazyInitValue, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateValue", System.Lazy$1.prototype.CreateValue, $arrayinit([], System.Reflection.ParameterInfo), System.Lazy$1.Boxed, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Lazy$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Lazy$1.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("valueFactory", System.Func$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.Lazy$1.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("mode", System.LazyThreadSafetyMode, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.Lazy$1.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("valueFactory", System.Func$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("mode", System.LazyThreadSafetyMode, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("ValueForDebugDisplay", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ValueForDebugDisplay", System.Lazy$1.prototype.get_ValueForDebugDisplay, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Mode", System.LazyThreadSafetyMode, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Mode", System.Lazy$1.prototype.get_Mode, $arrayinit([], System.Reflection.ParameterInfo), System.LazyThreadSafetyMode, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueFaulted", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueFaulted", System.Lazy$1.prototype.get_IsValueFaulted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueCreated", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueCreated", System.Lazy$1.prototype.get_IsValueCreated, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Lazy$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.PUBLICATION_ONLY_OR_ALREADY_INITIALIZED = $delegate(this, System.Func$1$(T), function() {
            return $default(T);
        });
    };
    $t.$ = function() {
        return $generic.call(null, System.Lazy$1, arguments)();
    };
    window.System.Lazy$1$ = $t.$;
    $t.Boxed = $define("System.Lazy<T>.Boxed", System.Object);
    ($t.Boxed.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Lazy`1.Boxed";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Boxed", $arrayinit([], System.Attribute));this.$type.Init("System.Lazy`1.Boxed", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Lazy$1.Boxed, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_value", T, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Lazy$1.Boxed.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.Boxed, arguments)();
        };
        this.Boxed$ = $t.$;
        $p.$ctor = function(value) {
            this.m_value = $default(T);
            System.Object.prototype.$ctor.call(this);
            this.m_value = value;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(value) {
            return new $p.$ctor.$type(this, value);
        };
    }).call($t, $t.Boxed, $t.Boxed.prototype);
    $mscorlib$AssemblyTypes.push($t.Boxed);
    $t.LazyInternalExceptionHolder = $define("System.Lazy<T>.LazyInternalExceptionHolder", System.Object);
    ($t.LazyInternalExceptionHolder.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Lazy`1.LazyInternalExceptionHolder";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("LazyInternalExceptionHolder", $arrayinit([], System.Attribute));this.$type.Init("System.Lazy`1.LazyInternalExceptionHolder", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Lazy$1.LazyInternalExceptionHolder, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_exception", System.Exception, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Lazy$1.LazyInternalExceptionHolder.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("ex", System.Exception, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.LazyInternalExceptionHolder, arguments)();
        };
        this.LazyInternalExceptionHolder$ = $t.$;
        $p.$ctor = function(ex) {
            this.m_exception = null;
            System.Object.prototype.$ctor.call(this);
            this.m_exception = ex;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(ex) {
            return new $p.$ctor.$type(this, ex);
        };
    }).call($t, $t.LazyInternalExceptionHolder, $t.LazyInternalExceptionHolder.prototype);
    $mscorlib$AssemblyTypes.push($t.LazyInternalExceptionHolder);
    $p.$ctor = function() {
        this.m_boxed = null;
        this.m_valueFactory = null;
        this.m_threadSafeObj = null;
        System.Lazy$1$(T).prototype.$ctor$2.call(this, System.LazyThreadSafetyMode().ExecutionAndPublication);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(valueFactory) {
        this.m_boxed = null;
        this.m_valueFactory = null;
        this.m_threadSafeObj = null;
        System.Lazy$1$(T).prototype.$ctor$3.call(this, valueFactory, System.LazyThreadSafetyMode().ExecutionAndPublication);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(valueFactory) {
        return new $p.$ctor$1.$type(this, valueFactory);
    };
    $p.$ctor$2 = function(mode) {
        this.m_boxed = null;
        this.m_valueFactory = null;
        this.m_threadSafeObj = null;
        System.Object.prototype.$ctor.call(this);
        this.m_threadSafeObj = System.Lazy$1$(T).GetObjectFromMode(mode);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(mode) {
        return new $p.$ctor$2.$type(this, mode);
    };
    $p.$ctor$3 = function(valueFactory, mode) {
        this.m_boxed = null;
        this.m_valueFactory = null;
        this.m_threadSafeObj = null;
        System.Object.prototype.$ctor.call(this);
        if (valueFactory == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("valueFactory").InternalInit(new Error());
        this.m_threadSafeObj = System.Lazy$1$(T).GetObjectFromMode(mode);
        this.m_valueFactory = valueFactory;
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(valueFactory, mode) {
        return new $p.$ctor$3.$type(this, valueFactory, mode);
    };
    $t.GetObjectFromMode = function(mode) {
        if (mode.GetValue() == System.LazyThreadSafetyMode().ExecutionAndPublication.GetValue())
            return System.Object.prototype.$ctor.$new();
        return null;
    };
    $p.ToString = function() {
        return this.get_IsValueCreated() ? this.get_Value().ToString() : "Lazy_ToString_ValueNotCreated";
    };
    $p.get_ValueForDebugDisplay = function() {
        if (!this.get_IsValueCreated()) {
            return $default(T);
        }
        return ($cast(System.Object, this.m_boxed)).m_value;
    };
    $p.get_Mode = function() {
        return System.LazyThreadSafetyMode().ExecutionAndPublication;
    };
    $p.get_IsValueFaulted = function() {
        return System.Lazy$1$(T).LazyInternalExceptionHolder$().$GetType().IsInstanceOfType(this.m_boxed);
    };
    $p.get_IsValueCreated = function() {
        return this.m_boxed != null && System.Lazy$1$(T).Boxed$().$GetType().IsInstanceOfType(this.m_boxed);
    };
    $p.get_Value = function() {
        var boxed = null;
        if (this.m_boxed != null) {
            boxed = (function() {
                var $as$ = this.m_boxed;
                if (!System.Type.prototype.IsInstanceOfType.call(System.Lazy$1$(T).Boxed$().$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (boxed != null) {
                return boxed.m_value;
            }
            var exc = (function() {
                var $as$ = this.m_boxed;
                if (!System.Type.prototype.IsInstanceOfType.call(System.Lazy$1$(T).LazyInternalExceptionHolder$().$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            System.Diagnostics.Debug.Assert(this.m_boxed != null);
            throw exc.m_exception.InternalInit(new Error());
        }
        return this.LazyInitValue();
    };
    $p.LazyInitValue = function() {
        var boxed = null;
        var mode = this.get_Mode();
        if (this.m_boxed == null) {
            boxed = this.CreateValue();
            this.m_boxed = boxed;
        }
        else {
            boxed = (function() {
                var $as$ = this.m_boxed;
                if (!System.Type.prototype.IsInstanceOfType.call(System.Lazy$1$(T).Boxed$().$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (boxed == null) {
                var exHolder = (function() {
                    var $as$ = this.m_boxed;
                    if (!System.Type.prototype.IsInstanceOfType.call(System.Lazy$1$(T).LazyInternalExceptionHolder$().$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                System.Diagnostics.Debug.Assert(exHolder != null);
                throw exHolder.m_exception.InternalInit(new Error());
            }
        }
        System.Diagnostics.Debug.Assert(boxed != null);
        return boxed.m_value;
    };
    $p.CreateValue = function() {
        var boxed = null;
        var mode = this.get_Mode();
        if (this.m_valueFactory != null) {
            try {
                if (this.m_valueFactory == System.Lazy$1$(T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED)
                    throw System.InvalidOperationException.prototype.$ctor$1.$new("Lazy_Value_RecursiveCallsToValue").InternalInit(new Error());
                var factory = this.m_valueFactory;
                this.m_valueFactory = System.Lazy$1$(T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED;
                boxed = System.Lazy$1$(T).Boxed$().prototype.$ctor.$new(factory());
            }
            catch (ex) {
                this.m_boxed = System.Lazy$1$(T).LazyInternalExceptionHolder$().prototype.$ctor.$new(ex);
                throw ex;
            }
        }
        else {
            boxed = System.Lazy$1$(T).Boxed$().prototype.$ctor.$new($cast(System.Object, System.Activator.CreateInstance(T.$GetType())));
        }
        return boxed;
    };
}).call(
    null, 
    System.Lazy$1, 
    System.Lazy$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Lazy$1);
System.System_LazyDebugView$1 = $define("System.System_LazyDebugView<T>", System.Object);
(System.System_LazyDebugView$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.System_LazyDebugView`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("System_LazyDebugView", $arrayinit([], System.Attribute));this.$type.Init("System.System_LazyDebugView`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.System_LazyDebugView$1, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_lazy", System.Lazy$1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueCreated", System.System_LazyDebugView$1.prototype.get_IsValueCreated, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.System_LazyDebugView$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Mode", System.System_LazyDebugView$1.prototype.get_Mode, $arrayinit([], System.Reflection.ParameterInfo), System.LazyThreadSafetyMode, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueFaulted", System.System_LazyDebugView$1.prototype.get_IsValueFaulted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.System_LazyDebugView$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("lazy", System.Lazy$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueCreated", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueCreated", System.System_LazyDebugView$1.prototype.get_IsValueCreated, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.System_LazyDebugView$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Mode", System.LazyThreadSafetyMode, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Mode", System.System_LazyDebugView$1.prototype.get_Mode, $arrayinit([], System.Reflection.ParameterInfo), System.LazyThreadSafetyMode, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueFaulted", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueFaulted", System.System_LazyDebugView$1.prototype.get_IsValueFaulted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.System_LazyDebugView$1, arguments)();
    };
    window.System.System_LazyDebugView$1$ = $t.$;
    $p.$ctor = function(lazy) {
        this.m_lazy = null;
        System.Object.prototype.$ctor.call(this);
        this.m_lazy = lazy;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(lazy) {
        return new $p.$ctor.$type(this, lazy);
    };
    $p.get_IsValueCreated = function() {
        return this.m_lazy.get_IsValueCreated();
    };
    $p.get_Value = function() {
        return this.m_lazy.get_ValueForDebugDisplay();
    };
    $p.get_Mode = function() {
        return this.m_lazy.get_Mode();
    };
    $p.get_IsValueFaulted = function() {
        return this.m_lazy.get_IsValueFaulted();
    };
}).call(
    null, 
    System.System_LazyDebugView$1, 
    System.System_LazyDebugView$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.System_LazyDebugView$1);
System.Linq.Enumerable = $define("System.Linq.Enumerable", System.Object);
(System.Linq.Enumerable.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Enumerable";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Enumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([(function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate", System.Linq.Enumerable.prototype.Aggregate, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3$(TSource, TSource, TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TAccumulate = $definetypeparameter("TAccumulate", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate", System.Linq.Enumerable.prototype.Aggregate$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("seed", TAccumulate, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3$(TAccumulate, TSource, TAccumulate), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TAccumulate, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TAccumulate = $definetypeparameter("TAccumulate", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Aggregate", System.Linq.Enumerable.prototype.Aggregate$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("seed", TAccumulate, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("func", System.Func$3$(TAccumulate, TSource, TAccumulate), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$2$(TAccumulate, TResult), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TResult, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("All", System.Linq.Enumerable.prototype.All, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Where", System.Linq.Enumerable.prototype.Where, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Where", System.Linq.Enumerable.prototype.Where$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("First", System.Linq.Enumerable.prototype.First$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("FirstOrDefault", System.Linq.Enumerable.prototype.FirstOrDefault$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("First", System.Linq.Enumerable.prototype.First, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("FirstOrDefault", System.Linq.Enumerable.prototype.FirstOrDefault, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("FirstOrDefault", System.Linq.Enumerable.prototype.FirstOrDefault$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Func$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Last", System.Linq.Enumerable.prototype.Last$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("LastOrDefault", System.Linq.Enumerable.prototype.LastOrDefault$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Last", System.Linq.Enumerable.prototype.Last, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("LastOrDefault", System.Linq.Enumerable.prototype.LastOrDefault, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("LastOrDefault", System.Linq.Enumerable.prototype.LastOrDefault$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Func$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Single", System.Linq.Enumerable.prototype.Single$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault", System.Linq.Enumerable.prototype.SingleOrDefault$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Single", System.Linq.Enumerable.prototype.Single, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault", System.Linq.Enumerable.prototype.SingleOrDefault, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SingleOrDefault", System.Linq.Enumerable.prototype.SingleOrDefault$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Func$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToArray", System.Linq.Enumerable.prototype.ToArray, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(TSource), System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToList", System.Linq.Enumerable.prototype.ToList, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Select", System.Linq.Enumerable.prototype.Select, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, TResult), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Select", System.Linq.Enumerable.prototype.Select$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3$(TSource, System.Int32, TResult), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany", System.Linq.Enumerable.prototype.SelectMany, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, System.Collections.Generic.IEnumerable$1$(TResult)), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany", System.Linq.Enumerable.prototype.SelectMany$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3$(TSource, System.Int32, System.Collections.Generic.IEnumerable$1$(TResult)), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TCollection = $definetypeparameter("TCollection", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany", System.Linq.Enumerable.prototype.SelectMany$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$3$(TSource, System.Int32, System.Collections.Generic.IEnumerable$1$(TCollection)), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TSource, TCollection, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TCollection = $definetypeparameter("TCollection", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SelectMany", System.Linq.Enumerable.prototype.SelectMany$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$2$(TSource, System.Collections.Generic.IEnumerable$1$(TCollection)), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TSource, TCollection, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Take", System.Linq.Enumerable.prototype.Take, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("TakeWhile", System.Linq.Enumerable.prototype.TakeWhile, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("TakeWhile", System.Linq.Enumerable.prototype.TakeWhile$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Skip", System.Linq.Enumerable.prototype.Skip, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SkipWhile", System.Linq.Enumerable.prototype.SkipWhile, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SkipWhile", System.Linq.Enumerable.prototype.SkipWhile$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TOuter = $definetypeparameter("TOuter", System.Object);var TInner = $definetypeparameter("TInner", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Join", System.Linq.Enumerable.prototype.Join, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1$(TOuter), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1$(TInner), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2$(TOuter, TKey), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2$(TInner, TKey), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TOuter, TInner, TResult), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Any", System.Linq.Enumerable.prototype.Any, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Any", System.Linq.Enumerable.prototype.Any$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Linq.Enumerable.prototype.Max, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Linq.Enumerable.prototype.Min, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", System.Linq.Enumerable.prototype.Concat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Sum", System.Linq.Enumerable.prototype.Sum, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Int32), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sum", System.Linq.Enumerable.prototype.Sum$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Nullable$1$(System.Int32)), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Sum", System.Linq.Enumerable.prototype.Sum$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, System.Int32), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Repeat", System.Linq.Enumerable.prototype.Repeat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("element", TResult, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Reverse", System.Linq.Enumerable.prototype.Reverse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToDictionary", System.Linq.Enumerable.prototype.ToDictionary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TValue = $definetypeparameter("TValue", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToDictionary", System.Linq.Enumerable.prototype.ToDictionary$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("valueSelector", System.Func$2$(TSource, TValue), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SequenceEqual", System.Linq.Enumerable.prototype.SequenceEqual, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("SequenceEqual", System.Linq.Enumerable.prototype.SequenceEqual$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Cast", System.Linq.Enumerable.prototype.Cast, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("OrderBy", System.Linq.Enumerable.prototype.OrderBy, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("OrderBy", System.Linq.Enumerable.prototype.OrderBy$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("OrderByDescending", System.Linq.Enumerable.prototype.OrderByDescending, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("OrderByDescending", System.Linq.Enumerable.prototype.OrderByDescending$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ThenBy", System.Linq.Enumerable.prototype.ThenBy, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Linq.IOrderedEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ThenBy", System.Linq.Enumerable.prototype.ThenBy$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Linq.IOrderedEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ThenByDescending", System.Linq.Enumerable.prototype.ThenByDescending, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Linq.IOrderedEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ThenByDescending", System.Linq.Enumerable.prototype.ThenByDescending$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Linq.IOrderedEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("OfType", System.Linq.Enumerable.prototype.OfType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Empty", System.Linq.Enumerable.prototype.Empty, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("DefaultIfEmpty", System.Linq.Enumerable.prototype.DefaultIfEmpty, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("DefaultIfEmpty", System.Linq.Enumerable.prototype.DefaultIfEmpty$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", TSource, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TSource), TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TElement), TResult), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TSource), TResult), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("GroupBy", System.Linq.Enumerable.prototype.GroupBy$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TElement), TResult), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToLookup", System.Linq.Enumerable.prototype.ToLookup, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.ILookup$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToLookup", System.Linq.Enumerable.prototype.ToLookup$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.ILookup$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToLookup", System.Linq.Enumerable.prototype.ToLookup$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.ILookup$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);var TKey = $definetypeparameter("TKey", System.Object);var TElement = $definetypeparameter("TElement", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ToLookup", System.Linq.Enumerable.prototype.ToLookup$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.ILookup$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Distinct", System.Linq.Enumerable.prototype.Distinct, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Distinct", System.Linq.Enumerable.prototype.Distinct$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ElementAt", System.Linq.Enumerable.prototype.ElementAt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("ElementAtOrDefault", System.Linq.Enumerable.prototype.ElementAtOrDefault, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), TSource, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Range", System.Linq.Enumerable.prototype.Range, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("start", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var TFirst = $definetypeparameter("TFirst", System.Object);var TSecond = $definetypeparameter("TSecond", System.Object);var TResult = $definetypeparameter("TResult", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Zip", System.Linq.Enumerable.prototype.Zip, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TFirst), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSecond), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TFirst, TSecond, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Union", System.Linq.Enumerable.prototype.Union, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Union", System.Linq.Enumerable.prototype.Union$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Intersect", System.Linq.Enumerable.prototype.Intersect, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Intersect", System.Linq.Enumerable.prototype.Intersect$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, System.Double), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Nullable$1$(System.Double)), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Double), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$8, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Nullable$1$(System.Double)), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("onEmpty", System.Func$1$(System.Nullable$1$(System.Double)), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, System.Int64), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Nullable$1$(System.Int64)), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Int64), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Nullable$1$(System.Int32)), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Average", System.Linq.Enumerable.prototype.Average$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(System.Int32), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Count", System.Linq.Enumerable.prototype.Count, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Count", System.Linq.Enumerable.prototype.Count$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("LongCount", System.Linq.Enumerable.prototype.LongCount, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("LongCount", System.Linq.Enumerable.prototype.LongCount$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Linq.Enumerable.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TSource, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Linq.Enumerable.prototype.Contains$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", TSource, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Except", System.Linq.Enumerable.prototype.Except, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var TSource = $definetypeparameter("TSource", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Except", System.Linq.Enumerable.prototype.Except$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.Aggregate = function(TSource, source, func) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        try {
            if (!enumerator.System$Collections$IEnumerator$MoveNext())
                throw System.InvalidOperationException.prototype.$ctor$1.$new("No elements").InternalInit(new Error());
            var current = enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
            while (enumerator.System$Collections$IEnumerator$MoveNext()) {
                current = func(current, enumerator.System$Collections$Generic$IEnumerator$1$get_Current());
            }
            return current;
        }
        finally {
            enumerator.System$IDisposable$Dispose();
        }

    };
    $t.Aggregate$1 = function(TSource, TAccumulate, source, seed, func) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        var accumulate = seed;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                accumulate = func(accumulate, current);
            }
        }
        return accumulate;
    };
    $t.Aggregate$2 = function(TSource, TAccumulate, TResult, source, seed, func, resultSelector) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (func == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("func").InternalInit(new Error());
        if (resultSelector == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
        var accumulate = seed;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                accumulate = func(accumulate, current);
            }
        }
        return resultSelector(accumulate);
    };
    $t.All = function(TSource, source, predicate) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (predicate == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var current = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (!predicate(current))
                    return false;
            }
        }
        return true;
    };
    $t.Where = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$Where$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.Where$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$Where$1$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.First$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.First(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.FirstOrDefault$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.FirstOrDefault(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.First = function(TSource, source) {
        return System.Linq.Enumerable.FirstOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Sequence contains no elements").InternalInit(new Error());
        }));
    };
    $t.FirstOrDefault = function(TSource, source) {
        return System.Linq.Enumerable.FirstOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            return $default(TSource);
        }));
    };
    $t.FirstOrDefault$2 = function(TSource, source, defaultValue) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        if (!enumerator.System$Collections$IEnumerator$MoveNext())
            return defaultValue();
        var result = enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
        enumerator.System$IDisposable$Dispose();
        return result;
    };
    $t.Last$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.Last(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.LastOrDefault$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.LastOrDefault(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.Last = function(TSource, source) {
        return System.Linq.Enumerable.LastOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Sequence contains no elements").InternalInit(new Error());
        }));
    };
    $t.LastOrDefault = function(TSource, source) {
        return System.Linq.Enumerable.LastOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            return $default(TSource);
        }));
    };
    $t.LastOrDefault$2 = function(TSource, source, defaultValue) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        if (!enumerator.System$Collections$IEnumerator$MoveNext())
            return defaultValue();
        var lastValue = enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
        while (enumerator.System$Collections$IEnumerator$MoveNext()) {
            lastValue = enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
        }
        enumerator.System$IDisposable$Dispose();
        return lastValue;
    };
    $t.Single$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.Single(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.SingleOrDefault$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.SingleOrDefault(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.Single = function(TSource, source) {
        return System.Linq.Enumerable.SingleOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Sequence contains no elements").InternalInit(new Error());
        }));
    };
    $t.SingleOrDefault = function(TSource, source) {
        return System.Linq.Enumerable.SingleOrDefault$2(TSource, source, $delegate(this, System.Func$1$(TSource), function() {
            return $default(TSource);
        }));
    };
    $t.SingleOrDefault$2 = function(TSource, source, defaultValue) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        if (!enumerator.System$Collections$IEnumerator$MoveNext())
            return defaultValue();
        var result = enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
        if (enumerator.System$Collections$IEnumerator$MoveNext())
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Sequence contains more than one element").InternalInit(new Error());
        enumerator.System$IDisposable$Dispose();
        return result;
    };
    $t.ToArray = function(TSource, source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var result = $arrayinit(new Array(0), TSource);
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                result.push(item);
            }
        }
        return result;
    };
    $t.ToList = function(TSource, source) {
        var list = System.Collections.Generic.List$1$(TSource).prototype.$ctor.$new();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                list.Add(item);
            }
        }
        return list;
    };
    $t.Select = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$Select$2$(TSource, TResult).prototype.$ctor.$new(source, selector);
    };
    $t.Select$1 = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$Select$1$2$(TSource, TResult).prototype.$ctor.$new(source, selector);
    };
    $t.SelectMany = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$(TSource, TResult).prototype.$ctor.$new(source, selector);
    };
    $t.SelectMany$1 = function(TSource, TResult, source, selector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2$(TSource, TResult).prototype.$ctor.$new(source, selector);
    };
    $t.SelectMany$3 = function(TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3$(TSource, TCollection, TResult).prototype.$ctor.$new(source, collectionSelector, resultSelector);
    };
    $t.SelectMany$2 = function(TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3$(TSource, TCollection, TResult).prototype.$ctor.$new(source, collectionSelector, resultSelector);
    };
    $t.Take = function(TSource, source, count) {
        return System.Linq.Enumerable.YieldEnumerator$Take$1$(TSource).prototype.$ctor.$new(source, count);
    };
    $t.TakeWhile = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.TakeWhile$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.Skip = function(TSource, source, count) {
        return System.Linq.Enumerable.YieldEnumerator$Skip$1$(TSource).prototype.$ctor.$new(source, count);
    };
    $t.SkipWhile = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.SkipWhile$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1$(TSource).prototype.$ctor.$new(source, predicate);
    };
    $t.Join = function(TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$Join$4$(
            TOuter, 
            TInner, 
            TKey, 
            TResult
        ).prototype.$ctor.$new(
            outer, 
            inner, 
            outerKeySelector, 
            innerKeySelector, 
            resultSelector
        );
    };
    $t.Any = function(TSource, source) {
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        var result = enumerator.System$Collections$IEnumerator$MoveNext();
        enumerator.System$IDisposable$Dispose();
        return result;
    };
    $t.Any$1 = function(TSource, source, predicate) {
        return System.Linq.Enumerable.Any(TSource, System.Linq.Enumerable.Where(TSource, source, predicate));
    };
    $t.Max = function(TSource, source) {
        var current = $default(TSource);
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (item == null)
                    continue;
                if (current == null) {
                    current = item;
                    continue;
                }
                var comparable = (function() {
                    var $as$ = item;
                    if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (comparable.System$IComparable$CompareTo(current) > 0)
                    current = item;
            }
        }
        return current;
    };
    $t.Min = function(TSource, source) {
        var current = $default(TSource);
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (item == null)
                    continue;
                if (current == null) {
                    current = item;
                    continue;
                }
                var comparable = (function() {
                    var $as$ = item;
                    if (!System.Type.prototype.IsInstanceOfType.call(System.IComparable.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (comparable.System$IComparable$CompareTo(current) < 0)
                    current = item;
            }
        }
        return current;
    };
    $t.Concat = function(T, source, other) {
        return System.Linq.Enumerable.YieldEnumerator$Concat$1$(T).prototype.$ctor.$new(source, other);
    };
    $t.Sum = function(source) {
        return System.Linq.Enumerable.Sum$1(source);
    };
    $t.Sum$1 = function(source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var num = 0;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var nullable = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if ((nullable != null))
                    num += nullable;
            }
        }
        return num;
    };
    $t.Sum$2 = function(TSource, source, selector) {
        return System.Linq.Enumerable.Sum(System.Linq.Enumerable.Select(
            TSource, 
            System.Int32, 
            source, 
            selector
        ));
    };
    $t.Repeat = function(TResult, element, count) {
        return System.Linq.Enumerable.YieldEnumerator$Repeat$1$(TResult).prototype.$ctor.$new(element, count);
    };
    $t.Reverse = function(TSource, source) {
        var stack = System.Collections.Generic.Stack$1$(TSource).prototype.$ctor.$new();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                stack.Push(item);
            }
        }
        return stack;
    };
    $t.ToDictionary = function(TSource, TKey, source, keySelector) {
        return System.Linq.Enumerable.ToDictionary$1(
            TSource, 
            TKey, 
            TSource, 
            source, 
            keySelector, 
            $delegate(this, System.Func$2$(TSource, TSource), function(x) {
                return x;
            })
        );
    };
    $t.ToDictionary$1 = function(TSource, TKey, TValue, source, keySelector, valueSelector) {
        var dictionary = System.Collections.Generic.Dictionary$2$(TKey, TValue).prototype.$ctor.$new();
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                var key = keySelector(item);
                var value = valueSelector(item);
                dictionary.set_Item(key, value);
            }
        }
        return dictionary;
    };
    $t.SequenceEqual = function(TSource, source, other) {
        return System.Linq.Enumerable.SequenceEqual$1(
            TSource, 
            source, 
            other, 
            System.Collections.Generic.EqualityComparer$1$(TSource).get_Default()
        );
    };
    $t.SequenceEqual$1 = function(TSource, source, other, comparer) {
        var sourceEnumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        var otherEnumerator = other.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        while (sourceEnumerator.System$Collections$IEnumerator$MoveNext() && otherEnumerator.System$Collections$IEnumerator$MoveNext()) {
            var sourceItem = sourceEnumerator.System$Collections$Generic$IEnumerator$1$get_Current();
            var otherItem = otherEnumerator.System$Collections$Generic$IEnumerator$1$get_Current();
            if (!comparer.System$Collections$Generic$IEqualityComparer$1$Equals(sourceItem, otherItem))
                return false;
        }
        return true;
    };
    $t.Cast = function(TResult, source) {
        return System.Linq.Enumerable.YieldEnumerator$Cast$1$(TResult).prototype.$ctor.$new(source);
    };
    $t.OrderBy = function(TSource, TKey, source, keySelector) {
        return System.Linq.OrderedEnumerable$1$(TSource).Create(
            TKey, 
            source, 
            keySelector, 
            System.Collections.Generic.Comparer$1$(TKey).get_Default(), 
            false
        );
    };
    $t.OrderBy$1 = function(TSource, TKey, source, keySelector, comparer) {
        return System.Linq.OrderedEnumerable$1$(TSource).Create(
            TKey, 
            source, 
            keySelector, 
            comparer, 
            false
        );
    };
    $t.OrderByDescending = function(TSource, TKey, source, keySelector) {
        return System.Linq.OrderedEnumerable$1$(TSource).Create(
            TKey, 
            source, 
            keySelector, 
            System.Collections.Generic.Comparer$1$(TKey).get_Default(), 
            true
        );
    };
    $t.OrderByDescending$1 = function(TSource, TKey, source, keySelector, comparer) {
        return System.Linq.OrderedEnumerable$1$(TSource).Create(
            TKey, 
            source, 
            keySelector, 
            comparer, 
            true
        );
    };
    $t.ThenBy = function(TSource, TKey, source, keySelector) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        else
            return source.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable(
                TKey, 
                keySelector, 
                System.Collections.Generic.Comparer$1$(TKey).get_Default(), 
                false
            );
    };
    $t.ThenBy$1 = function(TSource, TKey, source, keySelector, comparer) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        else
            return source.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable(
                TKey, 
                keySelector, 
                comparer, 
                false
            );
    };
    $t.ThenByDescending = function(TSource, TKey, source, keySelector) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        else
            return source.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable(
                TKey, 
                keySelector, 
                System.Collections.Generic.Comparer$1$(TKey).get_Default(), 
                true
            );
    };
    $t.ThenByDescending$1 = function(TSource, TKey, source, keySelector, comparer) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        else
            return source.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable(
                TKey, 
                keySelector, 
                comparer, 
                true
            );
    };
    $t.OfType = function(TResult, source) {
        return System.Linq.Enumerable.YieldEnumerator$OfType$1$(TResult).prototype.$ctor.$new(source);
    };
    $t.Empty = function(TResult) {
        return System.Linq.Enumerable.YieldEnumerator$Empty$1$(TResult).prototype.$ctor.$new();
    };
    $t.DefaultIfEmpty = function(TSource, source) {
        return System.Linq.Enumerable.DefaultIfEmpty$1(TSource, source, $default(TSource));
    };
    $t.DefaultIfEmpty$1 = function(TSource, source, defaultValue) {
        return System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1$(TSource).prototype.$ctor.$new(source, defaultValue);
    };
    $t.GroupBy = function(TSource, TKey, source, keySelector) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TSource, 
            System.Linq.IGrouping$2$(TKey, TSource), 
            source, 
            keySelector, 
            System.IdentityFunction$1$(TSource).Default, 
            $delegate(
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource), 
                System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TSource), System.Linq.IGrouping$2$(TKey, TSource)), 
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource).Create, 
                "Create$delegate"
            ), 
            System.Collections.Generic.EqualityComparer$1$(TKey).get_Default()
        );
    };
    $t.GroupBy$1 = function(TSource, TKey, source, keySelector, comparer) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TSource, 
            System.Linq.IGrouping$2$(TKey, TSource), 
            source, 
            keySelector, 
            System.IdentityFunction$1$(TSource).Default, 
            $delegate(
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource), 
                System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TSource), System.Linq.IGrouping$2$(TKey, TSource)), 
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource).Create, 
                "Create$delegate"
            ), 
            comparer
        );
    };
    $t.GroupBy$3 = function(TSource, TKey, TElement, source, keySelector, elementSelector) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TElement, 
            System.Linq.IGrouping$2$(TKey, TElement), 
            source, 
            keySelector, 
            elementSelector, 
            $delegate(
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TElement), 
                System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TElement), System.Linq.IGrouping$2$(TKey, TElement)), 
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TElement).Create, 
                "Create$delegate"
            ), 
            System.Collections.Generic.EqualityComparer$1$(TKey).get_Default()
        );
    };
    $t.GroupBy$5 = function(TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TElement, 
            System.Linq.IGrouping$2$(TKey, TElement), 
            source, 
            keySelector, 
            elementSelector, 
            $delegate(
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TElement), 
                System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TElement), System.Linq.IGrouping$2$(TKey, TElement)), 
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TElement).Create, 
                "Create$delegate"
            ), 
            System.Collections.Generic.EqualityComparer$1$(TKey).get_Default()
        );
    };
    $t.GroupingCreator$2 = $define("System.Linq.Enumerable.GroupingCreator<TKey, TElement>", System.Object);
    ($t.GroupingCreator$2.$TypeInitializer = function($t, $p, TKey, TElement) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Linq.Enumerable.GroupingCreator`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GroupingCreator", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.GroupingCreator`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.GroupingCreator$2, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Linq.Enumerable.GroupingCreator$2.prototype.Create, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elements", System.Collections.Generic.IEnumerable$1$(TElement), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IGrouping$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.GroupingCreator$2, arguments)();
        };
        this.GroupingCreator$2$ = $t.$;
        $t.Create = function(key, elements) {
            return System.Linq.Grouping$2$(TKey, TElement).prototype.$ctor.$new(key, elements);
        };
    }).call(
        $t, 
        $t.GroupingCreator$2, 
        $t.GroupingCreator$2.prototype, 
        $definetypeparameter("TKey", System.Object), 
        $definetypeparameter("TElement", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.GroupingCreator$2);
    $t.GroupBy$2 = function(TSource, TKey, TResult, source, keySelector, resultSelector) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TSource, 
            TResult, 
            source, 
            keySelector, 
            System.IdentityFunction$1$(TSource).Default, 
            resultSelector, 
            System.Collections.Generic.EqualityComparer$1$(TKey).get_Default()
        );
    };
    $t.GroupBy$6 = function(TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TElement, 
            TResult, 
            source, 
            keySelector, 
            elementSelector, 
            resultSelector, 
            System.Collections.Generic.EqualityComparer$1$(TKey).get_Default()
        );
    };
    $t.GroupBy$4 = function(TSource, TKey, TResult, source, keySelector, resultSelector, comparer) {
        return System.Linq.Enumerable.GroupBy$7(
            TSource, 
            TKey, 
            TSource, 
            TResult, 
            source, 
            keySelector, 
            System.IdentityFunction$1$(TSource).Default, 
            resultSelector, 
            comparer
        );
    };
    $t.GroupBy$7 = function(TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector, comparer) {
        return System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4$(
            TSource, 
            TKey, 
            TElement, 
            TResult
        ).prototype.$ctor.$new(
            source, 
            keySelector, 
            elementSelector, 
            resultSelector, 
            comparer
        );
    };
    $t.ToLookup = function(TSource, TKey, source, keySelector) {
        return System.Linq.Lookup$2$(TKey, TSource).prototype.$ctor.$new(System.Linq.Enumerable.GroupBy(
            TSource, 
            TKey, 
            source, 
            keySelector
        ));
    };
    $t.ToLookup$1 = function(TSource, TKey, source, keySelector, comparer) {
        return System.Linq.Lookup$2$(TKey, TSource).prototype.$ctor.$new(System.Linq.Enumerable.GroupBy$4(
            TSource, 
            TKey, 
            System.Linq.IGrouping$2$(TKey, TSource), 
            source, 
            keySelector, 
            $delegate(
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource), 
                System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TSource), System.Linq.IGrouping$2$(TKey, TSource)), 
                System.Linq.Enumerable.GroupingCreator$2$(TKey, TSource).Create, 
                "Create$delegate"
            ), 
            comparer
        ));
    };
    $t.ToLookup$2 = function(TSource, TKey, TElement, source, keySelector, elementSelector) {
        return System.Linq.Lookup$2$(TKey, TElement).prototype.$ctor.$new(System.Linq.Enumerable.GroupBy$3(
            TSource, 
            TKey, 
            TElement, 
            source, 
            keySelector, 
            elementSelector
        ));
    };
    $t.ToLookup$3 = function(TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
        return System.Linq.Lookup$2$(TKey, TElement).prototype.$ctor.$new(System.Linq.Enumerable.GroupBy$5(
            TSource, 
            TKey, 
            TElement, 
            source, 
            keySelector, 
            elementSelector, 
            comparer
        ));
    };
    $t.Distinct = function(TSource, source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        return System.Linq.Enumerable.Distinct$1(TSource, source, System.Collections.Generic.EqualityComparer$1$(TSource).get_Default());
    };
    $t.Distinct$1 = function(TSource, source, comparer) {
        return System.Linq.Enumerable.YieldEnumerator$Distinct$1$1$(TSource).prototype.$ctor.$new(source, comparer);
    };
    $t.ElementAt = function(TSource, source, index) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var list = (function() {
            var $as$ = source;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Collections.Generic.IList$1$(TSource).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (list != null)
            return list.System$Collections$Generic$IList$1$get_Item(index);
        if (index < 0)
            throw System.ArgumentOutOfRangeException.prototype.$ctor$1.$new("index").InternalInit(new Error());
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        try {
            while (enumerator.System$Collections$IEnumerator$MoveNext()) {
                if (index == 0)
                    return enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                --index;
            }
            throw System.ArgumentOutOfRangeException.prototype.$ctor$1.$new("index").InternalInit(new Error());
        }
        finally {
            enumerator.System$IDisposable$Dispose();
        }

    };
    $t.ElementAtOrDefault = function(TSource, source, index) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (index >= 0) {
            var list = (function() {
                var $as$ = source;
                if (!System.Type.prototype.IsInstanceOfType.call(System.Collections.Generic.IList$1$(TSource).$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (list != null) {
                if (index < list.System$Collections$Generic$ICollection$1$get_Count())
                    return list.System$Collections$Generic$IList$1$get_Item(index);
            }
            else {
                {
                    var $anon$1iterator = source;
                    var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                    while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                        var source1 = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                        if (index == 0)
                            return source1;
                        --index;
                    }
                }
            }
        }
        return $default(TSource);
    };
    $t.Range = function(start, count) {
        return System.Linq.Enumerable.YieldEnumerator$Range.prototype.$ctor.$new(start, count);
    };
    $t.Zip = function(TFirst, TSecond, TResult, first, second, resultSelector) {
        return System.Linq.Enumerable.YieldEnumerator$Zip$3$(TFirst, TSecond, TResult).prototype.$ctor.$new(first, second, resultSelector);
    };
    $t.Union = function(TSource, first, second) {
        if (first == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
        if (second == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
        return System.Linq.Enumerable.Union$1(
            TSource, 
            first, 
            second, 
            System.Collections.Generic.EqualityComparer$1$(TSource).get_Default()
        );
    };
    $t.Union$1 = function(TSource, first, second, comparer) {
        return System.Linq.Enumerable.YieldEnumerator$Union$1$1$(TSource).prototype.$ctor.$new(first, second, comparer);
    };
    $t.Intersect = function(TSource, first, second) {
        if (first == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
        if (second == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
        return System.Linq.Enumerable.Intersect$1(
            TSource, 
            first, 
            second, 
            System.Collections.Generic.EqualityComparer$1$(TSource).get_Default()
        );
    };
    $t.Intersect$1 = function(TSource, first, second, comparer) {
        return System.Linq.Enumerable.YieldEnumerator$Intersect$1$1$(TSource).prototype.$ctor.$new(first, second, comparer);
    };
    $t.Average$6 = function(TSource, source, selector) {
        return System.Linq.Enumerable.Average(System.Linq.Enumerable.Select(
            TSource, 
            System.Double, 
            source, 
            selector
        ));
    };
    $t.Average$1 = function(source) {
        return System.Linq.Enumerable.Average$8(source, $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            return null;
        }));
    };
    $t.Average = function(source) {
        return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Cast(System.Nullable$1$(System.Double), source), $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("No Elements to Average").InternalInit(new Error());
        }));
    };
    $t.Average$8 = function(source, onEmpty) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var num1 = 0;
        var num2 = 0;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                num1 += item;
                ++num2;
            }
        }
        if (num2 > 0)
            return num1 / num2;
        else
            return onEmpty();
    };
    $t.Average$7 = function(TSource, source, selector) {
        return System.Linq.Enumerable.Average$4(System.Linq.Enumerable.Select(
            TSource, 
            System.Int64, 
            source, 
            selector
        ));
    };
    $t.Average$5 = function(source) {
        return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Cast(System.Nullable$1$(System.Double), source), $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            return null;
        }));
    };
    $t.Average$4 = function(source) {
        return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Cast(System.Nullable$1$(System.Double), source), $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("No Elements to Average").InternalInit(new Error());
        }));
    };
    $t.Average$3 = function(source) {
        return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Cast(System.Nullable$1$(System.Double), source), $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            return null;
        }));
    };
    $t.Average$2 = function(source) {
        return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Cast(System.Nullable$1$(System.Double), source), $delegate(this, System.Func$1$(System.Nullable$1$(System.Double)), function() {
            throw System.InvalidOperationException.prototype.$ctor$1.$new("No Elements to Average").InternalInit(new Error());
        }));
    };
    $t.Count = function(TSource, source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var collection1 = (function() {
            var $as$ = source;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Collections.Generic.ICollection$1$(TSource).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (collection1 != null)
            return collection1.System$Collections$Generic$ICollection$1$get_Count();
        var collection2 = (function() {
            var $as$ = source;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Collections.ICollection.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (collection2 != null)
            return collection2.System$Collections$ICollection$get_Count();
        var num = 0;
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        try {
            while (enumerator.System$Collections$IEnumerator$MoveNext()) {
                ++num;
            }
        }
        finally {
            enumerator.System$IDisposable$Dispose();
        }

        return num;
    };
    $t.Count$1 = function(TSource, source, predicate) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (predicate == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
        var num = 0;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var source1 = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (predicate(source1))
                    ++num;
            }
        }
        return num;
    };
    $t.LongCount = function(TSource, source) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        var num = 0;
        var enumerator = source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
        try {
            while (enumerator.System$Collections$IEnumerator$MoveNext()) {
                ++num;
            }
        }
        finally {
            enumerator.System$IDisposable$Dispose();
        }

        return num;
    };
    $t.LongCount$1 = function(TSource, source, predicate) {
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        if (predicate == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
        var num = 0;
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var source1 = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (predicate(source1))
                    ++num;
            }
        }
        return num;
    };
    $t.Contains = function(TSource, source, value) {
        var collection = (function() {
            var $as$ = source;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Collections.Generic.ICollection$1$(TSource).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (collection != null)
            return collection.System$Collections$Generic$ICollection$1$Contains(value);
        else
            return System.Linq.Enumerable.Contains$1(
                TSource, 
                source, 
                value, 
                null
            );
    };
    $t.Contains$1 = function(TSource, source, value, comparer) {
        if (comparer == null)
            comparer = System.Collections.Generic.EqualityComparer$1$(TSource).get_Default();
        if (source == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
        {
            var $anon$1iterator = source;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var x = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (comparer.System$Collections$Generic$IEqualityComparer$1$Equals(x, value))
                    return true;
            }
        }
        return false;
    };
    $t.Except = function(TSource, first, second) {
        if (first == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
        if (second == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
        return System.Linq.Enumerable.Except$1(
            TSource, 
            first, 
            second, 
            System.Collections.Generic.EqualityComparer$1$(TSource).get_Default()
        );
    };
    $t.Except$1 = function(TSource, first, second, comparer) {
        return System.Linq.Enumerable.YieldEnumerator$Except$1$1$(TSource).prototype.$ctor.$new(first, second, comparer);
    };
    $t.YieldEnumerator$Where$1 = $define("System.Linq.Enumerable.YieldEnumerator$Where<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Where$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Where`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Where", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Where`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Where$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Where$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Where$1, arguments)();
        };
        this.YieldEnumerator$Where$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.predicate(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Where$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Where$1, 
        $t.YieldEnumerator$Where$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Where$1);
    $t.YieldEnumerator$Where$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$Where$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Where$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Where$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Where$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Where$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Where$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Where$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Where$1$1, arguments)();
        };
        this.YieldEnumerator$Where$1$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.predicate(this.item, this.index)) {
                                this.$state = 3;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Where$1$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Where$1$1, 
        $t.YieldEnumerator$Where$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Where$1$1);
    $t.YieldEnumerator$Select$2 = $define("System.Linq.Enumerable.YieldEnumerator$Select<TSource, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Select$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Select`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Select", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Select`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Select$2, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Select$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, TResult), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Select$2, arguments)();
        };
        this.YieldEnumerator$Select$2$ = $t.$;
        $p.$ctor = function(source, selector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.selector = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, selector) {
            return new $p.$ctor.$type(this, source, selector);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 2;
                            this.set_Current(this.selector(this.item));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Select$2$(TSource, TResult).prototype.$ctor.$new(this.source, this.selector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Select$2, 
        $t.YieldEnumerator$Select$2.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Select$2);
    $t.YieldEnumerator$Select$1$2 = $define("System.Linq.Enumerable.YieldEnumerator$Select$1<TSource, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Select$1$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Select$1`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Select$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Select$1`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Select$1$2, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Select$1$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3$(TSource, System.Int32, TResult), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Select$1$2, arguments)();
        };
        this.YieldEnumerator$Select$1$2$ = $t.$;
        $p.$ctor = function(source, selector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.selector = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, selector) {
            return new $p.$ctor.$type(this, source, selector);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.selector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("selector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.selector(this.item, this.index));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Select$1$2$(TSource, TResult).prototype.$ctor.$new(this.source, this.selector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Select$1$2, 
        $t.YieldEnumerator$Select$1$2.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Select$1$2);
    $t.YieldEnumerator$SelectMany$2 = $define("System.Linq.Enumerable.YieldEnumerator$SelectMany<TSource, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$SelectMany$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SelectMany$2, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TResult, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$2$(TSource, System.Collections.Generic.IEnumerable$1$(TResult)), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SelectMany$2, arguments)();
        };
        this.YieldEnumerator$SelectMany$2$ = $t.$;
        $p.$ctor = function(source, selector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.selector = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            this.subitem = $default(TResult);
            this.subitem$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, selector) {
            return new $p.$ctor.$type(this, source, selector);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.subitem$enumerator = this.selector(this.item).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.subitem);
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$(TSource, TResult).prototype.$ctor.$new(this.source, this.selector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SelectMany$2, 
        $t.YieldEnumerator$SelectMany$2.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$2);
    $t.YieldEnumerator$SelectMany$1$2 = $define("System.Linq.Enumerable.YieldEnumerator$SelectMany$1<TSource, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$SelectMany$1$2.$TypeInitializer = function($t, $p, TSource, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$1`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$1`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("selector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TResult, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("selector", System.Func$3$(TSource, System.Int32, System.Collections.Generic.IEnumerable$1$(TResult)), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SelectMany$1$2, arguments)();
        };
        this.YieldEnumerator$SelectMany$1$2$ = $t.$;
        $p.$ctor = function(source, selector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.selector = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            this.subitem = $default(TResult);
            this.subitem$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.selector = selector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, selector) {
            return new $p.$ctor.$type(this, source, selector);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            System.ArgumentNullException.prototype.$ctor.$new("source");
                        if (this.selector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("selector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.subitem$enumerator = this.selector(this.item, this.index).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.subitem);
                            return true;
                        }
                        this.$state = 4;
                        continue $top;
                    case 4:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SelectMany$1$2$(TSource, TResult).prototype.$ctor.$new(this.source, this.selector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SelectMany$1$2, 
        $t.YieldEnumerator$SelectMany$1$2.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$1$2);
    $t.YieldEnumerator$SelectMany$3$3 = $define("System.Linq.Enumerable.YieldEnumerator$SelectMany$3<TSource, TCollection, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$SelectMany$3$3.$TypeInitializer = function($t, $p, TSource, TCollection, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$3`3";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$3", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$3`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("collectionSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TCollection, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$3$(TSource, System.Int32, System.Collections.Generic.IEnumerable$1$(TCollection)), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TSource, TCollection, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SelectMany$3$3, arguments)();
        };
        this.YieldEnumerator$SelectMany$3$3$ = $t.$;
        $p.$ctor = function(source, collectionSelector, resultSelector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.collectionSelector = null;
            this.resultSelector = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            this.subitem = $default(TCollection);
            this.subitem$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.collectionSelector = collectionSelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, collectionSelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                source, 
                collectionSelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.collectionSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("collectionSelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.subitem$enumerator = this.collectionSelector(this.item, this.index).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.item, this.subitem));
                            return true;
                        }
                        this.$state = 4;
                        continue $top;
                    case 4:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SelectMany$3$3$(TSource, TCollection, TResult).prototype.$ctor.$new(this.source, this.collectionSelector, this.resultSelector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SelectMany$3$3, 
        $t.YieldEnumerator$SelectMany$3$3.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TCollection", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$3$3);
    $t.YieldEnumerator$SelectMany$2$3 = $define("System.Linq.Enumerable.YieldEnumerator$SelectMany$2<TSource, TCollection, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$SelectMany$2$3.$TypeInitializer = function($t, $p, TSource, TCollection, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SelectMany$2`3";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SelectMany$2", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SelectMany$2`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("collectionSelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem", TCollection, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("subitem$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("collectionSelector", System.Func$2$(TSource, System.Collections.Generic.IEnumerable$1$(TCollection)), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TSource, TCollection, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SelectMany$2$3, arguments)();
        };
        this.YieldEnumerator$SelectMany$2$3$ = $t.$;
        $p.$ctor = function(source, collectionSelector, resultSelector) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.collectionSelector = null;
            this.resultSelector = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            this.subitem = $default(TCollection);
            this.subitem$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.collectionSelector = collectionSelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, collectionSelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                source, 
                collectionSelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.collectionSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("collectionSelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.subitem$enumerator = this.collectionSelector(this.item).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.subitem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.subitem = this.subitem$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.item, this.subitem));
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SelectMany$2$3$(TSource, TCollection, TResult).prototype.$ctor.$new(this.source, this.collectionSelector, this.resultSelector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SelectMany$2$3, 
        $t.YieldEnumerator$SelectMany$2$3.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TCollection", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SelectMany$2$3);
    $t.YieldEnumerator$Take$1 = $define("System.Linq.Enumerable.YieldEnumerator$Take<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Take$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Take`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Take", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Take`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Take$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Take$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Take$1, arguments)();
        };
        this.YieldEnumerator$Take$1$ = $t.$;
        $p.$ctor = function(source, count) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.count = 0;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, count) {
            return new $p.$ctor.$type(this, source, count);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.index >= this.count)
                                break;
                            this.$state = 3;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Take$1$(TSource).prototype.$ctor.$new(this.source, this.count);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Take$1, 
        $t.YieldEnumerator$Take$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Take$1);
    $t.YieldEnumerator$TakeWhile$1 = $define("System.Linq.Enumerable.YieldEnumerator$TakeWhile<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$TakeWhile$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$TakeWhile`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$TakeWhile", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$TakeWhile`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$TakeWhile$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$TakeWhile$1, arguments)();
        };
        this.YieldEnumerator$TakeWhile$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (!this.predicate(this.item))
                                break;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$TakeWhile$1, 
        $t.YieldEnumerator$TakeWhile$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$TakeWhile$1);
    $t.YieldEnumerator$TakeWhile$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$TakeWhile$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$TakeWhile$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$TakeWhile$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$TakeWhile$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$TakeWhile$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$TakeWhile$1$1, arguments)();
        };
        this.YieldEnumerator$TakeWhile$1$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = 0;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (!this.predicate(this.item, this.index))
                                break;
                            this.$state = 3;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$TakeWhile$1$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$TakeWhile$1$1, 
        $t.YieldEnumerator$TakeWhile$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$TakeWhile$1$1);
    $t.YieldEnumerator$Skip$1 = $define("System.Linq.Enumerable.YieldEnumerator$Skip<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Skip$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Skip`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Skip", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Skip`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Skip$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Skip$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Skip$1, arguments)();
        };
        this.YieldEnumerator$Skip$1$ = $t.$;
        $p.$ctor = function(source, count) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.count = 0;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, count) {
            return new $p.$ctor.$type(this, source, count);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.index = -1;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.index++;
                            if (this.index < this.count)
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Skip$1$(TSource).prototype.$ctor.$new(this.source, this.count);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Skip$1, 
        $t.YieldEnumerator$Skip$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Skip$1);
    $t.YieldEnumerator$SkipWhile$1 = $define("System.Linq.Enumerable.YieldEnumerator$SkipWhile<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$SkipWhile$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SkipWhile`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SkipWhile", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SkipWhile`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SkipWhile$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$2$(TSource, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SkipWhile$1, arguments)();
        };
        this.YieldEnumerator$SkipWhile$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.predicate(this.item))
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SkipWhile$1, 
        $t.YieldEnumerator$SkipWhile$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SkipWhile$1);
    $t.YieldEnumerator$SkipWhile$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$SkipWhile$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$SkipWhile$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$SkipWhile$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$SkipWhile$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$SkipWhile$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("predicate", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("predicate", System.Func$3$(TSource, System.Int32, System.Boolean), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$SkipWhile$1$1, arguments)();
        };
        this.YieldEnumerator$SkipWhile$1$1$ = $t.$;
        $p.$ctor = function(source, predicate) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.predicate = null;
            this.index = 0;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.predicate = predicate;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, predicate) {
            return new $p.$ctor.$type(this, source, predicate);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        if (this.predicate == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("predicate").InternalInit(new Error());
                        this.index = -1;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.index++;
                            if (this.predicate(this.item, this.index))
                                continue;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$SkipWhile$1$1$(TSource).prototype.$ctor.$new(this.source, this.predicate);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$SkipWhile$1$1, 
        $t.YieldEnumerator$SkipWhile$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$SkipWhile$1$1);
    $t.YieldEnumerator$Join$4 = $define("System.Linq.Enumerable.YieldEnumerator$Join<TOuter, TInner, TKey, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Join$4.$TypeInitializer = function($t, $p, TOuter, TInner, TKey, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Join`4";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Join", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Join`4", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Join$4, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("outers", $array(TOuter), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("outerItem", TOuter, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("outerItem$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("key", TKey, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Tuple$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("innerItem", TInner, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("innerItem$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Join$4.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("outer", System.Collections.Generic.IEnumerable$1$(TOuter), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inner", System.Collections.Generic.IEnumerable$1$(TInner), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("outerKeySelector", System.Func$2$(TOuter, TKey), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerKeySelector", System.Func$2$(TInner, TKey), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TOuter, TInner, TResult), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Join$4, arguments)();
        };
        this.YieldEnumerator$Join$4$ = $t.$;
        $p.$ctor = function(outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
            this.$isStarted = false;
            this.$state = 0;
            this.outer = null;
            this.inner = null;
            this.outerKeySelector = null;
            this.innerKeySelector = null;
            this.resultSelector = null;
            this.outers = null;
            this.dictionary = null;
            this.outerItem = $default(TOuter);
            this.outerItem$enumerator = null;
            this.key = $default(TKey);
            this.set = null;
            this.innerItem = $default(TInner);
            this.innerItem$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.outer = outer;
            this.inner = inner;
            this.outerKeySelector = outerKeySelector;
            this.innerKeySelector = innerKeySelector;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                outer, 
                inner, 
                outerKeySelector, 
                innerKeySelector, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.outers = System.Linq.Enumerable.ToArray(TOuter, this.outer);
                        if (this.outer == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("outer").InternalInit(new Error());
                        if (this.inner == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("inner").InternalInit(new Error());
                        if (this.outerKeySelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("outerKeySelector").InternalInit(new Error());
                        if (this.innerKeySelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("innerKeySelector").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.dictionary = System.Collections.Generic.Dictionary$2$(TKey, System.Tuple$2$(System.Collections.Generic.List$1$(TOuter), System.Collections.Generic.List$1$(TInner))).prototype.$ctor.$new();
                        {
                            var $anon$1iterator = this.outers;
                            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                                var key = this.outerKeySelector(item);
                                var lists;
                                if (!(function() {
                                    var $anon$3 = {
                                        value: null
                                    };
                                    var $result$ = this.dictionary.TryGetValue(key, $anon$3);
                                    lists = $anon$3.value;
                                    return $result$;
                                }).call(this)) {
                                    lists = System.Tuple$2$(System.Collections.Generic.List$1$(TOuter), System.Collections.Generic.List$1$(TInner)).prototype.$ctor.$new(System.Collections.Generic.List$1$(TOuter).prototype.$ctor.$new(), System.Collections.Generic.List$1$(TInner).prototype.$ctor.$new());
                                    this.dictionary.set_Item(key, lists);
                                }
                                lists.get_Item1().Add(item);
                            }
                        }{
                            var $anon$4iterator = this.inner;
                            var $anon$5enumerator = $anon$4iterator.System$Collections$IEnumerable$GetEnumerator();
                            while ($anon$5enumerator.System$Collections$IEnumerator$MoveNext()) {
                                var item = $anon$5enumerator.System$Collections$IEnumerator$get_Current();
                                var key = this.innerKeySelector(item);
                                var lists;
                                if (!(function() {
                                    var $anon$6 = {
                                        value: null
                                    };
                                    var $result$ = this.dictionary.TryGetValue(key, $anon$6);
                                    lists = $anon$6.value;
                                    return $result$;
                                }).call(this))
                                    continue;
                                lists.get_Item2().Add(item);
                            }
                        }this.outerItem$enumerator = this.outers.GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.outerItem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.outerItem = this.outerItem$enumerator.System$Collections$IEnumerator$get_Current();
                            this.key = this.outerKeySelector(this.outerItem);
                            this.set = this.dictionary.get_Item(this.key);
                            this.innerItem$enumerator = this.set.get_Item2().GetEnumerator();
                            this.$state = 3;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        while (this.innerItem$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.innerItem = this.innerItem$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 3;
                            this.set_Current(this.resultSelector(this.outerItem, this.innerItem));
                            return true;
                        }
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Join$4$(
                    TOuter, 
                    TInner, 
                    TKey, 
                    TResult
                ).prototype.$ctor.$new(
                    this.outer, 
                    this.inner, 
                    this.outerKeySelector, 
                    this.innerKeySelector, 
                    this.resultSelector
                );
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Join$4, 
        $t.YieldEnumerator$Join$4.prototype, 
        $definetypeparameter("TOuter", System.Object), 
        $definetypeparameter("TInner", System.Object), 
        $definetypeparameter("TKey", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Join$4);
    $t.YieldEnumerator$Concat$1 = $define("System.Linq.Enumerable.YieldEnumerator$Concat<T>", System.YieldIterator$1);
    ($t.YieldEnumerator$Concat$1.$TypeInitializer = function($t, $p, T) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Concat`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Concat", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Concat`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Concat$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", T, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item2", T, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item2$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Concat$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Collections.Generic.IEnumerable$1$(T), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(T).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Concat$1, arguments)();
        };
        this.YieldEnumerator$Concat$1$ = $t.$;
        $p.$ctor = function(source, other) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.other = null;
            this.item = $default(T);
            this.item$enumerator = null;
            this.item2 = $default(T);
            this.item2$enumerator = null;
            System.YieldIterator$1$(T).prototype.$ctor.call(this);
            this.source = source;
            this.other = other;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, other) {
            return new $p.$ctor.$type(this, source, other);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 3;
                        continue $top;
                    case 3:
                        this.item2$enumerator = this.other.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 4;
                        continue $top;
                    case 4:
                        while (this.item2$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item2 = this.item2$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.$state = 4;
                            this.set_Current(this.item2);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Concat$1$(T).prototype.$ctor.$new(this.source, this.other);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Concat$1, 
        $t.YieldEnumerator$Concat$1.prototype, 
        $definetypeparameter("T", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Concat$1);
    $t.YieldEnumerator$Repeat$1 = $define("System.Linq.Enumerable.YieldEnumerator$Repeat<TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Repeat$1.$TypeInitializer = function($t, $p, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Repeat`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Repeat", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Repeat`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Repeat$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("element", TResult, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("i", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Repeat$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Repeat$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Repeat$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Repeat$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("element", TResult, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Repeat$1, arguments)();
        };
        this.YieldEnumerator$Repeat$1$ = $t.$;
        $p.$ctor = function(element, count) {
            this.$isStarted = false;
            this.$state = 0;
            this.element = $default(TResult);
            this.count = 0;
            this.i = 0;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.element = element;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(element, count) {
            return new $p.$ctor.$type(this, element, count);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.count < 0) {
                            throw System.ArgumentOutOfRangeException.prototype.$ctor$1.$new("count").InternalInit(new Error());
                        }
                        else {
                            this.i = 0;
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                    case 2:
                        while (this.i < this.count) {
                            this.$state = 3;
                            this.set_Current(this.element);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.i++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Repeat$1$(TResult).prototype.$ctor.$new(this.element, this.count);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Repeat$1, 
        $t.YieldEnumerator$Repeat$1.prototype, 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Repeat$1);
    $t.YieldEnumerator$Cast$1 = $define("System.Linq.Enumerable.YieldEnumerator$Cast<TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Cast$1.$TypeInitializer = function($t, $p, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Cast`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Cast", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Cast`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Cast$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Cast$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Cast$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Cast$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Cast$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Cast$1, arguments)();
        };
        this.YieldEnumerator$Cast$1$ = $t.$;
        $p.$ctor = function(source) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.item = null;
            this.item$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source) {
            return new $p.$ctor.$type(this, source);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.item$enumerator = this.source.System$Collections$IEnumerable$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$IEnumerator$get_Current();
                            this.$state = 2;
                            this.set_Current($cast(System.Object, this.item));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Cast$1$(TResult).prototype.$ctor.$new(this.source);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Cast$1, 
        $t.YieldEnumerator$Cast$1.prototype, 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Cast$1);
    $t.YieldEnumerator$OfType$1 = $define("System.Linq.Enumerable.YieldEnumerator$OfType<TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$OfType$1.$TypeInitializer = function($t, $p, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$OfType`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$OfType", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$OfType`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$OfType$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.IEnumerator, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$OfType$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$OfType$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$OfType$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$OfType$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.IEnumerable, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$OfType$1, arguments)();
        };
        this.YieldEnumerator$OfType$1$ = $t.$;
        $p.$ctor = function(source) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.item = null;
            this.item$enumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source) {
            return new $p.$ctor.$type(this, source);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.item$enumerator = this.source.System$Collections$IEnumerable$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$IEnumerator$get_Current();
                            if (TResult.$GetType().IsInstanceOfType(this.item)) {
                                this.$state = 2;
                                this.set_Current($cast(System.Object, this.item));
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$OfType$1$(TResult).prototype.$ctor.$new(this.source);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$OfType$1, 
        $t.YieldEnumerator$OfType$1.prototype, 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$OfType$1);
    $t.YieldEnumerator$Empty$1 = $define("System.Linq.Enumerable.YieldEnumerator$Empty<TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Empty$1.$TypeInitializer = function($t, $p, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Empty`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Empty", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Empty`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Empty$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Empty$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Empty$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Empty$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Empty$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Empty$1, arguments)();
        };
        this.YieldEnumerator$Empty$1$ = $t.$;
        $p.$ctor = function() {
            this.$isStarted = false;
            this.$state = 0;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function() {
            return new $p.$ctor.$type(this);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.$state = 0;
                        return false;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Empty$1$(TResult).prototype.$ctor.$new();
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Empty$1, 
        $t.YieldEnumerator$Empty$1.prototype, 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Empty$1);
    $t.YieldEnumerator$DefaultIfEmpty$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$DefaultIfEmpty$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$DefaultIfEmpty$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("defaultValue", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isEmpty", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", TSource, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$DefaultIfEmpty$1$1, arguments)();
        };
        this.YieldEnumerator$DefaultIfEmpty$1$1$ = $t.$;
        $p.$ctor = function(source, defaultValue) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.defaultValue = $default(TSource);
            this.isEmpty = false;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.defaultValue = defaultValue;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, defaultValue) {
            return new $p.$ctor.$type(this, source, defaultValue);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.isEmpty = true;
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.isEmpty = false;
                            this.$state = 2;
                            this.set_Current(this.item);
                            return true;
                        }
                        this.$state = 3;
                        continue $top;
                    case 3:
                        if (this.isEmpty) {
                            this.$state = 0;
                            this.set_Current(this.defaultValue);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$DefaultIfEmpty$1$1$(TSource).prototype.$ctor.$new(this.source, this.defaultValue);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$DefaultIfEmpty$1$1, 
        $t.YieldEnumerator$DefaultIfEmpty$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$DefaultIfEmpty$1$1);
    $t.YieldEnumerator$GroupBy$7$4 = $define("System.Linq.Enumerable.YieldEnumerator$GroupBy$7<TSource, TKey, TElement, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$GroupBy$7$4.$TypeInitializer = function($t, $p, TSource, TKey, TElement, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$GroupBy$7`4";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$GroupBy$7", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$GroupBy$7`4", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("keySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("elementSelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", System.Collections.Generic.KeyValuePair$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("result", TResult, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TSource, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementSelector", System.Func$2$(TSource, TElement), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TKey, System.Collections.Generic.IEnumerable$1$(TElement), TResult), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TKey), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$GroupBy$7$4, arguments)();
        };
        this.YieldEnumerator$GroupBy$7$4$ = $t.$;
        $p.$ctor = function(source, keySelector, elementSelector, resultSelector, comparer) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.keySelector = null;
            this.elementSelector = null;
            this.resultSelector = null;
            this.comparer = null;
            this.dictionary = null;
            this.item = null;
            this.item$enumerator = null;
            this.result = $default(TResult);
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.source = source;
            this.keySelector = keySelector;
            this.elementSelector = elementSelector;
            this.resultSelector = resultSelector;
            this.comparer = comparer;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, keySelector, elementSelector, resultSelector, comparer) {
            return new $p.$ctor.$type(
                this, 
                source, 
                keySelector, 
                elementSelector, 
                resultSelector, 
                comparer
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.dictionary = System.Collections.Generic.Dictionary$2$(TKey, System.Collections.Generic.List$1$(TElement)).prototype.$ctor$2.$new(this.comparer);
                        {
                            var $anon$1iterator = this.source;
                            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                                var key = this.keySelector(item);
                                var list;
                                if (!(function() {
                                    var $anon$3 = {
                                        value: null
                                    };
                                    var $result$ = this.dictionary.TryGetValue(key, $anon$3);
                                    list = $anon$3.value;
                                    return $result$;
                                }).call(this)) {
                                    list = System.Collections.Generic.List$1$(TElement).prototype.$ctor.$new();
                                    this.dictionary.set_Item(key, list);
                                }
                                list.Add$1(item);
                            }
                        }this.item$enumerator = this.dictionary.GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            this.result = this.resultSelector(this.item.get_Key(), this.item.get_Value());
                            this.$state = 2;
                            this.set_Current(this.result);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$GroupBy$7$4$(
                    TSource, 
                    TKey, 
                    TElement, 
                    TResult
                ).prototype.$ctor.$new(
                    this.source, 
                    this.keySelector, 
                    this.elementSelector, 
                    this.resultSelector, 
                    this.comparer
                );
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$GroupBy$7$4, 
        $t.YieldEnumerator$GroupBy$7$4.prototype, 
        $definetypeparameter("TSource", System.Object), 
        $definetypeparameter("TKey", System.Object), 
        $definetypeparameter("TElement", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$GroupBy$7$4);
    $t.YieldEnumerator$Distinct$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$Distinct$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Distinct$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Distinct$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Distinct$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Distinct$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Distinct$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Distinct$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Distinct$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Distinct$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Distinct$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Distinct$1$1, arguments)();
        };
        this.YieldEnumerator$Distinct$1$1$ = $t.$;
        $p.$ctor = function(source, comparer) {
            this.$isStarted = false;
            this.$state = 0;
            this.source = null;
            this.comparer = null;
            this.set = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.source = source;
            this.comparer = comparer;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(source, comparer) {
            return new $p.$ctor.$type(this, source, comparer);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.source == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("source").InternalInit(new Error());
                        this.set = System.Collections.Generic.HashSet$1$(TSource).prototype.$ctor$2.$new(this.comparer);
                        this.item$enumerator = this.source.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.set.Add(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Distinct$1$1$(TSource).prototype.$ctor.$new(this.source, this.comparer);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Distinct$1$1, 
        $t.YieldEnumerator$Distinct$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Distinct$1$1);
    $t.YieldEnumerator$Range = $define("System.Linq.Enumerable.YieldEnumerator$Range", System.YieldIterator$1);
    ($t.YieldEnumerator$Range.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Range";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Range", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Range", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Range, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("start", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("count", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("num", System.Int64, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("value", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("index", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Range.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Range.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Range.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Range.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("start", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(System.Int32).$StaticInitializer();
        };
        $p.$ctor = function(start, count) {
            this.$isStarted = false;
            this.$state = 0;
            this.start = 0;
            this.count = 0;
            this.num = 0;
            this.value = 0;
            this.index = 0;
            System.YieldIterator$1$(System.Int32).prototype.$ctor.call(this);
            this.start = start;
            this.count = count;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(start, count) {
            return new $p.$ctor.$type(this, start, count);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.num = this.start + this.count - 1;
                        if (this.count < 0 || this.num > System.Int32.MaxValue)
                            throw System.ArgumentOutOfRangeException.prototype.$ctor$1.$new("count").InternalInit(new Error());
                        this.value = this.start;
                        this.index = 0;
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.index < this.count) {
                            this.$state = 3;
                            this.set_Current(this.value);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.value++;
                        this.index++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Range.prototype.$ctor.$new(this.start, this.count);
            }
        };
    }).call($t, $t.YieldEnumerator$Range, $t.YieldEnumerator$Range.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Range);
    $t.YieldEnumerator$Zip$3 = $define("System.Linq.Enumerable.YieldEnumerator$Zip<TFirst, TSecond, TResult>", System.YieldIterator$1);
    ($t.YieldEnumerator$Zip$3.$TypeInitializer = function($t, $p, TFirst, TSecond, TResult) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Zip`3";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Zip", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Zip`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Zip$3, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("resultSelector", System.Func$3, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("firstEnumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("secondEnumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Zip$3.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Zip$3.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Zip$3.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Zip$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TFirst), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSecond), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("resultSelector", System.Func$3$(TFirst, TSecond, TResult), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TResult).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Zip$3, arguments)();
        };
        this.YieldEnumerator$Zip$3$ = $t.$;
        $p.$ctor = function(first, second, resultSelector) {
            this.$isStarted = false;
            this.$state = 0;
            this.first = null;
            this.second = null;
            this.resultSelector = null;
            this.firstEnumerator = null;
            this.secondEnumerator = null;
            System.YieldIterator$1$(TResult).prototype.$ctor.call(this);
            this.first = first;
            this.second = second;
            this.resultSelector = resultSelector;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(first, second, resultSelector) {
            return new $p.$ctor.$type(
                this, 
                first, 
                second, 
                resultSelector
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.first == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
                        if (this.second == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
                        if (this.resultSelector == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("resultSelector").InternalInit(new Error());
                        this.firstEnumerator = this.first.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.secondEnumerator = this.second.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.firstEnumerator.System$Collections$IEnumerator$MoveNext() && this.secondEnumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.$state = 2;
                            this.set_Current(this.resultSelector(this.firstEnumerator.System$Collections$Generic$IEnumerator$1$get_Current(), this.secondEnumerator.System$Collections$Generic$IEnumerator$1$get_Current()));
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Zip$3$(TFirst, TSecond, TResult).prototype.$ctor.$new(this.first, this.second, this.resultSelector);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Zip$3, 
        $t.YieldEnumerator$Zip$3.prototype, 
        $definetypeparameter("TFirst", System.Object), 
        $definetypeparameter("TSecond", System.Object), 
        $definetypeparameter("TResult", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Zip$3);
    $t.YieldEnumerator$Union$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$Union$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Union$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Union$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Union$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Union$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Union$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Union$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Union$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Union$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Union$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Union$1$1, arguments)();
        };
        this.YieldEnumerator$Union$1$1$ = $t.$;
        $p.$ctor = function(first, second, comparer) {
            this.$isStarted = false;
            this.$state = 0;
            this.first = null;
            this.second = null;
            this.comparer = null;
            this.set = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.first = first;
            this.second = second;
            this.comparer = comparer;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(first, second, comparer) {
            return new $p.$ctor.$type(
                this, 
                first, 
                second, 
                comparer
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.first == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
                        if (this.second == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
                        this.set = System.Collections.Generic.HashSet$1$(TSource).prototype.$ctor$2.$new(this.comparer);
                        this.item$enumerator = System.Linq.Enumerable.Concat(TSource, this.first, this.second).System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.set.Add(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Union$1$1$(TSource).prototype.$ctor.$new(this.first, this.second, this.comparer);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Union$1$1, 
        $t.YieldEnumerator$Union$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Union$1$1);
    $t.YieldEnumerator$Intersect$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$Intersect$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Intersect$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Intersect$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Intersect$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Intersect$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Intersect$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("firstSet", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Intersect$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Intersect$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Intersect$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Intersect$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Intersect$1$1, arguments)();
        };
        this.YieldEnumerator$Intersect$1$1$ = $t.$;
        $p.$ctor = function(first, second, comparer) {
            this.$isStarted = false;
            this.$state = 0;
            this.first = null;
            this.second = null;
            this.comparer = null;
            this.firstSet = null;
            this.set = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.first = first;
            this.second = second;
            this.comparer = comparer;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(first, second, comparer) {
            return new $p.$ctor.$type(
                this, 
                first, 
                second, 
                comparer
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.first == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
                        if (this.second == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
                        this.firstSet = System.Collections.Generic.HashSet$1$(TSource).prototype.$ctor$1.$new(this.first);
                        this.set = System.Collections.Generic.HashSet$1$(TSource).prototype.$ctor.$new();
                        this.item$enumerator = this.second.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (this.set.Add(this.item) && this.firstSet.Contains(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Intersect$1$1$(TSource).prototype.$ctor.$new(this.first, this.second, this.comparer);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Intersect$1$1, 
        $t.YieldEnumerator$Intersect$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Intersect$1$1);
    $t.YieldEnumerator$Except$1$1 = $define("System.Linq.Enumerable.YieldEnumerator$Except$1<TSource>", System.YieldIterator$1);
    ($t.YieldEnumerator$Except$1$1.$TypeInitializer = function($t, $p, TSource) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.Linq.Enumerable.YieldEnumerator$Except$1`1";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$Except$1", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Enumerable.YieldEnumerator$Except$1`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Enumerable.YieldEnumerator$Except$1$1, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("set", System.Collections.Generic.HashSet$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item", TSource, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("item$enumerator", System.Collections.Generic.IEnumerator$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Enumerable.YieldEnumerator$Except$1$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", System.Linq.Enumerable.YieldEnumerator$Except$1$1.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", System.Linq.Enumerable.YieldEnumerator$Except$1$1.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Enumerable.YieldEnumerator$Except$1$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("first", System.Collections.Generic.IEnumerable$1$(TSource), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("second", System.Collections.Generic.IEnumerable$1$(TSource), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IEqualityComparer$1$(TSource), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(TSource).$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.YieldEnumerator$Except$1$1, arguments)();
        };
        this.YieldEnumerator$Except$1$1$ = $t.$;
        $p.$ctor = function(first, second, comparer) {
            this.$isStarted = false;
            this.$state = 0;
            this.first = null;
            this.second = null;
            this.comparer = null;
            this.set = null;
            this.item = $default(TSource);
            this.item$enumerator = null;
            System.YieldIterator$1$(TSource).prototype.$ctor.call(this);
            this.first = first;
            this.second = second;
            this.comparer = comparer;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(first, second, comparer) {
            return new $p.$ctor.$type(
                this, 
                first, 
                second, 
                comparer
            );
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        if (this.first == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("first").InternalInit(new Error());
                        if (this.second == null)
                            throw System.ArgumentNullException.prototype.$ctor.$new("second").InternalInit(new Error());
                        this.set = System.Collections.Generic.HashSet$1$(TSource).prototype.$ctor$3.$new(this.second, this.comparer);
                        this.item$enumerator = this.first.System$Collections$Generic$IEnumerable$1$GetEnumerator();
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.item$enumerator.System$Collections$IEnumerator$MoveNext()) {
                            this.item = this.item$enumerator.System$Collections$Generic$IEnumerator$1$get_Current();
                            if (!this.set.Contains(this.item)) {
                                this.$state = 2;
                                this.set_Current(this.item);
                                return true;
                            }
                            this.$state = 2;
                            continue $top;
                        }
                        this.$state = 0;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return System.Linq.Enumerable.YieldEnumerator$Except$1$1$(TSource).prototype.$ctor.$new(this.first, this.second, this.comparer);
            }
        };
    }).call(
        $t, 
        $t.YieldEnumerator$Except$1$1, 
        $t.YieldEnumerator$Except$1$1.prototype, 
        $definetypeparameter("TSource", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$Except$1$1);
}).call(null, System.Linq.Enumerable, System.Linq.Enumerable.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Enumerable);
System.Linq.Expressions.BinaryExpression = $define("System.Linq.Expressions.BinaryExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.BinaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.BinaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BinaryExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.BinaryExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.BinaryExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Left$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Right$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Conversion$k__BackingField", System.Linq.Expressions.LambdaExpression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$IsLifted$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Left", System.Linq.Expressions.BinaryExpression.prototype.get_Left, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Left", System.Linq.Expressions.BinaryExpression.prototype.set_Left, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Right", System.Linq.Expressions.BinaryExpression.prototype.get_Right, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Right", System.Linq.Expressions.BinaryExpression.prototype.set_Right, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.BinaryExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.BinaryExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Conversion", System.Linq.Expressions.BinaryExpression.prototype.get_Conversion, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Conversion", System.Linq.Expressions.BinaryExpression.prototype.set_Conversion, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.LambdaExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.set_IsLifted, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.BinaryExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.BinaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.BinaryExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("conversion", System.Linq.Expressions.LambdaExpression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReferenceComparison", System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiftedToNull", System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.BinaryExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.BinaryExpression.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("liftToNull", System.Boolean, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Left", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Left", System.Linq.Expressions.BinaryExpression.prototype.get_Left, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Left", System.Linq.Expressions.BinaryExpression.prototype.set_Left, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Right", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Right", System.Linq.Expressions.BinaryExpression.prototype.get_Right, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Right", System.Linq.Expressions.BinaryExpression.prototype.set_Right, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.BinaryExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.BinaryExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Conversion", System.Linq.Expressions.LambdaExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Conversion", System.Linq.Expressions.BinaryExpression.prototype.get_Conversion, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.LambdaExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Conversion", System.Linq.Expressions.BinaryExpression.prototype.set_Conversion, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.LambdaExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLifted", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IsLifted", System.Linq.Expressions.BinaryExpression.prototype.set_IsLifted, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.BinaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsReferenceComparison", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsReferenceComparison", System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLiftedToNull", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiftedToNull", System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Left = function() {return this.$Left$k__BackingField;};
    $p.set_Left = function(value) {this.$Left$k__BackingField = value;return value;};
    $p.get_Right = function() {return this.$Right$k__BackingField;};
    $p.set_Right = function(value) {this.$Right$k__BackingField = value;return value;};
    $p.get_Method = function() {return this.$Method$k__BackingField;};
    $p.set_Method = function(value) {this.$Method$k__BackingField = value;return value;};
    $p.get_Conversion = function() {return this.$Conversion$k__BackingField;};
    $p.set_Conversion = function(value) {this.$Conversion$k__BackingField = value;return value;};
    $p.get_IsLifted = function() {return this.$IsLifted$k__BackingField;};
    $p.set_IsLifted = function(value) {this.$IsLifted$k__BackingField = value;return value;};
    $p.$ctor = function(left, right, nodeType) {
        this.$Left$k__BackingField = null;
        this.$Right$k__BackingField = null;
        this.$Method$k__BackingField = null;
        this.$Conversion$k__BackingField = null;
        this.$IsLifted$k__BackingField = false;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Left(left);
        this.set_Right(right);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(left, right, nodeType) {
        return new $p.$ctor.$type(
            this, 
            left, 
            right, 
            nodeType
        );
    };
    $p.$ctor$1 = function(left, right, nodeType, liftToNull, method) {
        this.$Left$k__BackingField = null;
        this.$Right$k__BackingField = null;
        this.$Method$k__BackingField = null;
        this.$Conversion$k__BackingField = null;
        this.$IsLifted$k__BackingField = false;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Left(left);
        this.set_Right(right);
        this.set_Method(method);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(left, right, nodeType, liftToNull, method) {
        return new $p.$ctor$1.$type(
            this, 
            left, 
            right, 
            nodeType, 
            liftToNull, 
            method
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitBinary(this);
    };
    $p.get_Type = function() {
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Add:
            case System.Linq.Expressions.ExpressionType().AddAssign:
            case System.Linq.Expressions.ExpressionType().AddAssignChecked:
            case System.Linq.Expressions.ExpressionType().AddChecked:
            case System.Linq.Expressions.ExpressionType().And:
            case System.Linq.Expressions.ExpressionType().AndAlso:
            case System.Linq.Expressions.ExpressionType().AndAssign:
            case System.Linq.Expressions.ExpressionType().Assign:
            case System.Linq.Expressions.ExpressionType().Divide:
            case System.Linq.Expressions.ExpressionType().DivideAssign:
            case System.Linq.Expressions.ExpressionType().ExclusiveOr:
            case System.Linq.Expressions.ExpressionType().ExclusiveOrAssign:
            case System.Linq.Expressions.ExpressionType().LeftShift:
            case System.Linq.Expressions.ExpressionType().LeftShiftAssign:
            case System.Linq.Expressions.ExpressionType().Modulo:
            case System.Linq.Expressions.ExpressionType().ModuloAssign:
            case System.Linq.Expressions.ExpressionType().Multiply:
            case System.Linq.Expressions.ExpressionType().MultiplyAssign:
            case System.Linq.Expressions.ExpressionType().MultiplyAssignChecked:
            case System.Linq.Expressions.ExpressionType().MultiplyChecked:
            case System.Linq.Expressions.ExpressionType().Or:
            case System.Linq.Expressions.ExpressionType().OrAssign:
            case System.Linq.Expressions.ExpressionType().OrElse:
            case System.Linq.Expressions.ExpressionType().RightShift:
            case System.Linq.Expressions.ExpressionType().RightShiftAssign:
            case System.Linq.Expressions.ExpressionType().Subtract:
            case System.Linq.Expressions.ExpressionType().SubtractAssign:
            case System.Linq.Expressions.ExpressionType().SubtractAssignChecked:
            case System.Linq.Expressions.ExpressionType().SubtractChecked:
                return this.get_Left().get_Type();
            case System.Linq.Expressions.ExpressionType().Equal:
            case System.Linq.Expressions.ExpressionType().GreaterThan:
            case System.Linq.Expressions.ExpressionType().GreaterThanOrEqual:
            case System.Linq.Expressions.ExpressionType().LessThan:
            case System.Linq.Expressions.ExpressionType().LessThanOrEqual:
            case System.Linq.Expressions.ExpressionType().NotEqual:
            case System.Linq.Expressions.ExpressionType().TypeIs:
                return System.Boolean.$GetType();
            case System.Linq.Expressions.ExpressionType().ArrayIndex:
                return System.Object.$GetType();
            default:
                throw System.Exception.prototype.$ctor$1.$new("Unexpected node type: " + $safeToString(this.get_NodeType())).InternalInit(new Error());
        }
    };
    $p.Update = function(left, conversion, right) {
        return this;
    };
    $p.get_IsReferenceComparison = function() {
        var type1 = this.get_Left().get_Type();
        var type2 = this.get_Right().get_Type();
        var method = this.get_Method();
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Equal:
            case System.Linq.Expressions.ExpressionType().NotEqual:
                if (method == null && !type1.get_IsValueType())
                    return !type2.get_IsValueType();
                else
                    break;
        }
        return false;
    };
    $p.get_IsLiftedToNull = function() {
        if (this.get_IsLifted())
            return this.get_Type() == System.Nullable$1.$GetType();
        else
            return false;
    };
}).call(null, System.Linq.Expressions.BinaryExpression, System.Linq.Expressions.BinaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.BinaryExpression);
System.Linq.Expressions.ConditionalExpression = $define("System.Linq.Expressions.ConditionalExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.ConditionalExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ConditionalExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConditionalExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ConditionalExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ConditionalExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Test$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$IfTrue$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$IfFalse$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Test", System.Linq.Expressions.ConditionalExpression.prototype.get_Test, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Test", System.Linq.Expressions.ConditionalExpression.prototype.set_Test, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.set_IfTrue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.set_IfFalse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ConditionalExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConditionalExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ConditionalExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ConditionalExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.ConditionalExpression.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("test", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifTrue", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ifFalse", System.Linq.Expressions.Expression, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Test", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Test", System.Linq.Expressions.ConditionalExpression.prototype.get_Test, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Test", System.Linq.Expressions.ConditionalExpression.prototype.set_Test, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IfTrue", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfTrue", System.Linq.Expressions.ConditionalExpression.prototype.set_IfTrue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IfFalse", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_IfFalse", System.Linq.Expressions.ConditionalExpression.prototype.set_IfFalse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConditionalExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Test = function() {return this.$Test$k__BackingField;};
    $p.set_Test = function(value) {this.$Test$k__BackingField = value;return value;};
    $p.get_IfTrue = function() {return this.$IfTrue$k__BackingField;};
    $p.set_IfTrue = function(value) {this.$IfTrue$k__BackingField = value;return value;};
    $p.get_IfFalse = function() {return this.$IfFalse$k__BackingField;};
    $p.set_IfFalse = function(value) {this.$IfFalse$k__BackingField = value;return value;};
    $p.$ctor = function(test, ifTrue, ifFalse) {
        this.type = null;
        this.$Test$k__BackingField = null;
        this.$IfTrue$k__BackingField = null;
        this.$IfFalse$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Conditional);
        this.set_Test(test);
        this.set_IfTrue(ifTrue);
        this.set_IfFalse(ifFalse);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(test, ifTrue, ifFalse) {
        return new $p.$ctor.$type(
            this, 
            test, 
            ifTrue, 
            ifFalse
        );
    };
    $p.$ctor$1 = function(test, ifTrue, ifFalse, type) {
        this.type = null;
        this.$Test$k__BackingField = null;
        this.$IfTrue$k__BackingField = null;
        this.$IfFalse$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Conditional);
        this.set_Test(test);
        this.set_IfTrue(ifTrue);
        this.set_IfFalse(ifFalse);
        this.type = type;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(test, ifTrue, ifFalse, type) {
        return new $p.$ctor$1.$type(
            this, 
            test, 
            ifTrue, 
            ifFalse, 
            type
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitConditional(this);
    };
    $p.get_Type = function() {
        return this.type || this.get_IfTrue().get_Type();
    };
    $p.Update = function(test, ifTrue, ifFalse) {
        return this;
    };
}).call(null, System.Linq.Expressions.ConditionalExpression, System.Linq.Expressions.ConditionalExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ConditionalExpression);
System.Linq.Expressions.ConstantExpression = $define("System.Linq.Expressions.ConstantExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.ConstantExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ConstantExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConstantExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ConstantExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ConstantExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Value$k__BackingField", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Linq.Expressions.ConstantExpression.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Linq.Expressions.ConstantExpression.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ConstantExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConstantExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ConstantExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Linq.Expressions.ConstantExpression.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Linq.Expressions.ConstantExpression.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Value", System.Linq.Expressions.ConstantExpression.prototype.set_Value, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ConstantExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Value = function() {return this.$Value$k__BackingField;};
    $p.set_Value = function(value) {this.$Value$k__BackingField = value;return value;};
    $p.$ctor = function(value) {
        this.type = null;
        this.$Value$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Constant);
        this.set_Value(value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(value) {
        return new $p.$ctor.$type(this, value);
    };
    $p.$ctor$1 = function(value, type) {
        this.type = null;
        this.$Value$k__BackingField = null;
        System.Linq.Expressions.ConstantExpression.prototype.$ctor.call(this, value);
        this.type = type;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(value, type) {
        return new $p.$ctor$1.$type(this, value, type);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitConstant(this);
    };
    $p.get_Type = function() {
        return this.type || (this.get_Value() != null ? this.get_Value().GetType() : System.Object.$GetType());
    };
}).call(null, System.Linq.Expressions.ConstantExpression, System.Linq.Expressions.ConstantExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ConstantExpression);
System.Linq.Expressions.DefaultExpression = $define("System.Linq.Expressions.DefaultExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.DefaultExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.DefaultExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DefaultExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.DefaultExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.DefaultExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.DefaultExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.DefaultExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.DefaultExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.DefaultExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.$ctor = function(type) {
        this.type = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Default);
        this.type = type;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(type) {
        return new $p.$ctor.$type(this, type);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitDefault(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
}).call(null, System.Linq.Expressions.DefaultExpression, System.Linq.Expressions.DefaultExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.DefaultExpression);
System.Linq.Expressions.ElementInit = $define("System.Linq.Expressions.ElementInit", System.Object);
(System.Linq.Expressions.ElementInit.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.ElementInit";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ElementInit", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ElementInit", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ElementInit, System.Object, $arrayinit([System.Linq.Expressions.IArgumentProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$AddMethod$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Linq.Expressions.ElementInit.prototype.get_AddMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AddMethod", System.Linq.Expressions.ElementInit.prototype.set_AddMethod, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.ElementInit.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.ElementInit.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ElementInit.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ElementInit.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("AddMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Linq.Expressions.ElementInit.prototype.get_AddMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_AddMethod", System.Linq.Expressions.ElementInit.prototype.set_AddMethod, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.ElementInit.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.ElementInit.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.get_AddMethod = function() {return this.$AddMethod$k__BackingField;};
    $p.set_AddMethod = function(value) {this.$AddMethod$k__BackingField = value;return value;};
    $p.get_Arguments = function() {return this.$Arguments$k__BackingField;};
    $p.set_Arguments = function(value) {this.$Arguments$k__BackingField = value;return value;};
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = $p.get_Arguments;
    $p.$ctor = function(addMethod, args) {
        this.$AddMethod$k__BackingField = null;
        this.$Arguments$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
        this.set_AddMethod(addMethod);
        this.set_Arguments(args);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(addMethod, args) {
        return new $p.$ctor.$type(this, addMethod, args);
    };
    $p.Update = function(args) {
        return this;
    };
}).call(null, System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ElementInit);
System.Linq.Expressions.Expression$1 = $define("System.Linq.Expressions.Expression<TDelegate>", System.Linq.Expressions.LambdaExpression);
(System.Linq.Expressions.Expression$1.$TypeInitializer = function($t, $p, TDelegate) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.LambdaExpression;
    $p.$typeName = "System.Linq.Expressions.Expression`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Expression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.Expression`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.Expression$1, System.Linq.Expressions.LambdaExpression, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.Expression$1.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compile", System.Linq.Expressions.Expression$1.prototype.Compile$1, $arrayinit([], System.Reflection.ParameterInfo), TDelegate, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.Expression$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("body", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("tailCall", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Linq.Expressions.ParameterExpression), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.LambdaExpression.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.Expressions.Expression$1, arguments)();
    };
    window.System.Linq.Expressions.Expression$1$ = $t.$;
    $p.$ctor = function(body, name, tailCall, parameters) {
        System.Linq.Expressions.LambdaExpression.prototype.$ctor.call(
            this, 
            TDelegate.$GetType(), 
            name, 
            body, 
            tailCall, 
            parameters
        );
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(body, name, tailCall, parameters) {
        return new $p.$ctor.$type(
            this, 
            body, 
            name, 
            tailCall, 
            parameters
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitLambda(TDelegate, this);
    };
    $p.Compile$1 = function() {
        var lambdaExpression = this;
        var lambda = function() {
            var evaluator = System.Runtime.WootzJs.Evaluator.prototype.$ctor.$new(lambdaExpression.get_Body());
            var index = 0;
            {
                var $anon$3iterator = lambdaExpression.get_Parameters();
                var $anon$4enumerator = $anon$3iterator.System$Collections$IEnumerable$GetEnumerator();
                while ($anon$4enumerator.System$Collections$IEnumerator$MoveNext()) {
                    var parameter = $anon$4enumerator.System$Collections$IEnumerator$get_Current();
                    var value = arguments[index];
                    evaluator.AddArgument(parameter, value);
                    index++;
                }
            }
            return evaluator.Evaluate();
        };
        return $delegate(
            null, 
            TDelegate.$GetType().thisType, 
            lambda, 
            null
        );
    };
}).call(
    null, 
    System.Linq.Expressions.Expression$1, 
    System.Linq.Expressions.Expression$1.prototype, 
    $definetypeparameter("TDelegate", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.Expression$1);
System.Linq.Expressions.ExpressionType = $define("System.Linq.Expressions.ExpressionType", System.Enum);
(System.Linq.Expressions.ExpressionType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Linq.Expressions.ExpressionType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ExpressionType", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ExpressionType", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Linq.Expressions.ExpressionType, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Add", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AddChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("And", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AndAlso", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayLength", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayIndex", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Call", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Coalesce", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Conditional", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Constant", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 9, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Convert", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 10, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ConvertChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 11, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Divide", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 12, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Equal", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 13, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ExclusiveOr", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 14, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GreaterThan", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 15, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GreaterThanOrEqual", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Invoke", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 17, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Lambda", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 18, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("LeftShift", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 19, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("LessThan", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 20, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("LessThanOrEqual", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 21, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ListInit", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 22, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberAccess", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 23, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberInit", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 24, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Modulo", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 25, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Multiply", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 26, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 27, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Negate", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 28, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UnaryPlus", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 29, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NegateChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 30, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("New", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 31, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NewArrayInit", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NewArrayBounds", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 33, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Not", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 34, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NotEqual", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 35, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Or", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 36, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OrElse", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 37, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Parameter", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 38, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Power", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 39, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Quote", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 40, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RightShift", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 41, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Subtract", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 42, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 43, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeAs", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 44, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeIs", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 45, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Assign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 46, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Block", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 47, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DebugInfo", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 48, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Decrement", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 49, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Dynamic", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 50, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 51, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Extension", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 52, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Goto", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 53, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Increment", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 54, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Index", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 55, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Label", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 56, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RuntimeVariables", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 57, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Loop", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 58, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Switch", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 59, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Throw", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 60, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Try", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 61, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Unbox", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 62, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AddAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 63, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AndAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DivideAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 65, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ExclusiveOrAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 66, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("LeftShiftAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 67, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ModuloAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 68, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 69, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OrAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 70, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PowerAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 71, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RightShiftAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 72, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 73, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AddAssignChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 74, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MultiplyAssignChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 75, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SubtractAssignChecked", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 76, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PreIncrementAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 77, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PreDecrementAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 78, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PostIncrementAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 79, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PostDecrementAssign", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 80, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeEqual", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 81, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OnesComplement", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 82, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IsTrue", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 83, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IsFalse", System.Linq.Expressions.ExpressionType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 84, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ExpressionType.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Add = $p.$ctor.$new("Add", 0);
        $t.AddChecked = $p.$ctor.$new("AddChecked", System.Linq.Expressions.ExpressionType().Add + 1);
        $t.And = $p.$ctor.$new("And", System.Linq.Expressions.ExpressionType().AddChecked + 1);
        $t.AndAlso = $p.$ctor.$new("AndAlso", System.Linq.Expressions.ExpressionType().And + 1);
        $t.ArrayLength = $p.$ctor.$new("ArrayLength", System.Linq.Expressions.ExpressionType().AndAlso + 1);
        $t.ArrayIndex = $p.$ctor.$new("ArrayIndex", System.Linq.Expressions.ExpressionType().ArrayLength + 1);
        $t.Call = $p.$ctor.$new("Call", System.Linq.Expressions.ExpressionType().ArrayIndex + 1);
        $t.Coalesce = $p.$ctor.$new("Coalesce", System.Linq.Expressions.ExpressionType().Call + 1);
        $t.Conditional = $p.$ctor.$new("Conditional", System.Linq.Expressions.ExpressionType().Coalesce + 1);
        $t.Constant = $p.$ctor.$new("Constant", System.Linq.Expressions.ExpressionType().Conditional + 1);
        $t.Convert = $p.$ctor.$new("Convert", System.Linq.Expressions.ExpressionType().Constant + 1);
        $t.ConvertChecked = $p.$ctor.$new("ConvertChecked", System.Linq.Expressions.ExpressionType().Convert + 1);
        $t.Divide = $p.$ctor.$new("Divide", System.Linq.Expressions.ExpressionType().ConvertChecked + 1);
        $t.Equal = $p.$ctor.$new("Equal", System.Linq.Expressions.ExpressionType().Divide + 1);
        $t.ExclusiveOr = $p.$ctor.$new("ExclusiveOr", System.Linq.Expressions.ExpressionType().Equal + 1);
        $t.GreaterThan = $p.$ctor.$new("GreaterThan", System.Linq.Expressions.ExpressionType().ExclusiveOr + 1);
        $t.GreaterThanOrEqual = $p.$ctor.$new("GreaterThanOrEqual", System.Linq.Expressions.ExpressionType().GreaterThan + 1);
        $t.Invoke = $p.$ctor.$new("Invoke", System.Linq.Expressions.ExpressionType().GreaterThanOrEqual + 1);
        $t.Lambda = $p.$ctor.$new("Lambda", System.Linq.Expressions.ExpressionType().Invoke + 1);
        $t.LeftShift = $p.$ctor.$new("LeftShift", System.Linq.Expressions.ExpressionType().Lambda + 1);
        $t.LessThan = $p.$ctor.$new("LessThan", System.Linq.Expressions.ExpressionType().LeftShift + 1);
        $t.LessThanOrEqual = $p.$ctor.$new("LessThanOrEqual", System.Linq.Expressions.ExpressionType().LessThan + 1);
        $t.ListInit = $p.$ctor.$new("ListInit", System.Linq.Expressions.ExpressionType().LessThanOrEqual + 1);
        $t.MemberAccess = $p.$ctor.$new("MemberAccess", System.Linq.Expressions.ExpressionType().ListInit + 1);
        $t.MemberInit = $p.$ctor.$new("MemberInit", System.Linq.Expressions.ExpressionType().MemberAccess + 1);
        $t.Modulo = $p.$ctor.$new("Modulo", System.Linq.Expressions.ExpressionType().MemberInit + 1);
        $t.Multiply = $p.$ctor.$new("Multiply", System.Linq.Expressions.ExpressionType().Modulo + 1);
        $t.MultiplyChecked = $p.$ctor.$new("MultiplyChecked", System.Linq.Expressions.ExpressionType().Multiply + 1);
        $t.Negate = $p.$ctor.$new("Negate", System.Linq.Expressions.ExpressionType().MultiplyChecked + 1);
        $t.UnaryPlus = $p.$ctor.$new("UnaryPlus", System.Linq.Expressions.ExpressionType().Negate + 1);
        $t.NegateChecked = $p.$ctor.$new("NegateChecked", System.Linq.Expressions.ExpressionType().UnaryPlus + 1);
        $t.New = $p.$ctor.$new("New", System.Linq.Expressions.ExpressionType().NegateChecked + 1);
        $t.NewArrayInit = $p.$ctor.$new("NewArrayInit", System.Linq.Expressions.ExpressionType().New + 1);
        $t.NewArrayBounds = $p.$ctor.$new("NewArrayBounds", System.Linq.Expressions.ExpressionType().NewArrayInit + 1);
        $t.Not = $p.$ctor.$new("Not", System.Linq.Expressions.ExpressionType().NewArrayBounds + 1);
        $t.NotEqual = $p.$ctor.$new("NotEqual", System.Linq.Expressions.ExpressionType().Not + 1);
        $t.Or = $p.$ctor.$new("Or", System.Linq.Expressions.ExpressionType().NotEqual + 1);
        $t.OrElse = $p.$ctor.$new("OrElse", System.Linq.Expressions.ExpressionType().Or + 1);
        $t.Parameter = $p.$ctor.$new("Parameter", System.Linq.Expressions.ExpressionType().OrElse + 1);
        $t.Power = $p.$ctor.$new("Power", System.Linq.Expressions.ExpressionType().Parameter + 1);
        $t.Quote = $p.$ctor.$new("Quote", System.Linq.Expressions.ExpressionType().Power + 1);
        $t.RightShift = $p.$ctor.$new("RightShift", System.Linq.Expressions.ExpressionType().Quote + 1);
        $t.Subtract = $p.$ctor.$new("Subtract", System.Linq.Expressions.ExpressionType().RightShift + 1);
        $t.SubtractChecked = $p.$ctor.$new("SubtractChecked", System.Linq.Expressions.ExpressionType().Subtract + 1);
        $t.TypeAs = $p.$ctor.$new("TypeAs", System.Linq.Expressions.ExpressionType().SubtractChecked + 1);
        $t.TypeIs = $p.$ctor.$new("TypeIs", System.Linq.Expressions.ExpressionType().TypeAs + 1);
        $t.Assign = $p.$ctor.$new("Assign", System.Linq.Expressions.ExpressionType().TypeIs + 1);
        $t.Block = $p.$ctor.$new("Block", System.Linq.Expressions.ExpressionType().Assign + 1);
        $t.DebugInfo = $p.$ctor.$new("DebugInfo", System.Linq.Expressions.ExpressionType().Block + 1);
        $t.Decrement = $p.$ctor.$new("Decrement", System.Linq.Expressions.ExpressionType().DebugInfo + 1);
        $t.Dynamic = $p.$ctor.$new("Dynamic", System.Linq.Expressions.ExpressionType().Decrement + 1);
        $t.Default = $p.$ctor.$new("Default", System.Linq.Expressions.ExpressionType().Dynamic + 1);
        $t.Extension = $p.$ctor.$new("Extension", System.Linq.Expressions.ExpressionType().Default + 1);
        $t.Goto = $p.$ctor.$new("Goto", System.Linq.Expressions.ExpressionType().Extension + 1);
        $t.Increment = $p.$ctor.$new("Increment", System.Linq.Expressions.ExpressionType().Goto + 1);
        $t.Index = $p.$ctor.$new("Index", System.Linq.Expressions.ExpressionType().Increment + 1);
        $t.Label = $p.$ctor.$new("Label", System.Linq.Expressions.ExpressionType().Index + 1);
        $t.RuntimeVariables = $p.$ctor.$new("RuntimeVariables", System.Linq.Expressions.ExpressionType().Label + 1);
        $t.Loop = $p.$ctor.$new("Loop", System.Linq.Expressions.ExpressionType().RuntimeVariables + 1);
        $t.Switch = $p.$ctor.$new("Switch", System.Linq.Expressions.ExpressionType().Loop + 1);
        $t.Throw = $p.$ctor.$new("Throw", System.Linq.Expressions.ExpressionType().Switch + 1);
        $t.Try = $p.$ctor.$new("Try", System.Linq.Expressions.ExpressionType().Throw + 1);
        $t.Unbox = $p.$ctor.$new("Unbox", System.Linq.Expressions.ExpressionType().Try + 1);
        $t.AddAssign = $p.$ctor.$new("AddAssign", System.Linq.Expressions.ExpressionType().Unbox + 1);
        $t.AndAssign = $p.$ctor.$new("AndAssign", System.Linq.Expressions.ExpressionType().AddAssign + 1);
        $t.DivideAssign = $p.$ctor.$new("DivideAssign", System.Linq.Expressions.ExpressionType().AndAssign + 1);
        $t.ExclusiveOrAssign = $p.$ctor.$new("ExclusiveOrAssign", System.Linq.Expressions.ExpressionType().DivideAssign + 1);
        $t.LeftShiftAssign = $p.$ctor.$new("LeftShiftAssign", System.Linq.Expressions.ExpressionType().ExclusiveOrAssign + 1);
        $t.ModuloAssign = $p.$ctor.$new("ModuloAssign", System.Linq.Expressions.ExpressionType().LeftShiftAssign + 1);
        $t.MultiplyAssign = $p.$ctor.$new("MultiplyAssign", System.Linq.Expressions.ExpressionType().ModuloAssign + 1);
        $t.OrAssign = $p.$ctor.$new("OrAssign", System.Linq.Expressions.ExpressionType().MultiplyAssign + 1);
        $t.PowerAssign = $p.$ctor.$new("PowerAssign", System.Linq.Expressions.ExpressionType().OrAssign + 1);
        $t.RightShiftAssign = $p.$ctor.$new("RightShiftAssign", System.Linq.Expressions.ExpressionType().PowerAssign + 1);
        $t.SubtractAssign = $p.$ctor.$new("SubtractAssign", System.Linq.Expressions.ExpressionType().RightShiftAssign + 1);
        $t.AddAssignChecked = $p.$ctor.$new("AddAssignChecked", System.Linq.Expressions.ExpressionType().SubtractAssign + 1);
        $t.MultiplyAssignChecked = $p.$ctor.$new("MultiplyAssignChecked", System.Linq.Expressions.ExpressionType().AddAssignChecked + 1);
        $t.SubtractAssignChecked = $p.$ctor.$new("SubtractAssignChecked", System.Linq.Expressions.ExpressionType().MultiplyAssignChecked + 1);
        $t.PreIncrementAssign = $p.$ctor.$new("PreIncrementAssign", System.Linq.Expressions.ExpressionType().SubtractAssignChecked + 1);
        $t.PreDecrementAssign = $p.$ctor.$new("PreDecrementAssign", System.Linq.Expressions.ExpressionType().PreIncrementAssign + 1);
        $t.PostIncrementAssign = $p.$ctor.$new("PostIncrementAssign", System.Linq.Expressions.ExpressionType().PreDecrementAssign + 1);
        $t.PostDecrementAssign = $p.$ctor.$new("PostDecrementAssign", System.Linq.Expressions.ExpressionType().PostIncrementAssign + 1);
        $t.TypeEqual = $p.$ctor.$new("TypeEqual", System.Linq.Expressions.ExpressionType().PostDecrementAssign + 1);
        $t.OnesComplement = $p.$ctor.$new("OnesComplement", System.Linq.Expressions.ExpressionType().TypeEqual + 1);
        $t.IsTrue = $p.$ctor.$new("IsTrue", System.Linq.Expressions.ExpressionType().OnesComplement + 1);
        $t.IsFalse = $p.$ctor.$new("IsFalse", System.Linq.Expressions.ExpressionType().IsTrue + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Linq.Expressions.ExpressionType, System.Linq.Expressions.ExpressionType.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ExpressionType);
System.Linq.Expressions.ExpressionVisitor = $define("System.Linq.Expressions.ExpressionVisitor", System.Object);
(System.Linq.Expressions.ExpressionVisitor.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.ExpressionVisitor";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ExpressionVisitor", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ExpressionVisitor", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ExpressionVisitor, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Visit", System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Visit", System.Linq.Expressions.ExpressionVisitor.prototype.Visit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitArguments", System.Linq.Expressions.ExpressionVisitor.prototype.VisitArguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Linq.Expressions.IArgumentProvider, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Linq.Expressions.Expression), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Visit", System.Linq.Expressions.ExpressionVisitor.prototype.Visit$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementVisitor", System.Func$2$(T, T), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("VisitAndConvert", System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callerName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute));}).call(this), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("VisitAndConvert", System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodes", System.Collections.Generic.List$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callerName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitBinary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.BinaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConditional", System.Linq.Expressions.ExpressionVisitor.prototype.VisitConditional, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConditionalExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConstant", System.Linq.Expressions.ExpressionVisitor.prototype.VisitConstant, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConstantExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitDefault", System.Linq.Expressions.ExpressionVisitor.prototype.VisitDefault, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.DefaultExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitInvocation", System.Linq.Expressions.ExpressionVisitor.prototype.VisitInvocation, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.InvocationExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("VisitLambda", System.Linq.Expressions.ExpressionVisitor.prototype.VisitLambda, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.Expression$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMember", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMember, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitIndex", System.Linq.Expressions.ExpressionVisitor.prototype.VisitIndex, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.IndexExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMethodCall", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMethodCall, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MethodCallExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNewArray", System.Linq.Expressions.ExpressionVisitor.prototype.VisitNewArray, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewArrayExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNew", System.Linq.Expressions.ExpressionVisitor.prototype.VisitNew, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitParameter", System.Linq.Expressions.ExpressionVisitor.prototype.VisitParameter, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ParameterExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitTypeBinary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitTypeBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.TypeBinaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitUnary", System.Linq.Expressions.ExpressionVisitor.prototype.VisitUnary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.UnaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberInitExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitListInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitListInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ListInitExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitElementInit", System.Linq.Expressions.ExpressionVisitor.prototype.VisitElementInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ElementInit, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ElementInit, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberBinding, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberBinding, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberBinding, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberAssignment", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberAssignment, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberAssignment, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberMemberBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberMemberBinding, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberMemberBinding, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberMemberBinding, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberListBinding", System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberListBinding, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberListBinding, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberListBinding, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateUnary", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateUnary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Linq.Expressions.UnaryExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Linq.Expressions.UnaryExpression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateBinary", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Linq.Expressions.BinaryExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Linq.Expressions.BinaryExpression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.BinaryExpression, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ValidateChildType", System.Linq.Expressions.ExpressionVisitor.prototype.ValidateChildType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("before", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("after", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodName", String, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ExpressionVisitor.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Visit$1 = function(node) {
        if (node != null) {
            return node.Accept(this);
        }
        return null;
    };
    $p.Visit = function(nodes) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = this.Visit$1(nodes.get_Item(i));
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = $arrayinit(new Array(n), System.Linq.Expressions.Expression);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return System.Collections.Generic.List$1$(System.Linq.Expressions.Expression).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitArguments = function(nodes) {
        var newNodes = null;
        for (var i = 0, n = nodes.System$Linq$Expressions$IArgumentProvider$get_Arguments().get_Count(); i < n; i++) {
            var curNode = nodes.System$Linq$Expressions$IArgumentProvider$get_Arguments().get_Item(i);
            var node = this.Visit$1(curNode);
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == curNode) {
                    newNodes = $arrayinit(new Array(n), System.Linq.Expressions.Expression);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.System$Linq$Expressions$IArgumentProvider$get_Arguments().get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        return newNodes;
    };
    $t.Visit$2 = function(T, nodes, elementVisitor) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = elementVisitor(nodes.get_Item(i));
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = $arrayinit(new Array(n), T);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return System.Collections.Generic.List$1$(T).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitAndConvert$1 = function(T, node, callerName) {
        if (node == null) {
            return null;
        }
        node = (function() {
            var $as$ = this.Visit$1(node);
            if (!System.Type.prototype.IsInstanceOfType.call(T.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (node == null) {
            throw System.Exception.prototype.$ctor$1.$new("MustRewriteToSameNode").InternalInit(new Error());
        }
        return node;
    };
    $p.VisitAndConvert = function(T, nodes, callerName) {
        var newNodes = null;
        for (var i = 0, n = nodes.get_Count(); i < n; i++) {
            var node = (function() {
                var $as$ = this.Visit$1(nodes.get_Item(i));
                if (!System.Type.prototype.IsInstanceOfType.call(T.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (node == null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteToSameNode").InternalInit(new Error());
            }
            if (newNodes != null) {
                newNodes[i] = node;
            }
            else
                if (!node == nodes.get_Item(i)) {
                    newNodes = $arrayinit(new Array(n), T);
                    for (var j = 0; j < i; j++) {
                        newNodes[j] = nodes.get_Item(j);
                    }
                    newNodes[i] = node;
                }
        }
        if (newNodes == null) {
            return nodes;
        }
        return System.Collections.Generic.List$1$(T).prototype.$ctor$1.$new(newNodes);
    };
    $p.VisitBinary = function(node) {
        return System.Linq.Expressions.ExpressionVisitor.ValidateBinary(node, node.Update(this.Visit$1(node.get_Left()), this.VisitAndConvert$1(System.Linq.Expressions.LambdaExpression, node.get_Conversion(), "VisitBinary"), this.Visit$1(node.get_Right())));
    };
    $p.VisitConditional = function(node) {
        return node.Update(this.Visit$1(node.get_Test()), this.Visit$1(node.get_IfTrue()), this.Visit$1(node.get_IfFalse()));
    };
    $p.VisitConstant = function(node) {
        return node;
    };
    $p.VisitDefault = function(node) {
        return node;
    };
    $p.VisitInvocation = function(node) {
        var e = this.Visit$1(node.get_Expression());
        var a = this.VisitArguments(node);
        if (e == node.get_Expression() && a == null) {
            return node;
        }
        return node.Rewrite(e, a);
    };
    $p.VisitLambda = function(T, node) {
        return node.Update(this.Visit$1(node.get_Body()), this.VisitAndConvert(System.Linq.Expressions.ParameterExpression, node.get_Parameters(), "VisitLambda"));
    };
    $p.VisitMember = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitIndex = function(node) {
        var o = this.Visit$1(node.get_Object());
        var a = this.VisitArguments(node);
        if (o == node.get_Object() && a == null) {
            return node;
        }
        return node;
    };
    $p.VisitMethodCall = function(node) {
        var o = this.Visit$1(node.get_Object());
        var a = this.VisitArguments(node);
        if (o == node.get_Object() && a == null) {
            return node;
        }
        return node;
    };
    $p.VisitNewArray = function(node) {
        return node.Update(this.Visit(node.get_Expressions()));
    };
    $p.VisitNew = function(node) {
        return node.Update(this.Visit(node.get_Arguments()));
    };
    $p.VisitParameter = function(node) {
        return node;
    };
    $p.VisitTypeBinary = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitUnary = function(node) {
        return System.Linq.Expressions.ExpressionVisitor.ValidateUnary(node, node.Update(this.Visit$1(node.get_Operand())));
    };
    $p.VisitMemberInit = function(node) {
        return node.Update(this.VisitAndConvert$1(System.Linq.Expressions.NewExpression, node.get_NewExpression(), "VisitMemberInit"), System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.MemberBinding, node.get_Bindings(), $delegate(
            this, 
            System.Func$2$(System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding), 
            this.VisitMemberBinding, 
            "VisitMemberBinding$delegate"
        )));
    };
    $p.VisitListInit = function(node) {
        return node.Update(this.VisitAndConvert$1(System.Linq.Expressions.NewExpression, node.get_NewExpression(), "VisitListInit"), System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.ElementInit, node.get_Initializers(), $delegate(
            this, 
            System.Func$2$(System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit), 
            this.VisitElementInit, 
            "VisitElementInit$delegate"
        )));
    };
    $p.VisitElementInit = function(node) {
        return node.Update(this.Visit(node.get_Arguments()));
    };
    $p.VisitMemberBinding = function(node) {
        switch (node.get_BindingType()) {
            case System.Linq.Expressions.MemberBindingType().Assignment:
                return this.VisitMemberAssignment($cast(System.Linq.Expressions.MemberBinding, node));
            case System.Linq.Expressions.MemberBindingType().MemberBinding:
                return this.VisitMemberMemberBinding($cast(System.Linq.Expressions.MemberBinding, node));
            case System.Linq.Expressions.MemberBindingType().ListBinding:
                return this.VisitMemberListBinding($cast(System.Linq.Expressions.MemberBinding, node));
            default:
                throw System.Exception.prototype.$ctor$1.$new("UnhandledBindingType").InternalInit(new Error());
        }
    };
    $p.VisitMemberAssignment = function(node) {
        return node.Update(this.Visit$1(node.get_Expression()));
    };
    $p.VisitMemberMemberBinding = function(node) {
        return node.Update(System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.MemberBinding, node.get_Bindings(), $delegate(
            this, 
            System.Func$2$(System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding), 
            this.VisitMemberBinding, 
            "VisitMemberBinding$delegate"
        )));
    };
    $p.VisitMemberListBinding = function(node) {
        return node.Update(System.Linq.Expressions.ExpressionVisitor.Visit$2(System.Linq.Expressions.ElementInit, node.get_Initializers(), $delegate(
            this, 
            System.Func$2$(System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit), 
            this.VisitElementInit, 
            "VisitElementInit$delegate"
        )));
    };
    $t.ValidateUnary = function(before, after) {
        if (before != after && before.get_Method() == null) {
            if (after.get_Method() != null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteWithoutMethod").InternalInit(new Error());
            }
            if (before.get_Operand() != null && after.get_Operand() != null) {
                System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Operand().get_Type(), after.get_Operand().get_Type(), "VisitUnary");
            }
        }
        return after;
    };
    $t.ValidateBinary = function(before, after) {
        if (before != after && before.get_Method() == null) {
            if (after.get_Method() != null) {
                throw System.Exception.prototype.$ctor$1.$new("MustRewriteWithoutMethod").InternalInit(new Error());
            }
            System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Left().get_Type(), after.get_Left().get_Type(), "VisitBinary");
            System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.get_Right().get_Type(), after.get_Right().get_Type(), "VisitBinary");
        }
        return after;
    };
    $t.ValidateChildType = function(before, after, methodName) {
        if (before.get_IsValueType()) {
            if (before == after) {
                return;
            }
        }
        else
            if (!after.get_IsValueType()) {
                return;
            }
        throw System.Exception.prototype.$ctor$1.$new("MustRewriteChildToSameType").InternalInit(new Error());
    };
}).call(null, System.Linq.Expressions.ExpressionVisitor, System.Linq.Expressions.ExpressionVisitor.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ExpressionVisitor);
System.Linq.Expressions.FieldExpression = $define("System.Linq.Expressions.FieldExpression", System.Linq.Expressions.MemberExpression);
(System.Linq.Expressions.FieldExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.MemberExpression;
    $p.$typeName = "System.Linq.Expressions.FieldExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.FieldExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.FieldExpression, System.Linq.Expressions.MemberExpression, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.FieldExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.FieldExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.FieldInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.FieldExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.MemberExpression.$StaticInitializer();
    };
    $p.$ctor = function(expression, member) {
        System.Linq.Expressions.MemberExpression.prototype.$ctor.call(this, expression, member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.get_Type = function() {
        return ($cast(System.Reflection.MemberInfo, this.get_Member())).get_FieldType();
    };
}).call(null, System.Linq.Expressions.FieldExpression, System.Linq.Expressions.FieldExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.FieldExpression);
System.Linq.Expressions.IArgumentProvider = $define("System.Linq.Expressions.IArgumentProvider", System.Object);
(System.Linq.Expressions.IArgumentProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Expressions.IArgumentProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IArgumentProvider", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.IArgumentProvider", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.Expressions.IArgumentProvider, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IArgumentProvider.prototype.System$Linq$Expressions$IArgumentProvider$get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IArgumentProvider.prototype.System$Linq$Expressions$IArgumentProvider$get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = function() {};
}).call(null, System.Linq.Expressions.IArgumentProvider, System.Linq.Expressions.IArgumentProvider.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.IArgumentProvider);
System.Linq.Expressions.IndexExpression = $define("System.Linq.Expressions.IndexExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.IndexExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.IndexExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IndexExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.IndexExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.IndexExpression, System.Linq.Expressions.Expression, $arrayinit([System.Linq.Expressions.IArgumentProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Object$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Indexer$k__BackingField", System.Reflection.PropertyInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("elementType", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.IndexExpression.prototype.get_Object, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.IndexExpression.prototype.set_Object, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Indexer", System.Linq.Expressions.IndexExpression.prototype.get_Indexer, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Indexer", System.Linq.Expressions.IndexExpression.prototype.set_Indexer, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.PropertyInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IndexExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.IndexExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.IndexExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.IndexExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.IndexExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexer", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", System.Type, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Object", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.IndexExpression.prototype.get_Object, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.IndexExpression.prototype.set_Object, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Indexer", System.Reflection.PropertyInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Indexer", System.Linq.Expressions.IndexExpression.prototype.get_Indexer, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Indexer", System.Linq.Expressions.IndexExpression.prototype.set_Indexer, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.PropertyInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.IndexExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.IndexExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.IndexExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Object = function() {return this.$Object$k__BackingField;};
    $p.set_Object = function(value) {this.$Object$k__BackingField = value;return value;};
    $p.get_Indexer = function() {return this.$Indexer$k__BackingField;};
    $p.set_Indexer = function(value) {this.$Indexer$k__BackingField = value;return value;};
    $p.get_Arguments = function() {return this.$Arguments$k__BackingField;};
    $p.set_Arguments = function(value) {this.$Arguments$k__BackingField = value;return value;};
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = $p.get_Arguments;
    $p.$ctor = function(obj, indexer, elementType, args) {
        this.elementType = null;
        this.$Object$k__BackingField = null;
        this.$Indexer$k__BackingField = null;
        this.$Arguments$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Index);
        this.set_Object(obj);
        this.set_Indexer(indexer);
        this.set_Arguments(args);
        this.elementType = elementType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(obj, indexer, elementType, args) {
        return new $p.$ctor.$type(
            this, 
            obj, 
            indexer, 
            elementType, 
            args
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitIndex(this);
    };
    $p.get_Type = function() {
        return this.elementType;
    };
}).call(null, System.Linq.Expressions.IndexExpression, System.Linq.Expressions.IndexExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.IndexExpression);
System.Linq.Expressions.InvocationExpression = $define("System.Linq.Expressions.InvocationExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.InvocationExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.InvocationExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("InvocationExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.InvocationExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.InvocationExpression, System.Linq.Expressions.Expression, $arrayinit([System.Linq.Expressions.IArgumentProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("returnType", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.InvocationExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.InvocationExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.InvocationExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.InvocationExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.InvocationExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.InvocationExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Rewrite", System.Linq.Expressions.InvocationExpression.prototype.Rewrite, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("lambda", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.InvocationExpression, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.InvocationExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.InvocationExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.InvocationExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.InvocationExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.InvocationExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.InvocationExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Expression = function() {return this.$Expression$k__BackingField;};
    $p.set_Expression = function(value) {this.$Expression$k__BackingField = value;return value;};
    $p.get_Arguments = function() {return this.$Arguments$k__BackingField;};
    $p.set_Arguments = function(value) {this.$Arguments$k__BackingField = value;return value;};
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = $p.get_Arguments;
    $p.$ctor = function(expression, args, returnType) {
        this.returnType = null;
        this.$Expression$k__BackingField = null;
        this.$Arguments$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Invoke);
        this.set_Expression(expression);
        this.set_Arguments(args);
        this.returnType = returnType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, args, returnType) {
        return new $p.$ctor.$type(
            this, 
            expression, 
            args, 
            returnType
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitInvocation(this);
    };
    $p.get_Type = function() {
        return this.returnType;
    };
    $p.Rewrite = function(lambda, args) {
        return this;
    };
}).call(null, System.Linq.Expressions.InvocationExpression, System.Linq.Expressions.InvocationExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.InvocationExpression);
System.Linq.Expressions.ListInitExpression = $define("System.Linq.Expressions.ListInitExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.ListInitExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ListInitExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ListInitExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ListInitExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ListInitExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$NewExpression$k__BackingField", System.Linq.Expressions.NewExpression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Initializers$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.set_NewExpression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.ListInitExpression.prototype.get_Initializers, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.ListInitExpression.prototype.set_Initializers, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ListInitExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ListInitExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.ListInitExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.ListInitExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ListInitExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.ListInitExpression.prototype.set_NewExpression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Initializers", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.ListInitExpression.prototype.get_Initializers, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.ListInitExpression.prototype.set_Initializers, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ListInitExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_NewExpression = function() {return this.$NewExpression$k__BackingField;};
    $p.set_NewExpression = function(value) {this.$NewExpression$k__BackingField = value;return value;};
    $p.get_Initializers = function() {return this.$Initializers$k__BackingField;};
    $p.set_Initializers = function(value) {this.$Initializers$k__BackingField = value;return value;};
    $p.$ctor = function(newExpression, initializers) {
        this.$NewExpression$k__BackingField = null;
        this.$Initializers$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().ListInit);
        this.set_NewExpression(newExpression);
        this.set_Initializers(initializers);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(newExpression, initializers) {
        return new $p.$ctor.$type(this, newExpression, initializers);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitListInit(this);
    };
    $p.get_Type = function() {
        return this.get_NewExpression().get_Type();
    };
    $p.Update = function(NewExpression, initializers) {
        return this;
    };
}).call(null, System.Linq.Expressions.ListInitExpression, System.Linq.Expressions.ListInitExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ListInitExpression);
System.Linq.Expressions.MemberAssignment = $define("System.Linq.Expressions.MemberAssignment", System.Linq.Expressions.MemberBinding);
(System.Linq.Expressions.MemberAssignment.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberAssignment";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberAssignment", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberAssignment", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MemberAssignment, System.Linq.Expressions.MemberBinding, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberAssignment.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberAssignment.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberAssignment.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberAssignment, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberAssignment.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.MemberAssignment.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.MemberAssignment.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.MemberBinding.$StaticInitializer();
    };
    $p.get_Expression = function() {return this.$Expression$k__BackingField;};
    $p.set_Expression = function(value) {this.$Expression$k__BackingField = value;return value;};
    $p.$ctor = function(member, expression) {
        this.$Expression$k__BackingField = null;
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, System.Linq.Expressions.MemberBindingType().Assignment, member);
        this.set_Expression(expression);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(member, expression) {
        return new $p.$ctor.$type(this, member, expression);
    };
    $p.Update = function(Expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberAssignment, System.Linq.Expressions.MemberAssignment.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberAssignment);
System.Linq.Expressions.MemberBindingType = $define("System.Linq.Expressions.MemberBindingType", System.Enum);
(System.Linq.Expressions.MemberBindingType.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Linq.Expressions.MemberBindingType";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberBindingType", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberBindingType", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Linq.Expressions.MemberBindingType, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Assignment", System.Linq.Expressions.MemberBindingType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MemberBinding", System.Linq.Expressions.MemberBindingType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ListBinding", System.Linq.Expressions.MemberBindingType, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberBindingType.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Assignment = $p.$ctor.$new("Assignment", 0);
        $t.MemberBinding = $p.$ctor.$new("MemberBinding", System.Linq.Expressions.MemberBindingType().Assignment + 1);
        $t.ListBinding = $p.$ctor.$new("ListBinding", System.Linq.Expressions.MemberBindingType().MemberBinding + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Linq.Expressions.MemberBindingType, System.Linq.Expressions.MemberBindingType.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberBindingType);
System.Linq.Expressions.MemberInitExpression = $define("System.Linq.Expressions.MemberInitExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.MemberInitExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MemberInitExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberInitExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberInitExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MemberInitExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$NewExpression$k__BackingField", System.Linq.Expressions.NewExpression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Bindings$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.set_NewExpression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.set_Bindings, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MemberInitExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MemberInitExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberInitExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberInitExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberInitExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("newExpression", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("NewExpression", System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.NewExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_NewExpression", System.Linq.Expressions.MemberInitExpression.prototype.set_NewExpression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Bindings", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberInitExpression.prototype.set_Bindings, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MemberInitExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_NewExpression = function() {return this.$NewExpression$k__BackingField;};
    $p.set_NewExpression = function(value) {this.$NewExpression$k__BackingField = value;return value;};
    $p.get_Bindings = function() {return this.$Bindings$k__BackingField;};
    $p.set_Bindings = function(value) {this.$Bindings$k__BackingField = value;return value;};
    $p.$ctor = function(newExpression, bindings) {
        this.$NewExpression$k__BackingField = null;
        this.$Bindings$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().MemberInit);
        this.set_NewExpression(newExpression);
        this.set_Bindings(bindings);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(newExpression, bindings) {
        return new $p.$ctor.$type(this, newExpression, bindings);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMemberInit(this);
    };
    $p.get_Type = function() {
        return this.get_NewExpression().get_Type();
    };
    $p.Update = function(newExpression, bindings) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberInitExpression, System.Linq.Expressions.MemberInitExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberInitExpression);
System.Linq.Expressions.MemberListBinding = $define("System.Linq.Expressions.MemberListBinding", System.Linq.Expressions.MemberBinding);
(System.Linq.Expressions.MemberListBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberListBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberListBinding", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberListBinding", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MemberListBinding, System.Linq.Expressions.MemberBinding, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Initializers$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.MemberListBinding.prototype.get_Initializers, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.MemberListBinding.prototype.set_Initializers, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberListBinding.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberListBinding, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberListBinding.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("initializers", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Initializers", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Initializers", System.Linq.Expressions.MemberListBinding.prototype.get_Initializers, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Initializers", System.Linq.Expressions.MemberListBinding.prototype.set_Initializers, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.ElementInit), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.MemberBinding.$StaticInitializer();
    };
    $p.get_Initializers = function() {return this.$Initializers$k__BackingField;};
    $p.set_Initializers = function(value) {this.$Initializers$k__BackingField = value;return value;};
    $p.$ctor = function(bindingType, member, initializers) {
        this.$Initializers$k__BackingField = null;
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, bindingType, member);
        this.set_Initializers(initializers);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member, initializers) {
        return new $p.$ctor.$type(
            this, 
            bindingType, 
            member, 
            initializers
        );
    };
    $p.Update = function(initializers) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberListBinding, System.Linq.Expressions.MemberListBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberListBinding);
System.Linq.Expressions.MemberMemberBinding = $define("System.Linq.Expressions.MemberMemberBinding", System.Linq.Expressions.MemberBinding);
(System.Linq.Expressions.MemberMemberBinding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.MemberBinding;
    $p.$typeName = "System.Linq.Expressions.MemberMemberBinding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberMemberBinding", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MemberMemberBinding", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MemberMemberBinding, System.Linq.Expressions.MemberBinding, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Bindings$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.set_Bindings, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.MemberMemberBinding.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.MemberMemberBinding, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MemberMemberBinding.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingType", System.Linq.Expressions.MemberBindingType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.MemberInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindings", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Bindings", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Bindings", System.Linq.Expressions.MemberMemberBinding.prototype.set_Bindings, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.MemberBinding), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.MemberBinding.$StaticInitializer();
    };
    $p.get_Bindings = function() {return this.$Bindings$k__BackingField;};
    $p.set_Bindings = function(value) {this.$Bindings$k__BackingField = value;return value;};
    $p.$ctor = function(bindingType, member, bindings) {
        this.$Bindings$k__BackingField = null;
        System.Linq.Expressions.MemberBinding.prototype.$ctor.call(this, bindingType, member);
        this.set_Bindings(bindings);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(bindingType, member, bindings) {
        return new $p.$ctor.$type(
            this, 
            bindingType, 
            member, 
            bindings
        );
    };
    $p.Update = function(bindings) {
        return this;
    };
}).call(null, System.Linq.Expressions.MemberMemberBinding, System.Linq.Expressions.MemberMemberBinding.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MemberMemberBinding);
System.Linq.Expressions.MethodCallExpression = $define("System.Linq.Expressions.MethodCallExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.MethodCallExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.MethodCallExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodCallExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.MethodCallExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.MethodCallExpression, System.Linq.Expressions.Expression, $arrayinit([System.Linq.Expressions.IArgumentProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Object$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.MethodCallExpression.prototype.get_Object, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.MethodCallExpression.prototype.set_Object, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.MethodCallExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.MethodCallExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.MethodCallExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MethodCallExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.MethodCallExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Object", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Object", System.Linq.Expressions.MethodCallExpression.prototype.get_Object, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Object", System.Linq.Expressions.MethodCallExpression.prototype.set_Object, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.MethodCallExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.MethodCallExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.MethodCallExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.MethodCallExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Object = function() {return this.$Object$k__BackingField;};
    $p.set_Object = function(value) {this.$Object$k__BackingField = value;return value;};
    $p.get_Method = function() {return this.$Method$k__BackingField;};
    $p.set_Method = function(value) {this.$Method$k__BackingField = value;return value;};
    $p.get_Arguments = function() {return this.$Arguments$k__BackingField;};
    $p.set_Arguments = function(value) {this.$Arguments$k__BackingField = value;return value;};
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = $p.get_Arguments;
    $p.$ctor = function(obj, method, args) {
        this.$Object$k__BackingField = null;
        this.$Method$k__BackingField = null;
        this.$Arguments$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Call);
        this.set_Object(obj);
        this.set_Method(method);
        this.set_Arguments(System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(obj, method, args) {
        return new $p.$ctor.$type(
            this, 
            obj, 
            method, 
            args
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitMethodCall(this);
    };
    $p.get_Type = function() {
        return this.get_Method().get_ReturnType();
    };
}).call(null, System.Linq.Expressions.MethodCallExpression, System.Linq.Expressions.MethodCallExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.MethodCallExpression);
System.Linq.Expressions.NewArrayExpression = $define("System.Linq.Expressions.NewArrayExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.NewArrayExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.NewArrayExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NewArrayExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.NewArrayExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.NewArrayExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Expressions$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.set_Expressions, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.NewArrayExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewArrayExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.NewArrayExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expressions", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.NewArrayExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("expressions", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Expressions", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expressions", System.Linq.Expressions.NewArrayExpression.prototype.set_Expressions, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewArrayExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Expressions = function() {return this.$Expressions$k__BackingField;};
    $p.set_Expressions = function(value) {this.$Expressions$k__BackingField = value;return value;};
    $p.$ctor = function(nodeType, type, expressions) {
        this.type = null;
        this.$Expressions$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.type = type;
        this.set_Expressions(expressions);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType, type, expressions) {
        return new $p.$ctor.$type(
            this, 
            nodeType, 
            type, 
            expressions
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitNewArray(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
    $p.Update = function(expressions) {
        return this;
    };
}).call(null, System.Linq.Expressions.NewArrayExpression, System.Linq.Expressions.NewArrayExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.NewArrayExpression);
System.Linq.Expressions.NewExpression = $define("System.Linq.Expressions.NewExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.NewExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.NewExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NewExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.NewExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.NewExpression, System.Linq.Expressions.Expression, $arrayinit([System.Linq.Expressions.IArgumentProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Arguments$k__BackingField", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Constructor$k__BackingField", System.Reflection.ConstructorInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.NewExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.NewExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Constructor", System.Linq.Expressions.NewExpression.prototype.get_Constructor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Constructor", System.Linq.Expressions.NewExpression.prototype.set_Constructor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.NewExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.NewExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.NewExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("constructor", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", System.Collections.Generic.IEnumerable$1$(System.Linq.Expressions.Expression), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Arguments", System.Collections.Generic.List$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Arguments", System.Linq.Expressions.NewExpression.prototype.get_Arguments, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.List$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Arguments", System.Linq.Expressions.NewExpression.prototype.set_Arguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Collections.Generic.List$1$(System.Linq.Expressions.Expression), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Constructor", System.Reflection.ConstructorInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Constructor", System.Linq.Expressions.NewExpression.prototype.get_Constructor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Constructor", System.Linq.Expressions.NewExpression.prototype.set_Constructor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.ConstructorInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.NewExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Arguments = function() {return this.$Arguments$k__BackingField;};
    $p.set_Arguments = function(value) {this.$Arguments$k__BackingField = value;return value;};
    $p.System$Linq$Expressions$IArgumentProvider$get_Arguments = $p.get_Arguments;
    $p.get_Constructor = function() {return this.$Constructor$k__BackingField;};
    $p.set_Constructor = function(value) {this.$Constructor$k__BackingField = value;return value;};
    $p.$ctor = function(constructor, args) {
        this.$Arguments$k__BackingField = null;
        this.$Constructor$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().New);
        this.set_Constructor(constructor);
        this.set_Arguments(System.Linq.Enumerable.ToList(System.Linq.Expressions.Expression, args));
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(constructor, args) {
        return new $p.$ctor.$type(this, constructor, args);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitNew(this);
    };
    $p.get_Type = function() {
        return this.get_Constructor().get_DeclaringType();
    };
    $p.Update = function(args) {
        return this;
    };
}).call(null, System.Linq.Expressions.NewExpression, System.Linq.Expressions.NewExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.NewExpression);
System.Linq.Expressions.ParameterExpression = $define("System.Linq.Expressions.ParameterExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.ParameterExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.ParameterExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.ParameterExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$ParameterType$k__BackingField", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.get_ParameterType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.set_ParameterType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.ParameterExpression.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Linq.Expressions.ParameterExpression.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.ParameterExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ParameterExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.ParameterExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("ParameterType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.get_ParameterType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_ParameterType", System.Linq.Expressions.ParameterExpression.prototype.set_ParameterType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Linq.Expressions.ParameterExpression.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Linq.Expressions.ParameterExpression.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.ParameterExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_ParameterType = function() {return this.$ParameterType$k__BackingField;};
    $p.set_ParameterType = function(value) {this.$ParameterType$k__BackingField = value;return value;};
    $p.get_Name = function() {return this.$Name$k__BackingField;};
    $p.set_Name = function(value) {this.$Name$k__BackingField = value;return value;};
    $p.$ctor = function(parameterType, name) {
        this.$ParameterType$k__BackingField = null;
        this.$Name$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, System.Linq.Expressions.ExpressionType().Parameter);
        this.set_ParameterType(parameterType);
        this.set_Name(name);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(parameterType, name) {
        return new $p.$ctor.$type(this, parameterType, name);
    };
    $p.Accept = function(visitor) {
        return visitor.VisitParameter(this);
    };
    $p.get_Type = function() {
        return this.get_ParameterType();
    };
}).call(null, System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.ParameterExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.ParameterExpression);
System.Linq.Expressions.PropertyExpression = $define("System.Linq.Expressions.PropertyExpression", System.Linq.Expressions.MemberExpression);
(System.Linq.Expressions.PropertyExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.MemberExpression;
    $p.$typeName = "System.Linq.Expressions.PropertyExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.PropertyExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.PropertyExpression, System.Linq.Expressions.MemberExpression, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.PropertyExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.PropertyExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("member", System.Reflection.PropertyInfo, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.PropertyExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.MemberExpression.$StaticInitializer();
    };
    $p.$ctor = function(expression, member) {
        System.Linq.Expressions.MemberExpression.prototype.$ctor.call(this, expression, member);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, member) {
        return new $p.$ctor.$type(this, expression, member);
    };
    $p.get_Type = function() {
        return ($cast(System.Reflection.MemberInfo, this.get_Member())).get_PropertyType();
    };
}).call(null, System.Linq.Expressions.PropertyExpression, System.Linq.Expressions.PropertyExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.PropertyExpression);
System.Linq.Expressions.TypeBinaryExpression = $define("System.Linq.Expressions.TypeBinaryExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.TypeBinaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.TypeBinaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("TypeBinaryExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.TypeBinaryExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.TypeBinaryExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Expression$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typeOperand", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.TypeBinaryExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TypeOperand", System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.TypeBinaryExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.TypeBinaryExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeOperand", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeKind", System.Linq.Expressions.ExpressionType, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Expression", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Expression", System.Linq.Expressions.TypeBinaryExpression.prototype.set_Expression, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TypeOperand", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TypeOperand", System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Expression = function() {return this.$Expression$k__BackingField;};
    $p.set_Expression = function(value) {this.$Expression$k__BackingField = value;return value;};
    $p.$ctor = function(expression, typeOperand, nodeKind) {
        this.typeOperand = null;
        this.$Expression$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeKind);
        this.set_Expression(expression);
        this.typeOperand = typeOperand;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression, typeOperand, nodeKind) {
        return new $p.$ctor.$type(
            this, 
            expression, 
            typeOperand, 
            nodeKind
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitTypeBinary(this);
    };
    $p.get_TypeOperand = function() {
        return this.typeOperand;
    };
    $p.get_Type = function() {
        switch (this.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().TypeAs:
                return this.get_TypeOperand();
            case System.Linq.Expressions.ExpressionType().TypeIs:
                return System.Boolean.$GetType();
            default:
                throw System.Exception.prototype.$ctor$1.$new("Unexpected NodeType: " + $safeToString(this.get_NodeType())).InternalInit(new Error());
        }
    };
    $p.Update = function(expression) {
        return this;
    };
}).call(null, System.Linq.Expressions.TypeBinaryExpression, System.Linq.Expressions.TypeBinaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.TypeBinaryExpression);
System.Linq.Expressions.UnaryExpression = $define("System.Linq.Expressions.UnaryExpression", System.Linq.Expressions.Expression);
(System.Linq.Expressions.UnaryExpression.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.Expression;
    $p.$typeName = "System.Linq.Expressions.UnaryExpression";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UnaryExpression", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Expressions.UnaryExpression", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Expressions.UnaryExpression, System.Linq.Expressions.Expression, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Operand$k__BackingField", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Method$k__BackingField", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("type", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Operand", System.Linq.Expressions.UnaryExpression.prototype.get_Operand, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Operand", System.Linq.Expressions.UnaryExpression.prototype.set_Operand, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.UnaryExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.UnaryExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Accept", System.Linq.Expressions.UnaryExpression.prototype.Accept, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visitor", System.Linq.Expressions.ExpressionVisitor, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.UnaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Update", System.Linq.Expressions.UnaryExpression.prototype.Update, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.UnaryExpression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Expressions.UnaryExpression.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nodeType", System.Linq.Expressions.ExpressionType, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("operand", System.Linq.Expressions.Expression, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("method", System.Reflection.MethodInfo, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Operand", System.Linq.Expressions.Expression, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Operand", System.Linq.Expressions.UnaryExpression.prototype.get_Operand, $arrayinit([], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Operand", System.Linq.Expressions.UnaryExpression.prototype.set_Operand, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Method", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Method", System.Linq.Expressions.UnaryExpression.prototype.get_Method, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Method", System.Linq.Expressions.UnaryExpression.prototype.set_Method, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Reflection.MethodInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Type", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Type", System.Linq.Expressions.UnaryExpression.prototype.get_Type, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.Expression.$StaticInitializer();
    };
    $p.get_Operand = function() {return this.$Operand$k__BackingField;};
    $p.set_Operand = function(value) {this.$Operand$k__BackingField = value;return value;};
    $p.get_Method = function() {return this.$Method$k__BackingField;};
    $p.set_Method = function(value) {this.$Method$k__BackingField = value;return value;};
    $p.$ctor = function(nodeType, operand, method, type) {
        this.type = null;
        this.$Operand$k__BackingField = null;
        this.$Method$k__BackingField = null;
        System.Linq.Expressions.Expression.prototype.$ctor.call(this, nodeType);
        this.set_Operand(operand);
        this.set_Method(method);
        this.type = type;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(nodeType, operand, method, type) {
        return new $p.$ctor.$type(
            this, 
            nodeType, 
            operand, 
            method, 
            type
        );
    };
    $p.Accept = function(visitor) {
        return visitor.VisitUnary(this);
    };
    $p.get_Type = function() {
        return this.type;
    };
    $p.Update = function(operand) {
        return this;
    };
}).call(null, System.Linq.Expressions.UnaryExpression, System.Linq.Expressions.UnaryExpression.prototype);
$mscorlib$AssemblyTypes.push(System.Linq.Expressions.UnaryExpression);
System.Linq.Grouping$2 = $define("System.Linq.Grouping<TKey, TElement>", System.Object);
(System.Linq.Grouping$2.$TypeInitializer = function($t, $p, TKey, TElement) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Grouping`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Grouping", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Grouping`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Grouping$2, System.Object, $arrayinit([System.Linq.IGrouping$2, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("key", TKey, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("elements", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Linq.Grouping$2.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Grouping$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Linq.Grouping$2.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Grouping$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elements", System.Collections.Generic.IEnumerable$1$(TElement), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Linq.Grouping$2.prototype.get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.Grouping$2, arguments)();
    };
    window.System.Linq.Grouping$2$ = $t.$;
    $p.$ctor = function(key, elements) {
        this.key = $default(TKey);
        this.elements = null;
        System.Object.prototype.$ctor.call(this);
        this.key = key;
        this.elements = elements;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(key, elements) {
        return new $p.$ctor.$type(this, key, elements);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        return this.elements.System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_Key = function() {
        return this.key;
    };
    $p.System$Linq$IGrouping$2$get_Key = $p.get_Key;
}).call(
    null, 
    System.Linq.Grouping$2, 
    System.Linq.Grouping$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TElement", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.Grouping$2);
System.Linq.IGrouping$2 = $define("System.Linq.IGrouping<TKey, TElement>", System.Object);
(System.Linq.IGrouping$2.$TypeInitializer = function($t, $p, TKey, TElement) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.IGrouping`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IGrouping", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.IGrouping`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.IGrouping$2, null, $arrayinit([System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Linq.IGrouping$2.prototype.System$Linq$IGrouping$2$get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Key", TKey, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Key", System.Linq.IGrouping$2.prototype.System$Linq$IGrouping$2$get_Key, $arrayinit([], System.Reflection.ParameterInfo), TKey, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.IGrouping$2, arguments)();
    };
    window.System.Linq.IGrouping$2$ = $t.$;
    $p.System$Linq$IGrouping$2$get_Key = function() {};
}).call(
    null, 
    System.Linq.IGrouping$2, 
    System.Linq.IGrouping$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TElement", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.IGrouping$2);
System.Linq.ILookup$2 = $define("System.Linq.ILookup<TKey, TElement>", System.Object);
(System.Linq.ILookup$2.$TypeInitializer = function($t, $p, TKey, TElement) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.ILookup`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ILookup", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.ILookup`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.ILookup$2, null, $arrayinit([System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Linq.ILookup$2.prototype.System$Linq$ILookup$2$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Linq.ILookup$2.prototype.System$Linq$ILookup$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Linq.ILookup$2.prototype.System$Linq$ILookup$2$Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Linq.ILookup$2.prototype.System$Linq$ILookup$2$get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Linq.ILookup$2.prototype.System$Linq$ILookup$2$get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.ILookup$2, arguments)();
    };
    window.System.Linq.ILookup$2$ = $t.$;
    $p.System$Linq$ILookup$2$get_Count = function() {};
    $p.System$Linq$ILookup$2$get_Item = function(key) {};
    $p.System$Linq$ILookup$2$Contains = function(key) {};
}).call(
    null, 
    System.Linq.ILookup$2, 
    System.Linq.ILookup$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TElement", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.ILookup$2);
System.Linq.IOrderedEnumerable$1 = $define("System.Linq.IOrderedEnumerable<TElement>", System.Object);
(System.Linq.IOrderedEnumerable$1.$TypeInitializer = function($t, $p, TElement) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.IOrderedEnumerable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IOrderedEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.IOrderedEnumerable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Linq.IOrderedEnumerable$1, null, $arrayinit([System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([(function() {var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("CreateOrderedEnumerable", System.Linq.IOrderedEnumerable$1.prototype.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(TElement, TKey), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("descending", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.IOrderedEnumerable$1, arguments)();
    };
    window.System.Linq.IOrderedEnumerable$1$ = $t.$;
    $p.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable = function(TKey, keySelector, comparer, descending) {};
}).call(
    null, 
    System.Linq.IOrderedEnumerable$1, 
    System.Linq.IOrderedEnumerable$1.prototype, 
    $definetypeparameter("TElement", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.IOrderedEnumerable$1);
System.Linq.Lookup$2 = $define("System.Linq.Lookup<TKey, TElement>", System.Object);
(System.Linq.Lookup$2.$TypeInitializer = function($t, $p, TKey, TElement) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.Lookup`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Lookup", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.Lookup`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.Lookup$2, System.Object, $arrayinit([System.Linq.ILookup$2, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("dictionary", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Linq.Lookup$2.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.Lookup$2.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Linq.Lookup$2.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Linq.Lookup$2.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", System.Linq.Lookup$2.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.Lookup$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("elements", System.Collections.Generic.IEnumerable$1$(System.Linq.IGrouping$2$(TKey, TElement)), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Count", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Count", System.Linq.Lookup$2.prototype.get_Count, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Collections.Generic.IEnumerable$1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Linq.Lookup$2.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("key", TKey, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.Lookup$2, arguments)();
    };
    window.System.Linq.Lookup$2$ = $t.$;
    $p.$ctor = function(elements) {
        this.dictionary = System.Collections.Generic.Dictionary$2$(TKey, System.Linq.IGrouping$2$(TKey, TElement)).prototype.$ctor.$new();
        System.Object.prototype.$ctor.call(this);
        {
            var $anon$1iterator = elements;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                this.dictionary.set_Item(item.System$Linq$IGrouping$2$get_Key(), item);
            }
        }
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(elements) {
        return new $p.$ctor.$type(this, elements);
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        return this.dictionary.get_Values().System$Collections$Generic$IEnumerable$1$GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.get_Count = function() {
        return this.dictionary.get_Count();
    };
    $p.System$Linq$ILookup$2$get_Count = $p.get_Count;
    $p.get_Item = function(key) {
        return this.dictionary.get_Item(key);
    };
    $p.System$Linq$ILookup$2$get_Item = $p.get_Item;
    $p.Contains = function(key) {
        return this.dictionary.ContainsKey(key);
    };
    $p.System$Linq$ILookup$2$Contains = $p.Contains;
}).call(
    null, 
    System.Linq.Lookup$2, 
    System.Linq.Lookup$2.prototype, 
    $definetypeparameter("TKey", System.Object), 
    $definetypeparameter("TElement", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.Lookup$2);
System.Linq.OrderedEnumerable$1 = $define("System.Linq.OrderedEnumerable<T>", System.Object);
(System.Linq.OrderedEnumerable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Linq.OrderedEnumerable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("OrderedEnumerable", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.OrderedEnumerable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.OrderedEnumerable$1, System.Object, $arrayinit([System.Linq.IOrderedEnumerable$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("comparers", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("storage", System.Collections.Generic.List$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([(function() {var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Linq.OrderedEnumerable$1.prototype.Create, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(T, TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isDescending", System.Boolean, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.OrderedEnumerable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", System.Linq.OrderedEnumerable$1.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", System.Linq.OrderedEnumerable$1.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), (function() {var TKey = $definetypeparameter("TKey", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("CreateOrderedEnumerable", System.Linq.OrderedEnumerable$1.prototype.CreateOrderedEnumerable, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(T, TKey), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("descending", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.IOrderedEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.OrderedEnumerable$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("source", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparers", $array(System.Collections.IComparer), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Linq.OrderedEnumerable$1, arguments)();
    };
    window.System.Linq.OrderedEnumerable$1$ = $t.$;
    $p.$ctor = function(source, comparers) {
        this.comparers = null;
        this.source = null;
        this.storage = null;
        System.Object.prototype.$ctor.call(this);
        this.source = source;
        this.comparers = System.Linq.Enumerable.ToList(System.Collections.IComparer, comparers);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(source, comparers) {
        return new $p.$ctor.$type(this, source, comparers);
    };
    $t.Create = function(TKey, source, keySelector, comparer, isDescending) {
        return System.Linq.OrderedEnumerable$1$(T).prototype.$ctor.$new(source, $arrayinit([System.Linq.OrderedEnumerable$1$(T).KeyComparer$2$(T, TKey).prototype.$ctor.$new(keySelector, comparer, isDescending)], System.Collections.IComparer));
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        if (this.storage == null) {
            this.storage = System.Linq.Enumerable.ToList(T, this.source);
            this.storage.Sort$1($delegate(this, System.Collections.Generic.Comparison$1$(T), function(x, y) {
                {
                    var $anon$3iterator = this.comparers;
                    var $anon$4enumerator = $anon$3iterator.System$Collections$IEnumerable$GetEnumerator();
                    while ($anon$4enumerator.System$Collections$IEnumerator$MoveNext()) {
                        var comparer = $anon$4enumerator.System$Collections$IEnumerator$get_Current();
                        var result = comparer.System$Collections$IComparer$Compare(x, y);
                        if (result != 0)
                            return result;
                    }
                }
                return 0;
            }));
        }
        return this.storage.GetEnumerator();
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.CreateOrderedEnumerable = function(TKey, keySelector, comparer, descending) {
        return System.Linq.OrderedEnumerable$1$(T).prototype.$ctor.$new(this.source, System.Linq.Enumerable.ToArray(System.Collections.IComparer, System.Linq.Enumerable.Concat(System.Collections.IComparer, this.comparers, $arrayinit([System.Linq.OrderedEnumerable$1$(T).KeyComparer$2$(T, TKey).prototype.$ctor.$new(keySelector, comparer, descending)], System.Collections.IComparer))));
    };
    $p.System$Linq$IOrderedEnumerable$1$CreateOrderedEnumerable = $p.CreateOrderedEnumerable;
    $t.KeyComparer$2 = $define("System.Linq.OrderedEnumerable<T>.KeyComparer<T, TKey>", System.Object);
    ($t.KeyComparer$2.$TypeInitializer = function($t, $p, T, TKey) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.Object;
        $p.$typeName = "System.Linq.OrderedEnumerable`1.KeyComparer`2";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("KeyComparer", $arrayinit([], System.Attribute));this.$type.Init("System.Linq.OrderedEnumerable`1.KeyComparer`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Linq.OrderedEnumerable$1.KeyComparer$2, System.Object, $arrayinit([System.Collections.IComparer], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("keySelector", System.Func$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isDescending", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.Linq.OrderedEnumerable$1.KeyComparer$2.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Linq.OrderedEnumerable$1.KeyComparer$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("keySelector", System.Func$2$(T, TKey), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.Generic.IComparer$1$(TKey), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isDescending", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.Object.$StaticInitializer();
        };
        $t.$ = function() {
            return $generic.call(this, this.KeyComparer$2, arguments)();
        };
        this.KeyComparer$2$ = $t.$;
        $p.$ctor = function(keySelector, comparer, isDescending) {
            this.keySelector = null;
            this.comparer = null;
            this.isDescending = false;
            System.Object.prototype.$ctor.call(this);
            this.keySelector = keySelector;
            this.comparer = comparer;
            this.isDescending = isDescending;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function(keySelector, comparer, isDescending) {
            return new $p.$ctor.$type(
                this, 
                keySelector, 
                comparer, 
                isDescending
            );
        };
        $p.Compare = function(x, y) {
            var xKey = this.keySelector($cast(System.Object, x));
            var yKey = this.keySelector($cast(System.Object, y));
            var result = this.comparer.System$Collections$Generic$IComparer$1$Compare(xKey, yKey);
            if (this.isDescending)
                result = -result;
            return result;
        };
        $p.System$Collections$IComparer$Compare = $p.Compare;
    }).call(
        $t, 
        $t.KeyComparer$2, 
        $t.KeyComparer$2.prototype, 
        $definetypeparameter("T", System.Object), 
        $definetypeparameter("TKey", System.Object)
    );
    $mscorlib$AssemblyTypes.push($t.KeyComparer$2);
}).call(
    null, 
    System.Linq.OrderedEnumerable$1, 
    System.Linq.OrderedEnumerable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Linq.OrderedEnumerable$1);
System.Math = $define("System.Math", System.Object);
(System.Math.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Math";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Math", $arrayinit([], System.Attribute));this.$type.Init("System.Math", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Math, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("PI", System.Double, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3.14159265358979, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("E", System.Double, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2.71828182845905, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Acos", System.Math.prototype.Acos, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Asin", System.Math.prototype.Asin, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Atan", System.Math.prototype.Atan, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Atan2", System.Math.prototype.Atan2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("y", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("x", System.Double, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Ceiling", System.Math.prototype.Ceiling, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Ceiling", System.Math.prototype.Ceiling$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Cos", System.Math.prototype.Cos, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Cosh", System.Math.prototype.Cosh, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Floor", System.Math.prototype.Floor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Floor", System.Math.prototype.Floor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sin", System.Math.prototype.Sin, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Tan", System.Math.prototype.Tan, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Sinh", System.Math.prototype.Sinh, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Tanh", System.Math.prototype.Tanh, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Round", System.Math.prototype.Round, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("a", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Round", System.Math.prototype.Round$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("digits", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Abs", System.Math.prototype.Abs$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Single, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Abs", System.Math.prototype.Abs, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Round", System.Math.prototype.Round$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("digits", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("mode", System.MidpointRounding, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.SByte, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.SByte, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.SByte, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Byte, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Byte, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Byte, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int16, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int16, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$10, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt16, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt16, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$8, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int64, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$9, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt64, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Single, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Single, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Double, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Max", System.Math.prototype.Max$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Decimal, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.SByte, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.SByte, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.SByte, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Byte, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Byte, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Byte, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int16, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int16, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$10, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt16, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt16, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt16, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$8, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Int64, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Int64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$9, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.UInt64, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.UInt64, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.UInt64, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Single, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Single, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Double, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Double, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Min", System.Math.prototype.Min$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("val1", System.Decimal, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("val2", System.Decimal, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Decimal, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Math.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.PI = 3.14159265358979;
        $t.E = 2.71828182845905;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Acos = function(d) {
        return Math.acos(d);
    };
    $t.Asin = function(d) {
        return Math.asin(d);
    };
    $t.Atan = function(d) {
        return Math.atan(d);
    };
    $t.Atan2 = function(y, x) {
        return Math.atan2(y, x);
    };
    $t.Ceiling = function(d) {
        return Math.ceil(d);
    };
    $t.Ceiling$1 = function(a) {
        return Math.ceil(a);
    };
    $t.Cos = function(d) {
        return Math.cos(d);
    };
    $t.Cosh = function(value) {
        return Math.cosh(value);
    };
    $t.Floor = function(d) {
        return Math.floor(d);
    };
    $t.Floor$1 = function(d) {
        return Math.floor(d);
    };
    $t.Sin = function(a) {
        return Math.sin(a);
    };
    $t.Tan = function(a) {
        return Math.tan(a);
    };
    $t.Sinh = function(value) {
        return Math.sinh(value);
    };
    $t.Tanh = function(value) {
        return Math.tanh(value);
    };
    $t.Round = function(a) {
        return Math.round(a);
    };
    $t.Round$1 = function(value, digits) {
        if (digits < 0 || digits > 15)
            throw System.ArgumentOutOfRangeException.prototype.$ctor$1.$new("Value is too small or too big.").InternalInit(new Error());
        if (digits == 0)
            return System.Math.Round(value);
        return System.Math.Round$2(value, digits, System.MidpointRounding().ToEven);
    };
    $t.Abs$1 = function(value) {
        return Math.abs(value);
    };
    $t.Abs = function(value) {
        return Math.abs(value);
    };
    $t.Round$2 = function(value, digits, mode) {
        var s = value.ToString();
        var isNegative = value < 0;
        if (isNegative)
            s = String.prototype.Substring.call(s, 1, 0);
        var decimalIndex = s.indexOf(".");
        if (decimalIndex == -1)
            return value;
        var integerPart = String.prototype.Substring.call(s, 0, decimalIndex);
        var intValue = System.Int32.Parse(integerPart);
        var firstDecimalDigit = System.Int32.Parse(s.get_Chars(decimalIndex + 1).ToString());
        if (digits == 0 && firstDecimalDigit == 5) {
            switch (mode) {
                case System.MidpointRounding().AwayFromZero:
                    intValue++;
                    break;
                case System.MidpointRounding().ToEven:
                    if (intValue % 2 == 1)
                        intValue++;
                    break;
            }
            if (isNegative)
                intValue = -intValue;
            return intValue;
        }
        else {
            var decimalPart = System.Collections.Generic.Stack$1$(System.Int32).prototype.$ctor.$new();
            var digit = digits;
            var carry = 0;
            for (var i = System.Math.Min$4(decimalIndex + digits, s.length - 1); i > decimalIndex && digit >= 1; i--, digit--) {
                var digitValue = System.Int32.Parse(s.get_Chars(i).ToString()) + carry;
                if (i < s.length - 1) {
                    var nextDigit = s.get_Chars(i + 1);
                    var nextDigitValue = System.Int32.Parse(nextDigit.ToString());
                    if (digit == digits && nextDigitValue == 5) {
                        switch (mode) {
                            case System.MidpointRounding().AwayFromZero:
                                digitValue++;
                                break;
                            case System.MidpointRounding().ToEven:
                                if (digitValue % 2 == 1) {
                                    digitValue++;
                                }
                                break;
                        }
                    }
                    else
                        if (digit == digits && nextDigitValue > 5)
                            digitValue++;
                }
                if (digitValue == 10) {
                    digitValue = 0;
                    carry = 1;
                }
                else {
                    carry = 0;
                }
                if (decimalPart.get_Count() > 0 || digitValue != 0)
                    decimalPart.Push(digitValue);
            }
            if (carry > 0)
                intValue++;
            var newString = $safeToString(intValue) + "." + System.Linq.Enumerable.ToArray(System.Int32, decimalPart).join("");
            if (isNegative)
                newString = "-" + newString;
            return System.Double.Parse(newString);
        }
    };
    $t.Max$6 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$7 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$10 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$4 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$8 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$5 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$9 = function(val1, val2) {
        if (val1 < val2)
            return val2;
        else
            return val1;
    };
    $t.Max$3 = function(val1, val2) {
        if (val1 > val2 || System.Single.IsNaN(val1))
            return val1;
        else
            return val2;
    };
    $t.Max$2 = function(val1, val2) {
        if (val1 > val2 || System.Double.IsNaN(val1))
            return val1;
        else
            return val2;
    };
    $t.Max$1 = function(val1, val2) {
        if (val1 > val2)
            return val1;
        else
            return val2;
    };
    $t.Min$6 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$7 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$10 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$4 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$8 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$5 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$9 = function(val1, val2) {
        if (val1 > val2)
            return val2;
        else
            return val1;
    };
    $t.Min$3 = function(val1, val2) {
        if (val1 < val2 || System.Single.IsNaN(val1))
            return val1;
        else
            return val2;
    };
    $t.Min$2 = function(val1, val2) {
        if (val1 < val2 || System.Double.IsNaN(val1))
            return val1;
        else
            return val2;
    };
    $t.Min$1 = function(val1, val2) {
        return Math.min(val1, val2);
    };
}).call(null, System.Math, System.Math.prototype);
$mscorlib$AssemblyTypes.push(System.Math);
System.NotImplementedException = $define("System.NotImplementedException", System.Exception);
(System.NotImplementedException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.NotImplementedException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NotImplementedException", $arrayinit([], System.Attribute));this.$type.Init("System.NotImplementedException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.NotImplementedException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.NotImplementedException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.NotImplementedException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.NotImplementedException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.NotImplementedException, System.NotImplementedException.prototype);
$mscorlib$AssemblyTypes.push(System.NotImplementedException);
System.NotSupportedException = $define("System.NotSupportedException", System.Exception);
(System.NotSupportedException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.NotSupportedException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("NotSupportedException", $arrayinit([], System.Attribute));this.$type.Init("System.NotSupportedException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.NotSupportedException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.NotSupportedException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.NotSupportedException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.NotSupportedException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.NotSupportedException, System.NotSupportedException.prototype);
$mscorlib$AssemblyTypes.push(System.NotSupportedException);
System.Nullable$1 = $define("System.Nullable<T>", System.ValueType);
(System.Nullable$1.$TypeInitializer = function($t, $p, T) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Nullable`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Nullable", $arrayinit([], System.Attribute));this.$type.Init("System.Nullable`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Nullable$1, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasValue", System.Nullable$1.prototype.get_HasValue, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Nullable$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValueOrDefault", System.Nullable$1.prototype.GetValueOrDefault, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Nullable$1.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Nullable$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Explicit", System.Nullable$1.prototype.op_Explicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Nullable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Nullable$1.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Nullable$1.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("HasValue", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasValue", System.Nullable$1.prototype.get_HasValue, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", T, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Nullable$1.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), T, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Nullable$1, arguments)();
    };
    window.System.Nullable$1$ = $t.$;
    $p.get_HasValue = function() {
        return false;
    };
    $p.get_Value = function() {
        return $default(T);
    };
    $p.$ctor$1 = function(value) {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(value) {
        return new $p.$ctor$1.$type(this, value);
    };
    $p.GetValueOrDefault = function() {
        return $default(T);
    };
    $t.op_Implicit = function(value) {
        return null;
    };
    $t.op_Explicit = function(value) {
        return $default(T);
    };
}).call(
    null, 
    System.Nullable$1, 
    System.Nullable$1.prototype, 
    $definetypeparameter("T", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Nullable$1);
System.ObjectDisposedException = $define("System.ObjectDisposedException", System.Exception);
(System.ObjectDisposedException.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Exception;
    $p.$typeName = "System.ObjectDisposedException";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ObjectDisposedException", $arrayinit([], System.Attribute));this.$type.Init("System.ObjectDisposedException", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.ObjectDisposedException, System.Exception, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.ObjectDisposedException.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.ObjectDisposedException.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.ObjectDisposedException.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("message", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("innerException", System.Exception, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Exception.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Exception.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(message) {
        System.Exception.prototype.$ctor$1.call(this, message);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(message) {
        return new $p.$ctor$1.$type(this, message);
    };
    $p.$ctor$2 = function(message, innerException) {
        System.Exception.prototype.$ctor$2.call(this, message, innerException);
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(message, innerException) {
        return new $p.$ctor$2.$type(this, message, innerException);
    };
}).call(null, System.ObjectDisposedException, System.ObjectDisposedException.prototype);
$mscorlib$AssemblyTypes.push(System.ObjectDisposedException);
System.Random = $define("System.Random", System.Object);
(System.Random.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Random";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Random", $arrayinit([], System.Attribute));this.$type.Init("System.Random", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Random, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Random.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Random, System.Random.prototype);
$mscorlib$AssemblyTypes.push(System.Random);
System.Activator = $define("System.Activator", System.Object);
(System.Activator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Activator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Activator", $arrayinit([], System.Attribute));this.$type.Init("System.Activator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Activator, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("LookupMask", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Assembly.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 255, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ConLookup", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Assembly.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 20, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ConstructorDefault", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Assembly.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 532, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", $array(System.Object), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", $array(System.Object), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Activator.prototype.CreateInstance$6, $arrayinit([], System.Reflection.ParameterInfo), T, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("GetObject", System.Activator.prototype.GetObject, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("url", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetObject", System.Activator.prototype.GetObject$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("url", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("state", System.Object, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Activator.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.LookupMask = 255;
        $t.ConLookup = System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue());
        $t.ConstructorDefault = System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().CreateInstance.GetValue());
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.CreateInstance$4 = function(type, bindingAttr, binder, args, culture) {
        return System.Activator.CreateInstance$5(
            type, 
            bindingAttr, 
            binder, 
            args, 
            culture, 
            null
        );
    };
    $t.CreateInstance$5 = function(type, bindingAttr, binder, args, culture, activationAttributes) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.CreateInstance$2 = function(type, args) {
        return System.Activator.CreateInstance$5(
            type, 
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().CreateInstance.GetValue()), 
            null, 
            args, 
            null, 
            null
        );
    };
    $t.CreateInstance$3 = function(type, args, activationAttributes) {
        return System.Activator.CreateInstance$5(
            type, 
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()).GetValue() | System.Reflection.BindingFlags().CreateInstance.GetValue()), 
            null, 
            args, 
            null, 
            activationAttributes
        );
    };
    $t.CreateInstance = function(type) {
        return System.Activator.CreateInstance$1(type, false);
    };
    $t.CreateInstance$1 = function(type, nonPublic) {
        return System.Linq.Enumerable.Single(System.Reflection.ConstructorInfo, System.Linq.Enumerable.Where(System.Reflection.ConstructorInfo, type.GetConstructors(), $delegate(this, System.Func$2$(System.Reflection.ConstructorInfo, System.Boolean), function(x) {
            return x.GetParameters().length == 0;
        }))).Invoke$2($arrayinit(new Array(0), System.Object));
    };
    $t.CreateInstance$6 = function(T) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetObject = function(type, url) {
        return System.Activator.GetObject$1(type, url, null);
    };
    $t.GetObject$1 = function(type, url, state) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
}).call(null, System.Activator, System.Activator.prototype);
$mscorlib$AssemblyTypes.push(System.Activator);
System.Reflection.Assembly = $define("System.Reflection.Assembly", System.Object);
(System.Reflection.Assembly.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.Assembly";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Assembly", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.Assembly", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.Assembly, System.Object, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("fullName", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typeFunctions", $array(Function), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("types", $array(System.Type), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typesByName", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typesByNameUpper", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.Assembly.prototype.get_CodeBase, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.Assembly.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_EntryPoint", System.Reflection.Assembly.prototype.get_EntryPoint, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Location", System.Reflection.Assembly.prototype.get_Location, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateQualifiedName", System.Reflection.Assembly.prototype.CreateQualifiedName, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("assemblyName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAssembly", System.Reflection.Assembly.prototype.GetAssembly, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetExecutingAssembly", System.Reflection.Assembly.prototype.GetExecutingAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCallingAssembly", System.Reflection.Assembly.prototype.GetCallingAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEntryAssembly", System.Reflection.Assembly.prototype.GetEntryAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetName", System.Reflection.Assembly.prototype.GetName, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.AssemblyName, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetName", System.Reflection.Assembly.prototype.GetName$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("copiedName", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.AssemblyName, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Reflection.Assembly.prototype.GetType$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Reflection.Assembly.prototype.GetType$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("throwOnError", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Reflection.Assembly.prototype.GetType$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("throwOnError", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypes", System.Reflection.Assembly.prototype.GetTypes, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.Assembly.prototype.GetCustomAttributes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.Assembly.prototype.GetCustomAttributes$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.Assembly.prototype.IsDefined, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.Assembly.prototype.CreateInstance, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.Assembly.prototype.CreateInstance$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.Assembly.prototype.CreateInstance$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ignoreCase", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("activationAttributes", $array(System.Object), 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetReferencedAssemblies", System.Reflection.Assembly.prototype.GetReferencedAssemblies, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.AssemblyName), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.Assembly.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.Assembly.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fullName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", Array, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("CodeBase", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.Assembly.prototype.get_CodeBase, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.Assembly.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("EntryPoint", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_EntryPoint", System.Reflection.Assembly.prototype.get_EntryPoint, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Location", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Location", System.Reflection.Assembly.prototype.get_Location, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(fullName, types, attributes) {
        this.fullName = null;
        this.typeFunctions = null;
        this.types = null;
        this.typesByName = System.Collections.Generic.Dictionary$2$(String, Function).prototype.$ctor.$new();
        this.typesByNameUpper = System.Collections.Generic.Dictionary$2$(String, Function).prototype.$ctor.$new();
        this.attributes = null;
        System.Object.prototype.$ctor.call(this);
        this.fullName = fullName;
        this.attributes = attributes;
        this.typeFunctions = $arrayinit(new Array(types.length), Function);
        for (var i = 0; i < types.length; i++) {
            this.typeFunctions[i] = types[i];
            this.typesByName.set_Item(this.typeFunctions[i].$typeName, this.typeFunctions[i]);
            this.typesByNameUpper.set_Item(this.typeFunctions[i].$typeName.toUpperCase(), this.typeFunctions[i]);
        }
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(fullName, types, attributes) {
        return new $p.$ctor.$type(
            this, 
            fullName, 
            types, 
            attributes
        );
    };
    $p.get_CodeBase = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_FullName = function() {
        return this.fullName;
    };
    $p.get_EntryPoint = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_Location = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.CreateQualifiedName = function(assemblyName, typeName) {
        return typeName + ", " + assemblyName;
    };
    $t.GetAssembly = function(type) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetExecutingAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetCallingAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetEntryAssembly = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetName = function() {
        return this.GetName$1(false);
    };
    $p.GetName$1 = function(copiedName) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetType$1 = function(name) {
        return this.GetType$3(name, false, false);
    };
    $p.GetType$2 = function(name, throwOnError) {
        return this.GetType$3(name, throwOnError, false);
    };
    $p.GetType$3 = function(name, throwOnError, ignoreCase) {
        var result;
        if (ignoreCase)
            (function() {
                var $anon$1 = {
                    value: null
                };
                var $result$ = this.typesByNameUpper.TryGetValue(name, $anon$1);
                result = $anon$1.value;
                return $result$;
            }).call(this);
        else
            (function() {
                var $anon$2 = {
                    value: null
                };
                var $result$ = this.typesByName.TryGetValue(name, $anon$2);
                result = $anon$2.value;
                return $result$;
            }).call(this);
        if (result == null && throwOnError)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Type not found: " + name).InternalInit(new Error());
        if (result != null)
            return System.Type._GetTypeFromTypeFunc(result);
        return null;
    };
    $p.GetTypes = function() {
        if (this.types == null) {
            this.types = System.Linq.Enumerable.ToArray(System.Type, System.Linq.Enumerable.Select(
                Function, 
                System.Type, 
                this.typeFunctions, 
                $delegate(this, System.Func$2$(Function, System.Type), function(x) {
                    return System.Type._GetTypeFromTypeFunc(x);
                })
            ));
        }
        return this.types;
    };
    $p.GetCustomAttributes = function(inherit) {
        return System.Linq.Enumerable.ToArray(System.Attribute, this.attributes);
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Where(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        })));
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        return System.Linq.Enumerable.Any$1(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        }));
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
    $p.CreateInstance = function(typeName) {
        return this.CreateInstance$2(
            typeName, 
            false, 
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
            null, 
            null, 
            null, 
            null
        );
    };
    $p.CreateInstance$1 = function(typeName, ignoreCase) {
        return this.CreateInstance$2(
            typeName, 
            ignoreCase, 
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
            null, 
            null, 
            null, 
            null
        );
    };
    $p.CreateInstance$2 = function(typeName, ignoreCase, bindingAttr, binder, args, culture, activationAttributes) {
        var type = this.GetType$3(typeName, false, ignoreCase);
        if (type == null)
            return null;
        else
            return System.Activator.CreateInstance$5(
                type, 
                bindingAttr, 
                binder, 
                args, 
                culture, 
                activationAttributes
            );
    };
    $p.GetReferencedAssemblies = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.ToString = function() {
        return this.get_FullName() || System.Object.prototype.ToString.call(this);
    };
}).call(null, System.Reflection.Assembly, System.Reflection.Assembly.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.Assembly);
System.Reflection.AssemblyCompanyAttribute = $define("System.Reflection.AssemblyCompanyAttribute", System.Attribute);
(System.Reflection.AssemblyCompanyAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyCompanyAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyCompanyAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyCompanyAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyCompanyAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_company", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Company", System.Reflection.AssemblyCompanyAttribute.prototype.get_Company, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyCompanyAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("company", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Company", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Company", System.Reflection.AssemblyCompanyAttribute.prototype.get_Company, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Company = function() {
        return this.m_company;
    };
    $p.$ctor = function(company) {
        this.m_company = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_company = company;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(company) {
        return new $p.$ctor.$type(this, company);
    };
}).call(null, System.Reflection.AssemblyCompanyAttribute, System.Reflection.AssemblyCompanyAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyCompanyAttribute);
System.Reflection.AssemblyConfigurationAttribute = $define("System.Reflection.AssemblyConfigurationAttribute", System.Attribute);
(System.Reflection.AssemblyConfigurationAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyConfigurationAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyConfigurationAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyConfigurationAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyConfigurationAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_configuration", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Configuration", System.Reflection.AssemblyConfigurationAttribute.prototype.get_Configuration, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyConfigurationAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("configuration", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Configuration", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Configuration", System.Reflection.AssemblyConfigurationAttribute.prototype.get_Configuration, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Configuration = function() {
        return this.m_configuration;
    };
    $p.$ctor = function(configuration) {
        this.m_configuration = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_configuration = configuration;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(configuration) {
        return new $p.$ctor.$type(this, configuration);
    };
}).call(null, System.Reflection.AssemblyConfigurationAttribute, System.Reflection.AssemblyConfigurationAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyConfigurationAttribute);
System.Reflection.AssemblyCopyrightAttribute = $define("System.Reflection.AssemblyCopyrightAttribute", System.Attribute);
(System.Reflection.AssemblyCopyrightAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyCopyrightAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyCopyrightAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyCopyrightAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyCopyrightAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_copyright", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Copyright", System.Reflection.AssemblyCopyrightAttribute.prototype.get_Copyright, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyCopyrightAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("copyright", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Copyright", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Copyright", System.Reflection.AssemblyCopyrightAttribute.prototype.get_Copyright, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Copyright = function() {
        return this.m_copyright;
    };
    $p.$ctor = function(copyright) {
        this.m_copyright = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_copyright = copyright;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(copyright) {
        return new $p.$ctor.$type(this, copyright);
    };
}).call(null, System.Reflection.AssemblyCopyrightAttribute, System.Reflection.AssemblyCopyrightAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyCopyrightAttribute);
System.Reflection.AssemblyCultureAttribute = $define("System.Reflection.AssemblyCultureAttribute", System.Attribute);
(System.Reflection.AssemblyCultureAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyCultureAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyCultureAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyCultureAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyCultureAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_culture", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Culture", System.Reflection.AssemblyCultureAttribute.prototype.get_Culture, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyCultureAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Culture", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Culture", System.Reflection.AssemblyCultureAttribute.prototype.get_Culture, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Culture = function() {
        return this.m_culture;
    };
    $p.$ctor = function(culture) {
        this.m_culture = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_culture = culture;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(culture) {
        return new $p.$ctor.$type(this, culture);
    };
}).call(null, System.Reflection.AssemblyCultureAttribute, System.Reflection.AssemblyCultureAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyCultureAttribute);
System.Reflection.AssemblyDescriptionAttribute = $define("System.Reflection.AssemblyDescriptionAttribute", System.Attribute);
(System.Reflection.AssemblyDescriptionAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyDescriptionAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyDescriptionAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyDescriptionAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyDescriptionAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_description", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Description", System.Reflection.AssemblyDescriptionAttribute.prototype.get_Description, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyDescriptionAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("description", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Description", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Description", System.Reflection.AssemblyDescriptionAttribute.prototype.get_Description, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Description = function() {
        return this.m_description;
    };
    $p.$ctor = function(description) {
        this.m_description = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_description = description;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(description) {
        return new $p.$ctor.$type(this, description);
    };
}).call(null, System.Reflection.AssemblyDescriptionAttribute, System.Reflection.AssemblyDescriptionAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyDescriptionAttribute);
System.Reflection.AssemblyFileVersionAttribute = $define("System.Reflection.AssemblyFileVersionAttribute", System.Attribute);
(System.Reflection.AssemblyFileVersionAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyFileVersionAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyFileVersionAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyFileVersionAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyFileVersionAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_version", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Version", System.Reflection.AssemblyFileVersionAttribute.prototype.get_Version, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyFileVersionAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("version", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Version", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Version", System.Reflection.AssemblyFileVersionAttribute.prototype.get_Version, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Version = function() {
        return this._version;
    };
    $p.$ctor = function(version) {
        this._version = null;
        System.Attribute.prototype.$ctor.call(this);
        if (version == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("version").InternalInit(new Error());
        this._version = version;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(version) {
        return new $p.$ctor.$type(this, version);
    };
}).call(null, System.Reflection.AssemblyFileVersionAttribute, System.Reflection.AssemblyFileVersionAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyFileVersionAttribute);
System.Reflection.AssemblyName = $define("System.Reflection.AssemblyName", System.Object);
(System.Reflection.AssemblyName.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.AssemblyName";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyName", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.AssemblyName", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyName, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_CultureInfo", System.Globalization.CultureInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("_CodeBase", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.AssemblyName.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Reflection.AssemblyName.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureInfo", System.Reflection.AssemblyName.prototype.get_CultureInfo, $arrayinit([], System.Reflection.ParameterInfo), System.Globalization.CultureInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CultureInfo", System.Reflection.AssemblyName.prototype.set_CultureInfo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CultureInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureName", System.Reflection.AssemblyName.prototype.get_CultureName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.AssemblyName.prototype.get_CodeBase, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CodeBase", System.Reflection.AssemblyName.prototype.set_CodeBase, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.AssemblyName.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.AssemblyName.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyName.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Reflection.AssemblyName.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("assemblyName", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.AssemblyName.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Reflection.AssemblyName.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CultureInfo", System.Globalization.CultureInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureInfo", System.Reflection.AssemblyName.prototype.get_CultureInfo, $arrayinit([], System.Reflection.ParameterInfo), System.Globalization.CultureInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CultureInfo", System.Reflection.AssemblyName.prototype.set_CultureInfo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Globalization.CultureInfo, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CultureName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CultureName", System.Reflection.AssemblyName.prototype.get_CultureName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CodeBase", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CodeBase", System.Reflection.AssemblyName.prototype.get_CodeBase, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_CodeBase", System.Reflection.AssemblyName.prototype.set_CodeBase, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Reflection.AssemblyName.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.get_Name = function() {return this.$Name$k__BackingField;};
    $p.set_Name = function(value) {this.$Name$k__BackingField = value;return value;};
    $p.get_CultureInfo = function() {
        return this._CultureInfo;
    };
    $p.set_CultureInfo = function(value) {
        this._CultureInfo = value;
        return value;
    };
    $p.get_CultureName = function() {
        if (this._CultureInfo != null)
            return this._CultureInfo.get_Name();
        else
            return null;
    };
    $p.get_CodeBase = function() {
        return this._CodeBase;
    };
    $p.set_CodeBase = function(value) {
        this._CodeBase = value;
        return value;
    };
    $p.get_FullName = function() {
        return this.get_Name();
    };
    $p.$ctor = function() {
        this._CultureInfo = null;
        this._CodeBase = null;
        this.$Name$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(assemblyName) {
        this._CultureInfo = null;
        this._CodeBase = null;
        this.$Name$k__BackingField = null;
        System.Object.prototype.$ctor.call(this);
        this.set_Name(assemblyName);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(assemblyName) {
        return new $p.$ctor$1.$type(this, assemblyName);
    };
    $p.ToString = function() {
        return this.get_FullName() || System.Object.prototype.ToString.call(this);
    };
}).call(null, System.Reflection.AssemblyName, System.Reflection.AssemblyName.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyName);
System.Reflection.AssemblyProductAttribute = $define("System.Reflection.AssemblyProductAttribute", System.Attribute);
(System.Reflection.AssemblyProductAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyProductAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyProductAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyProductAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyProductAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_product", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Product", System.Reflection.AssemblyProductAttribute.prototype.get_Product, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyProductAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("product", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Product", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Product", System.Reflection.AssemblyProductAttribute.prototype.get_Product, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Product = function() {
        return this.m_product;
    };
    $p.$ctor = function(product) {
        this.m_product = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_product = product;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(product) {
        return new $p.$ctor.$type(this, product);
    };
}).call(null, System.Reflection.AssemblyProductAttribute, System.Reflection.AssemblyProductAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyProductAttribute);
System.Reflection.AssemblyTitleAttribute = $define("System.Reflection.AssemblyTitleAttribute", System.Attribute);
(System.Reflection.AssemblyTitleAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyTitleAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyTitleAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyTitleAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyTitleAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_title", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Title", System.Reflection.AssemblyTitleAttribute.prototype.get_Title, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyTitleAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("title", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Title", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Title", System.Reflection.AssemblyTitleAttribute.prototype.get_Title, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Title = function() {
        return this.m_title;
    };
    $p.$ctor = function(title) {
        this.m_title = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_title = title;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(title) {
        return new $p.$ctor.$type(this, title);
    };
}).call(null, System.Reflection.AssemblyTitleAttribute, System.Reflection.AssemblyTitleAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyTitleAttribute);
System.Reflection.AssemblyTrademarkAttribute = $define("System.Reflection.AssemblyTrademarkAttribute", System.Attribute);
(System.Reflection.AssemblyTrademarkAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyTrademarkAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyTrademarkAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyTrademarkAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyTrademarkAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_trademark", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Trademark", System.Reflection.AssemblyTrademarkAttribute.prototype.get_Trademark, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyTrademarkAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("trademark", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Trademark", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Trademark", System.Reflection.AssemblyTrademarkAttribute.prototype.get_Trademark, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Trademark = function() {
        return this.m_trademark;
    };
    $p.$ctor = function(trademark) {
        this.m_trademark = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_trademark = trademark;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(trademark) {
        return new $p.$ctor.$type(this, trademark);
    };
}).call(null, System.Reflection.AssemblyTrademarkAttribute, System.Reflection.AssemblyTrademarkAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyTrademarkAttribute);
System.Reflection.AssemblyVersionAttribute = $define("System.Reflection.AssemblyVersionAttribute", System.Attribute);
(System.Reflection.AssemblyVersionAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Reflection.AssemblyVersionAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("AssemblyVersionAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(1);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Reflection.AssemblyVersionAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.AssemblyVersionAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_version", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Version", System.Reflection.AssemblyVersionAttribute.prototype.get_Version, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.AssemblyVersionAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("version", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Version", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Version", System.Reflection.AssemblyVersionAttribute.prototype.get_Version, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Version = function() {
        return this.m_version;
    };
    $p.$ctor = function(version) {
        this.m_version = null;
        System.Attribute.prototype.$ctor.call(this);
        this.m_version = version;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(version) {
        return new $p.$ctor.$type(this, version);
    };
}).call(null, System.Reflection.AssemblyVersionAttribute, System.Reflection.AssemblyVersionAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.AssemblyVersionAttribute);
System.Reflection.Binder = $define("System.Reflection.Binder", System.Object);
(System.Reflection.Binder.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.Binder";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Binder", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.Binder", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.Binder, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.Binder.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Reflection.Binder, System.Reflection.Binder.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.Binder);
System.Reflection.BindingFlags = $define("System.Reflection.BindingFlags", System.Enum);
(System.Reflection.BindingFlags.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.BindingFlags";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("BindingFlags", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.BindingFlags", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.BindingFlags, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Default", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreCase", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DeclaredOnly", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Instance", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NonPublic", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FlattenHierarchy", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InvokeMethod", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 256, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CreateInstance", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 512, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GetField", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SetField", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2048, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GetProperty", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SetProperty", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PutDispProperty", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16384, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PutRefDispProperty", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32768, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ExactBinding", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 65536, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SuppressChangeType", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 131072, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OptionalParamBinding", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 262144, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IgnoreReturn", System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16777216, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.BindingFlags.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Default = $p.$ctor.$new("Default", 0);
        $t.IgnoreCase = $p.$ctor.$new("IgnoreCase", 1);
        $t.DeclaredOnly = $p.$ctor.$new("DeclaredOnly", 2);
        $t.Instance = $p.$ctor.$new("Instance", 4);
        $t.Static = $p.$ctor.$new("Static", 8);
        $t.Public = $p.$ctor.$new("Public", 16);
        $t.NonPublic = $p.$ctor.$new("NonPublic", 32);
        $t.FlattenHierarchy = $p.$ctor.$new("FlattenHierarchy", 64);
        $t.InvokeMethod = $p.$ctor.$new("InvokeMethod", 256);
        $t.CreateInstance = $p.$ctor.$new("CreateInstance", 512);
        $t.GetField = $p.$ctor.$new("GetField", 1024);
        $t.SetField = $p.$ctor.$new("SetField", 2048);
        $t.GetProperty = $p.$ctor.$new("GetProperty", 4096);
        $t.SetProperty = $p.$ctor.$new("SetProperty", 8192);
        $t.PutDispProperty = $p.$ctor.$new("PutDispProperty", 16384);
        $t.PutRefDispProperty = $p.$ctor.$new("PutRefDispProperty", 32768);
        $t.ExactBinding = $p.$ctor.$new("ExactBinding", 65536);
        $t.SuppressChangeType = $p.$ctor.$new("SuppressChangeType", 131072);
        $t.OptionalParamBinding = $p.$ctor.$new("OptionalParamBinding", 262144);
        $t.IgnoreReturn = $p.$ctor.$new("IgnoreReturn", 16777216);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.BindingFlags, System.Reflection.BindingFlags.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.BindingFlags);
System.Reflection.CallingConventions = $define("System.Reflection.CallingConventions", System.Enum);
(System.Reflection.CallingConventions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.CallingConventions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CallingConventions", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.CallingConventions", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.CallingConventions, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Standard", System.Reflection.CallingConventions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("VarArgs", System.Reflection.CallingConventions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Any", System.Reflection.CallingConventions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasThis", System.Reflection.CallingConventions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ExplicitThis", System.Reflection.CallingConventions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.CallingConventions.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Standard = $p.$ctor.$new("Standard", 1);
        $t.VarArgs = $p.$ctor.$new("VarArgs", 2);
        $t.Any = $p.$ctor.$new("Any", System.Enum.InternalToObject(System.Reflection.CallingConventions, System.Reflection.CallingConventions().VarArgs.GetValue() | System.Reflection.CallingConventions().Standard.GetValue()));
        $t.HasThis = $p.$ctor.$new("HasThis", 32);
        $t.ExplicitThis = $p.$ctor.$new("ExplicitThis", 64);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.CallingConventions, System.Reflection.CallingConventions.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.CallingConventions);
System.Reflection.ConstructorInfo = $define("System.Reflection.ConstructorInfo", System.Reflection.MethodBase);
(System.Reflection.ConstructorInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MethodBase;
    $p.$typeName = "System.Reflection.ConstructorInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ConstructorInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.ConstructorInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.ConstructorInfo, System.Reflection.MethodBase, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("ConstructorName", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeConstructorName", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Reflection.ConstructorInfo.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.ConstructorInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.ConstructorInfo.prototype.Invoke$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.ConstructorInfo.prototype.Invoke$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.ConstructorInfo.prototype.Invoke$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ConstructorInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("jsConstructor", Function, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Reflection.ParameterInfo), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.ConstructorInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MethodBase.$StaticInitializer();
        $t.ConstructorName = ".ctor";
        $t.TypeConstructorName = ".cctor";
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Constructor;
    };
    $p.$ctor = function(name, jsConstructor, parameters, methodAttributes, attributes) {
        this.jsConstructor = null;
        System.Reflection.MethodBase.prototype.$ctor.call(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
        this.jsConstructor = jsConstructor;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, jsConstructor, parameters, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            jsConstructor, 
            parameters, 
            methodAttributes, 
            attributes
        );
    };
    $p.Invoke$3 = function(invokeAttr, binder, parameters, culture) {
        return this.jsConstructor.$new.apply(this.jsConstructor, parameters);
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {
        return this.Invoke$3(
            invokeAttr, 
            binder, 
            parameters, 
            culture
        );
    };
    $p.Invoke$2 = function(parameters) {
        return this.Invoke$3(
            System.Reflection.BindingFlags().Default, 
            null, 
            parameters, 
            null
        );
    };
}).call(null, System.Reflection.ConstructorInfo, System.Reflection.ConstructorInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ConstructorInfo);
System.Reflection.EventInfo = $define("System.Reflection.EventInfo", System.Reflection.MemberInfo);
(System.Reflection.EventInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.EventInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("EventInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.EventInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.EventInfo, System.Reflection.MemberInfo, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("eventType", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("removeMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.EventInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Reflection.EventInfo.prototype.get_AddMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_RemoveMethod", System.Reflection.EventInfo.prototype.get_RemoveMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_EventHandlerType", System.Reflection.EventInfo.prototype.get_EventHandlerType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAddMethod", System.Reflection.EventInfo.prototype.GetAddMethod$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRemoveMethod", System.Reflection.EventInfo.prototype.GetRemoveMethod$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAddMethod", System.Reflection.EventInfo.prototype.GetAddMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRemoveMethod", System.Reflection.EventInfo.prototype.GetRemoveMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AddEventHandler", System.Reflection.EventInfo.prototype.AddEventHandler, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("handler", System.Delegate, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("RemoveEventHandler", System.Reflection.EventInfo.prototype.RemoveEventHandler, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("handler", System.Delegate, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.EventInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("eventType", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("addMethod", System.Reflection.MethodInfo, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("removeMethod", System.Reflection.MethodInfo, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.EventInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("AddMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_AddMethod", System.Reflection.EventInfo.prototype.get_AddMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("RemoveMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_RemoveMethod", System.Reflection.EventInfo.prototype.get_RemoveMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("EventHandlerType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_EventHandlerType", System.Reflection.EventInfo.prototype.get_EventHandlerType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MemberInfo.$StaticInitializer();
    };
    $p.$ctor = function(name, eventType, addMethod, removeMethod, attributes) {
        this.eventType = null;
        this.addMethod = null;
        this.removeMethod = null;
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.eventType = eventType;
        this.addMethod = addMethod;
        this.removeMethod = removeMethod;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, eventType, addMethod, removeMethod, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            eventType, 
            addMethod, 
            removeMethod, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Event;
    };
    $p.get_AddMethod = function() {
        return this.addMethod;
    };
    $p.get_RemoveMethod = function() {
        return this.removeMethod;
    };
    $p.get_EventHandlerType = function() {
        return this.eventType;
    };
    $p.GetAddMethod$1 = function(nonPublic) {
        return this.addMethod.get_IsPublic() || nonPublic ? this.addMethod : null;
    };
    $p.GetRemoveMethod$1 = function(nonPublic) {
        return this.removeMethod.get_IsPublic() || nonPublic ? this.removeMethod : null;
    };
    $p.GetAddMethod = function() {
        return this.GetAddMethod$1(false);
    };
    $p.GetRemoveMethod = function() {
        return this.GetRemoveMethod$1(false);
    };
    $p.AddEventHandler = function(target, handler) {
        var addMethod = this.GetAddMethod();
        if (addMethod == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("InvalidOperation_NoPublicAddMethod").InternalInit(new Error());
        addMethod.Invoke(target, $arrayinit([handler], System.Delegate));
    };
    $p.RemoveEventHandler = function(target, handler) {
        var removeMethod = this.GetRemoveMethod();
        if (removeMethod == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("InvalidOperation_NoPublicRemoveMethod").InternalInit(new Error());
        removeMethod.Invoke(target, $arrayinit([handler], System.Delegate));
    };
}).call(null, System.Reflection.EventInfo, System.Reflection.EventInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.EventInfo);
System.Reflection.FieldAttributes = $define("System.Reflection.FieldAttributes", System.Enum);
(System.Reflection.FieldAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.FieldAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldAttributes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.FieldAttributes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.FieldAttributes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("FieldAccessMask", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PrivateScope", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Private", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FamANDAssem", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Family", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FamORAssem", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InitOnly", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Literal", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NotSerialized", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 128, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 512, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PinvokeImpl", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 38144, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldMarshal", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32768, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldRVA", System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 256, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.FieldAttributes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.FieldAccessMask = $p.$ctor.$new("FieldAccessMask", 7);
        $t.PrivateScope = $p.$ctor.$new("PrivateScope", 0);
        $t.Private = $p.$ctor.$new("Private", 1);
        $t.FamANDAssem = $p.$ctor.$new("FamANDAssem", 2);
        $t.Assembly = $p.$ctor.$new("Assembly", System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().FamANDAssem.GetValue() | System.Reflection.FieldAttributes().Private.GetValue()));
        $t.Family = $p.$ctor.$new("Family", 4);
        $t.FamORAssem = $p.$ctor.$new("FamORAssem", System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Family.GetValue() | System.Reflection.FieldAttributes().Private.GetValue()));
        $t.Public = $p.$ctor.$new("Public", System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Family.GetValue() | System.Reflection.FieldAttributes().FamANDAssem.GetValue()));
        $t.Static = $p.$ctor.$new("Static", 16);
        $t.InitOnly = $p.$ctor.$new("InitOnly", 32);
        $t.Literal = $p.$ctor.$new("Literal", 64);
        $t.NotSerialized = $p.$ctor.$new("NotSerialized", 128);
        $t.SpecialName = $p.$ctor.$new("SpecialName", 512);
        $t.PinvokeImpl = $p.$ctor.$new("PinvokeImpl", 8192);
        $t.ReservedMask = $p.$ctor.$new("ReservedMask", 38144);
        $t.RTSpecialName = $p.$ctor.$new("RTSpecialName", 1024);
        $t.HasFieldMarshal = $p.$ctor.$new("HasFieldMarshal", 4096);
        $t.HasDefault = $p.$ctor.$new("HasDefault", 32768);
        $t.HasFieldRVA = $p.$ctor.$new("HasFieldRVA", 256);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.FieldAttributes, System.Reflection.FieldAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.FieldAttributes);
System.Reflection.FieldInfo = $define("System.Reflection.FieldInfo", System.Reflection.MemberInfo);
(System.Reflection.FieldInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.FieldInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("FieldInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.FieldInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.FieldInfo, System.Reflection.MemberInfo, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("fieldAttributes", System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("constantValue", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.FieldInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FieldType", System.Reflection.FieldInfo.prototype.get_FieldType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.FieldInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.FieldAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.FieldInfo.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.FieldInfo.prototype.get_IsPrivate, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.FieldInfo.prototype.get_IsFamily, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.FieldInfo.prototype.get_IsAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyAndAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyOrAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.FieldInfo.prototype.get_IsStatic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInitOnly", System.Reflection.FieldInfo.prototype.get_IsInitOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiteral", System.Reflection.FieldInfo.prototype.get_IsLiteral, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNotSerialized", System.Reflection.FieldInfo.prototype.get_IsNotSerialized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.FieldInfo.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPinvokeImpl", System.Reflection.FieldInfo.prototype.get_IsPinvokeImpl, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFieldFromHandle", System.Reflection.FieldInfo.prototype.GetFieldFromHandle, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeFieldHandle, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.FieldInfo, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFieldFromHandle", System.Reflection.FieldInfo.prototype.GetFieldFromHandle$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("handle", System.RuntimeFieldHandle, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("declaringType", System.RuntimeTypeHandle, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.FieldInfo, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRequiredCustomModifiers", System.Reflection.FieldInfo.prototype.GetRequiredCustomModifiers, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetOptionalCustomModifiers", System.Reflection.FieldInfo.prototype.GetOptionalCustomModifiers, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.FieldInfo.prototype.GetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.FieldInfo.prototype.SetValue$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRawConstantValue", System.Reflection.FieldInfo.prototype.GetRawConstantValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.FieldInfo.prototype.SetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.FieldInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldType", Function, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("fieldAttributes", System.Reflection.FieldAttributes, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("constantValue", System.Object, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.FieldInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("FieldType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FieldType", System.Reflection.FieldInfo.prototype.get_FieldType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.FieldAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.FieldInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.FieldAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Reflection.FieldInfo.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPrivate", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrivate", System.Reflection.FieldInfo.prototype.get_IsPrivate, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamily", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamily", System.Reflection.FieldInfo.prototype.get_IsFamily, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAssembly", System.Reflection.FieldInfo.prototype.get_IsAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyAndAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyAndAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyAndAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsFamilyOrAssembly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsFamilyOrAssembly", System.Reflection.FieldInfo.prototype.get_IsFamilyOrAssembly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsStatic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsStatic", System.Reflection.FieldInfo.prototype.get_IsStatic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsInitOnly", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInitOnly", System.Reflection.FieldInfo.prototype.get_IsInitOnly, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLiteral", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLiteral", System.Reflection.FieldInfo.prototype.get_IsLiteral, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsNotSerialized", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNotSerialized", System.Reflection.FieldInfo.prototype.get_IsNotSerialized, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.FieldInfo.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPinvokeImpl", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPinvokeImpl", System.Reflection.FieldInfo.prototype.get_IsPinvokeImpl, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MemberInfo.$StaticInitializer();
    };
    $p.$ctor = function(name, fieldType, fieldAttributes, constantValue, attributes) {
        this.fieldType = null;
        this.fieldAttributes = 0;
        this.constantValue = null;
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.fieldType = fieldType;
        this.fieldAttributes = fieldAttributes;
        this.constantValue = constantValue;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, fieldType, fieldAttributes, constantValue, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            fieldType, 
            fieldAttributes, 
            constantValue, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Field;
    };
    $p.get_FieldType = function() {
        return System.Type._GetTypeFromTypeFunc(this.fieldType);
    };
    $p.get_Attributes = function() {
        return this.fieldAttributes;
    };
    $p.get_IsPublic = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().Public.GetValue();
    };
    $p.get_IsPrivate = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().Private.GetValue();
    };
    $p.get_IsFamily = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().Family.GetValue();
    };
    $p.get_IsAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().Assembly.GetValue();
    };
    $p.get_IsFamilyAndAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().FamANDAssem.GetValue();
    };
    $p.get_IsFamilyOrAssembly = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().FieldAccessMask.GetValue())).GetValue() == System.Reflection.FieldAttributes().FamORAssem.GetValue();
    };
    $p.get_IsStatic = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().Static.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $p.get_IsInitOnly = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().InitOnly.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $p.get_IsLiteral = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().Literal.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $p.get_IsNotSerialized = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().NotSerialized.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $p.get_IsSpecialName = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().SpecialName.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $p.get_IsPinvokeImpl = function() {
        return (System.Enum.InternalToObject(System.Reflection.FieldAttributes, this.get_Attributes().GetValue() & System.Reflection.FieldAttributes().PinvokeImpl.GetValue())).GetValue() != System.Reflection.FieldAttributes().PrivateScope.GetValue();
    };
    $t.GetFieldFromHandle = function(handle) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $t.GetFieldFromHandle$1 = function(handle, declaringType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetRequiredCustomModifiers = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetOptionalCustomModifiers = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetValue = function(obj) {
        if (this.get_IsStatic())
            return this.get_DeclaringType().thisType[this.get_Name()];
        else
            return obj[this.get_Name()];
    };
    $p.SetValue$1 = function(obj, value, invokeAttr, binder, culture) {
        if (this.get_IsStatic())
            this.get_DeclaringType().thisType[this.get_Name()] = value;
        else
            obj[this.get_Name()] = value;
    };
    $p.GetRawConstantValue = function() {
        return this.constantValue;
    };
    $p.SetValue = function(obj, value) {
        this.SetValue$1(
            obj, 
            value, 
            System.Reflection.BindingFlags().Default, 
            System.Type().DefaultBinder, 
            null
        );
    };
}).call(null, System.Reflection.FieldInfo, System.Reflection.FieldInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.FieldInfo);
System.Reflection.ICustomAttributeProvider = $define("System.Reflection.ICustomAttributeProvider", System.Object);
(System.Reflection.ICustomAttributeProvider.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.ICustomAttributeProvider";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ICustomAttributeProvider", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.ICustomAttributeProvider", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.Reflection.ICustomAttributeProvider, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$GetCustomAttributes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.ICustomAttributeProvider.prototype.System$Reflection$ICustomAttributeProvider$IsDefined, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = function(attributeType, inherit) {};
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = function(inherit) {};
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = function(attributeType, inherit) {};
}).call(null, System.Reflection.ICustomAttributeProvider, System.Reflection.ICustomAttributeProvider.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ICustomAttributeProvider);
System.Reflection.MemberTypes = $define("System.Reflection.MemberTypes", System.Enum);
(System.Reflection.MemberTypes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.MemberTypes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MemberTypes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.MemberTypes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.MemberTypes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Constructor", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Event", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Field", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Method", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Property", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInfo", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Custom", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedType", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 128, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("All", System.Reflection.MemberTypes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 191, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MemberTypes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Constructor = $p.$ctor.$new("Constructor", 1);
        $t.Event = $p.$ctor.$new("Event", 2);
        $t.Field = $p.$ctor.$new("Field", 4);
        $t.Method = $p.$ctor.$new("Method", 8);
        $t.Property = $p.$ctor.$new("Property", 16);
        $t.TypeInfo = $p.$ctor.$new("TypeInfo", 32);
        $t.Custom = $p.$ctor.$new("Custom", 64);
        $t.NestedType = $p.$ctor.$new("NestedType", 128);
        $t.All = $p.$ctor.$new("All", System.Enum.InternalToObject(System.Reflection.MemberTypes, System.Reflection.MemberTypes().NestedType.GetValue() | System.Reflection.MemberTypes().TypeInfo.GetValue()) | System.Reflection.MemberTypes().Property | System.Reflection.MemberTypes().Method | System.Reflection.MemberTypes().Field | System.Reflection.MemberTypes().Event | System.Reflection.MemberTypes().Constructor);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.MemberTypes, System.Reflection.MemberTypes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MemberTypes);
System.Reflection.MethodAttributes = $define("System.Reflection.MethodAttributes", System.Enum);
(System.Reflection.MethodAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.MethodAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodAttributes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.MethodAttributes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.MethodAttributes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("MemberAccessMask", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PrivateScope", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Private", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FamANDAssem", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Assembly", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Family", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FamORAssem", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Static", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Final", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Virtual", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 64, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HideBySig", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 128, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CheckAccessOnOverride", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 512, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("VtableLayoutMask", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 256, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Abstract", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2048, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("PinvokeImpl", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UnmanagedExport", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 53248, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasSecurity", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16384, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RequireSecObject", System.Reflection.MethodAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32768, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodAttributes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.MemberAccessMask = $p.$ctor.$new("MemberAccessMask", 7);
        $t.PrivateScope = $p.$ctor.$new("PrivateScope", 0);
        $t.Private = $p.$ctor.$new("Private", 1);
        $t.FamANDAssem = $p.$ctor.$new("FamANDAssem", 2);
        $t.Assembly = $p.$ctor.$new("Assembly", System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().FamANDAssem.GetValue() | System.Reflection.MethodAttributes().Private.GetValue()));
        $t.Family = $p.$ctor.$new("Family", 4);
        $t.FamORAssem = $p.$ctor.$new("FamORAssem", System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Family.GetValue() | System.Reflection.MethodAttributes().Private.GetValue()));
        $t.Public = $p.$ctor.$new("Public", System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Family.GetValue() | System.Reflection.MethodAttributes().FamANDAssem.GetValue()));
        $t.Static = $p.$ctor.$new("Static", 16);
        $t.Final = $p.$ctor.$new("Final", 32);
        $t.Virtual = $p.$ctor.$new("Virtual", 64);
        $t.HideBySig = $p.$ctor.$new("HideBySig", 128);
        $t.CheckAccessOnOverride = $p.$ctor.$new("CheckAccessOnOverride", 512);
        $t.VtableLayoutMask = $p.$ctor.$new("VtableLayoutMask", 256);
        $t.Abstract = $p.$ctor.$new("Abstract", 1024);
        $t.SpecialName = $p.$ctor.$new("SpecialName", 2048);
        $t.PinvokeImpl = $p.$ctor.$new("PinvokeImpl", 8192);
        $t.UnmanagedExport = $p.$ctor.$new("UnmanagedExport", 8);
        $t.RTSpecialName = $p.$ctor.$new("RTSpecialName", 4096);
        $t.ReservedMask = $p.$ctor.$new("ReservedMask", 53248);
        $t.HasSecurity = $p.$ctor.$new("HasSecurity", 16384);
        $t.RequireSecObject = $p.$ctor.$new("RequireSecObject", 32768);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.MethodAttributes, System.Reflection.MethodAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodAttributes);
System.Reflection.MethodInfo = $define("System.Reflection.MethodInfo", System.Reflection.MethodBase);
(System.Reflection.MethodInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MethodBase;
    $p.$typeName = "System.Reflection.MethodInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MethodInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.MethodInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.MethodInfo, System.Reflection.MethodBase, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("typeArguments", $array(System.Type), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("constructedMethods", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MethodInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnType", System.Reflection.MethodInfo.prototype.get_ReturnType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnTypeCustomAttributes", System.Reflection.MethodInfo.prototype.get_ReturnTypeCustomAttributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ICustomAttributeProvider, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetBaseDefinition", System.Reflection.MethodInfo.prototype.GetBaseDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericArguments", System.Reflection.MethodInfo.prototype.GetGenericArguments, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericMethodDefinition", System.Reflection.MethodInfo.prototype.GetGenericMethodDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeGenericMethod", System.Reflection.MethodInfo.prototype.MakeGenericMethod, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeArguments", $array(System.Type), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateDelegate", System.Reflection.MethodInfo.prototype.CreateDelegate, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateDelegate", System.Reflection.MethodInfo.prototype.CreateDelegate$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("delegateType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("target", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Delegate, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Invoke", System.Reflection.MethodInfo.prototype.Invoke$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.MethodInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("jsMethod", Function, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameters", $array(System.Reflection.ParameterInfo), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", Function, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("methodAttributes", System.Reflection.MethodAttributes, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.MethodInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("ReturnType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnType", System.Reflection.MethodInfo.prototype.get_ReturnType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("ReturnTypeCustomAttributes", System.Reflection.ICustomAttributeProvider, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ReturnTypeCustomAttributes", System.Reflection.MethodInfo.prototype.get_ReturnTypeCustomAttributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ICustomAttributeProvider, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MethodBase.$StaticInitializer();
    };
    $p.$ctor = function(name, jsMethod, parameters, returnType, methodAttributes, attributes) {
        this.jsMethod = null;
        this.returnType = null;
        this.typeArguments = null;
        this.constructedMethods = null;
        System.Reflection.MethodBase.prototype.$ctor.call(
            this, 
            name, 
            parameters, 
            methodAttributes, 
            attributes
        );
        this.jsMethod = jsMethod;
        this.returnType = returnType;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, jsMethod, parameters, returnType, methodAttributes, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            jsMethod, 
            parameters, 
            returnType, 
            methodAttributes, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Method;
    };
    $p.get_ReturnType = function() {
        return System.Type._GetTypeFromTypeFunc(this.returnType);
    };
    $p.get_ReturnTypeCustomAttributes = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetBaseDefinition = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetGenericArguments = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.GetGenericMethodDefinition = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.MakeGenericMethod = function(typeArguments) {
        if (this.typeArguments != null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Cannot call MakeGenericMethod on a constructed generic method").InternalInit(new Error());
        if (this.constructedMethods == null)
            this.constructedMethods = System.Collections.Generic.Dictionary$2$(String, System.Reflection.MethodInfo).prototype.$ctor.$new();
        var keyString = String.Join$1(String, ", ", System.Linq.Enumerable.Select(
            System.Type, 
            String, 
            typeArguments, 
            $delegate(this, System.Func$2$(System.Type, String), function(x) {
                return x.get_FullName();
            })
        ));
        var result;
        if (!(function() {
            var $anon$1 = {
                value: null
            };
            var $result$ = this.constructedMethods.TryGetValue(keyString, $anon$1);
            result = $anon$1.value;
            return $result$;
        }).call(this)) {
            result = System.Reflection.MethodInfo.prototype.$ctor.$new(
                this.get_Name(), 
                this.jsMethod, 
                this.GetParameters(), 
                this.returnType, 
                this.methodAttributes, 
                this.attributes
            );
            result.typeArguments = typeArguments;
            this.constructedMethods.set_Item(keyString, result);
        }
        return result;
    };
    $p.CreateDelegate = function(delegateType) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.CreateDelegate$1 = function(delegateType, target) {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.Invoke$1 = function(obj, invokeAttr, binder, parameters, culture) {
        if (this.get_IsStatic() && obj != null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Static methods cannot have a target").InternalInit(new Error());
        if (!this.get_IsStatic() && obj == null)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Instance methods must have a target").InternalInit(new Error());
        var args = new Array();
        if (this.typeArguments != null) {
            {
                var $anon$1iterator = this.typeArguments;
                var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                    var typeArgument = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                    args.push(typeArgument.thisType);
                }
            }
        }
        if (parameters != null) {
            {
                var $anon$3iterator = parameters;
                var $anon$4enumerator = $anon$3iterator.System$Collections$IEnumerable$GetEnumerator();
                while ($anon$4enumerator.System$Collections$IEnumerator$MoveNext()) {
                    var argument = $anon$4enumerator.System$Collections$IEnumerator$get_Current();
                    args.push(argument);
                }
            }
        }
        return this.jsMethod.apply(obj, args);
    };
}).call(null, System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.MethodInfo);
System.Reflection.ParameterAttributes = $define("System.Reflection.ParameterAttributes", System.Enum);
(System.Reflection.ParameterAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.ParameterAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterAttributes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.ParameterAttributes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.ParameterAttributes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("In", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Out", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Lcid", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Retval", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Optional", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 61440, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasFieldMarshal", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved3", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16384, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved4", System.Reflection.ParameterAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32768, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterAttributes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.None = $p.$ctor.$new("None", 0);
        $t.In = $p.$ctor.$new("In", 1);
        $t.Out = $p.$ctor.$new("Out", 2);
        $t.Lcid = $p.$ctor.$new("Lcid", 4);
        $t.Retval = $p.$ctor.$new("Retval", 8);
        $t.Optional = $p.$ctor.$new("Optional", 16);
        $t.ReservedMask = $p.$ctor.$new("ReservedMask", 61440);
        $t.HasDefault = $p.$ctor.$new("HasDefault", 4096);
        $t.HasFieldMarshal = $p.$ctor.$new("HasFieldMarshal", 8192);
        $t.Reserved3 = $p.$ctor.$new("Reserved3", 16384);
        $t.Reserved4 = $p.$ctor.$new("Reserved4", 32768);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.ParameterAttributes, System.Reflection.ParameterAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterAttributes);
System.Reflection.ParameterInfo = $define("System.Reflection.ParameterInfo", System.Object);
(System.Reflection.ParameterInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Reflection.ParameterInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.ParameterInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.ParameterInfo, System.Object, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("name", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("position", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("parameterAttributes", System.Reflection.ParameterAttributes, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("defaultValue", System.Object, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("containingMember", System.Reflection.MemberInfo, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Reflection.ParameterInfo.prototype.get_ParameterType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.ParameterInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasDefaultValue", System.Reflection.ParameterInfo.prototype.get_HasDefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_DefaultValue", System.Reflection.ParameterInfo.prototype.get_DefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_RawDefaultValue", System.Reflection.ParameterInfo.prototype.get_RawDefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Position", System.Reflection.ParameterInfo.prototype.get_Position, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.ParameterInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ParameterAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Reflection.ParameterInfo.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsIn", System.Reflection.ParameterInfo.prototype.get_IsIn, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOut", System.Reflection.ParameterInfo.prototype.get_IsOut, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLcid", System.Reflection.ParameterInfo.prototype.get_IsLcid, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsRetval", System.Reflection.ParameterInfo.prototype.get_IsRetval, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOptional", System.Reflection.ParameterInfo.prototype.get_IsOptional, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Reflection.ParameterInfo.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.ParameterInfo.prototype.GetCustomAttributes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetCustomAttributes", System.Reflection.ParameterInfo.prototype.GetCustomAttributes$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDefined", System.Reflection.ParameterInfo.prototype.IsDefined, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("attributeType", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("inherit", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type", Function, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("position", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterAttributes", System.Reflection.ParameterAttributes, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("defaultValue", System.Object, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("ParameterType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_ParameterType", System.Reflection.ParameterInfo.prototype.get_ParameterType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Reflection.ParameterInfo.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("HasDefaultValue", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasDefaultValue", System.Reflection.ParameterInfo.prototype.get_HasDefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("DefaultValue", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_DefaultValue", System.Reflection.ParameterInfo.prototype.get_DefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("RawDefaultValue", System.Object, System.Reflection.MethodInfo.prototype.$ctor.$new("get_RawDefaultValue", System.Reflection.ParameterInfo.prototype.get_RawDefaultValue, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Position", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Position", System.Reflection.ParameterInfo.prototype.get_Position, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.ParameterAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.ParameterInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.ParameterAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Member", System.Reflection.MemberInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Member", System.Reflection.ParameterInfo.prototype.get_Member, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsIn", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsIn", System.Reflection.ParameterInfo.prototype.get_IsIn, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsOut", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOut", System.Reflection.ParameterInfo.prototype.get_IsOut, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsLcid", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsLcid", System.Reflection.ParameterInfo.prototype.get_IsLcid, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsRetval", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsRetval", System.Reflection.ParameterInfo.prototype.get_IsRetval, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsOptional", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsOptional", System.Reflection.ParameterInfo.prototype.get_IsOptional, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function(name, type, position, parameterAttributes, defaultValue, attributes) {
        this.name = null;
        this.type = null;
        this.position = 0;
        this.parameterAttributes = 0;
        this.defaultValue = null;
        this.containingMember = null;
        this.attributes = null;
        System.Object.prototype.$ctor.call(this);
        this.name = name;
        this.type = type;
        this.position = position;
        this.parameterAttributes = parameterAttributes;
        this.defaultValue = defaultValue;
        this.attributes = attributes;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, type, position, parameterAttributes, defaultValue, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            type, 
            position, 
            parameterAttributes, 
            defaultValue, 
            attributes
        );
    };
    $p.get_ParameterType = function() {
        return System.Type._GetTypeFromTypeFunc(this.type);
    };
    $p.get_Name = function() {
        return this.name;
    };
    $p.get_HasDefaultValue = function() {
        return this.get_IsOptional();
    };
    $p.get_DefaultValue = function() {
        return this.defaultValue;
    };
    $p.get_RawDefaultValue = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().HasDefault.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.get_Position = function() {
        return this.position;
    };
    $p.get_Attributes = function() {
        return this.parameterAttributes;
    };
    $p.get_Member = function() {
        return this.containingMember;
    };
    $p.get_IsIn = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().In.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.get_IsOut = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().Out.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.get_IsLcid = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().Lcid.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.get_IsRetval = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().Retval.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.get_IsOptional = function() {
        return (System.Enum.InternalToObject(System.Reflection.ParameterAttributes, this.get_Attributes().GetValue() & System.Reflection.ParameterAttributes().Optional.GetValue())).GetValue() != System.Reflection.ParameterAttributes().None.GetValue();
    };
    $p.ToString = function() {
        return $safeToString(this.get_ParameterType()) + " " + this.get_Name();
    };
    $p.GetCustomAttributes = function(inherit) {
        return System.Linq.Enumerable.ToArray(System.Attribute, this.attributes);
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes = $p.GetCustomAttributes;
    $p.GetCustomAttributes$1 = function(attributeType, inherit) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Where(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        })));
    };
    $p.System$Reflection$ICustomAttributeProvider$GetCustomAttributes$1 = $p.GetCustomAttributes$1;
    $p.IsDefined = function(attributeType, inherit) {
        return System.Linq.Enumerable.Any$1(System.Object, this.GetCustomAttributes(inherit), $delegate(this, System.Func$2$(System.Object, System.Boolean), function(x) {
            return attributeType.IsInstanceOfType(x);
        }));
    };
    $p.System$Reflection$ICustomAttributeProvider$IsDefined = $p.IsDefined;
}).call(null, System.Reflection.ParameterInfo, System.Reflection.ParameterInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterInfo);
System.Reflection.ParameterModifier = $define("System.Reflection.ParameterModifier", System.ValueType);
(System.Reflection.ParameterModifier.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Reflection.ParameterModifier";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ParameterModifier", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.ParameterModifier", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.ParameterModifier, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_byRef", $array(System.Boolean), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsByRefArray", System.Reflection.ParameterModifier.prototype.get_IsByRefArray, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Boolean), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Reflection.ParameterModifier.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Reflection.ParameterModifier.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.ParameterModifier.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Reflection.ParameterModifier.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("parameterCount", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("IsByRefArray", $array(System.Boolean), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsByRefArray", System.Reflection.ParameterModifier.prototype.get_IsByRefArray, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Boolean), System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item", System.Reflection.ParameterModifier.prototype.get_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Item", System.Reflection.ParameterModifier.prototype.set_Item, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.get_IsByRefArray = function() {
        return this._byRef;
    };
    $p.get_Item = function(index) {
        return this._byRef[index];
    };
    $p.set_Item = function(index, value) {
        this._byRef[index] = value;
    };
    $p.$ctor$1 = function(parameterCount) {
        this._byRef = null;
        System.ValueType.prototype.$ctor.call(this);
        if (parameterCount <= 0)
            throw System.ArgumentException.prototype.$ctor$1.$new("Arg_ParmArraySize").InternalInit(new Error());
        this._byRef = $arrayinit(new Array(parameterCount), System.Boolean);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(parameterCount) {
        return new $p.$ctor$1.$type(this, parameterCount);
    };
}).call(null, System.Reflection.ParameterModifier, System.Reflection.ParameterModifier.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.ParameterModifier);
System.Reflection.PropertyAttributes = $define("System.Reflection.PropertyAttributes", System.Enum);
(System.Reflection.PropertyAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.PropertyAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyAttributes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.PropertyAttributes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.PropertyAttributes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 512, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 62464, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasDefault", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved2", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved3", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16384, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Reserved4", System.Reflection.PropertyAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32768, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.PropertyAttributes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.None = $p.$ctor.$new("None", 0);
        $t.SpecialName = $p.$ctor.$new("SpecialName", 512);
        $t.ReservedMask = $p.$ctor.$new("ReservedMask", 62464);
        $t.RTSpecialName = $p.$ctor.$new("RTSpecialName", 1024);
        $t.HasDefault = $p.$ctor.$new("HasDefault", 4096);
        $t.Reserved2 = $p.$ctor.$new("Reserved2", 8192);
        $t.Reserved3 = $p.$ctor.$new("Reserved3", 16384);
        $t.Reserved4 = $p.$ctor.$new("Reserved4", 32768);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.PropertyAttributes, System.Reflection.PropertyAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.PropertyAttributes);
System.Reflection.PropertyInfo = $define("System.Reflection.PropertyInfo", System.Reflection.MemberInfo);
(System.Reflection.PropertyInfo.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Reflection.PropertyInfo";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("PropertyInfo", $arrayinit([], System.Attribute));this.$type.Init("System.Reflection.PropertyInfo", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Reflection.PropertyInfo, System.Reflection.MemberInfo, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("getMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("setMethod", System.Reflection.MethodInfo, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("indexParameters", $array(System.Reflection.ParameterInfo), System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.PropertyInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_PropertyType", System.Reflection.PropertyInfo.prototype.get_PropertyType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.PropertyInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.PropertyAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanRead", System.Reflection.PropertyInfo.prototype.get_CanRead, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanWrite", System.Reflection.PropertyInfo.prototype.get_CanWrite, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_GetMethod", System.Reflection.PropertyInfo.prototype.get_GetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_SetMethod", System.Reflection.PropertyInfo.prototype.get_SetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.PropertyInfo.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.PropertyInfo.prototype.SetValue$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", $array(System.Object), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAccessors", System.Reflection.PropertyInfo.prototype.GetAccessors$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGetMethod", System.Reflection.PropertyInfo.prototype.GetGetMethod$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetSetMethod", System.Reflection.PropertyInfo.prototype.GetSetMethod$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("nonPublic", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetIndexParameters", System.Reflection.PropertyInfo.prototype.GetIndexParameters, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.PropertyInfo.prototype.GetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.PropertyInfo.prototype.GetValue$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetValue", System.Reflection.PropertyInfo.prototype.GetValue$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("invokeAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("culture", System.Globalization.CultureInfo, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.PropertyInfo.prototype.SetValue, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("SetValue", System.Reflection.PropertyInfo.prototype.SetValue$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("index", $array(System.Object), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetRequiredCustomModifiers", System.Reflection.PropertyInfo.prototype.GetRequiredCustomModifiers, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetOptionalCustomModifiers", System.Reflection.PropertyInfo.prototype.GetOptionalCustomModifiers, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetAccessors", System.Reflection.PropertyInfo.prototype.GetAccessors, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGetMethod", System.Reflection.PropertyInfo.prototype.GetGetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetSetMethod", System.Reflection.PropertyInfo.prototype.GetSetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.PropertyInfo.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("propertyType", Function, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("getMethod", System.Reflection.MethodInfo, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("setMethod", System.Reflection.MethodInfo, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("indexParameters", $array(System.Reflection.ParameterInfo), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Reflection.PropertyInfo.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("PropertyType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_PropertyType", System.Reflection.PropertyInfo.prototype.get_PropertyType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Attributes", System.Reflection.PropertyAttributes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Attributes", System.Reflection.PropertyInfo.prototype.get_Attributes, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.PropertyAttributes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CanRead", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanRead", System.Reflection.PropertyInfo.prototype.get_CanRead, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("CanWrite", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_CanWrite", System.Reflection.PropertyInfo.prototype.get_CanWrite, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("GetMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_GetMethod", System.Reflection.PropertyInfo.prototype.get_GetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("SetMethod", System.Reflection.MethodInfo, System.Reflection.MethodInfo.prototype.$ctor.$new("get_SetMethod", System.Reflection.PropertyInfo.prototype.get_SetMethod, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSpecialName", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSpecialName", System.Reflection.PropertyInfo.prototype.get_IsSpecialName, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MemberInfo.$StaticInitializer();
    };
    $p.$ctor = function(name, propertyType, getMethod, setMethod, indexParameters, attributes) {
        this.propertyType = null;
        this.getMethod = null;
        this.setMethod = null;
        this.indexParameters = null;
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
        this.propertyType = propertyType;
        this.getMethod = getMethod;
        this.setMethod = setMethod;
        this.indexParameters = indexParameters;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, propertyType, getMethod, setMethod, indexParameters, attributes) {
        return new $p.$ctor.$type(
            this, 
            name, 
            propertyType, 
            getMethod, 
            setMethod, 
            indexParameters, 
            attributes
        );
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().Property;
    };
    $p.get_PropertyType = function() {
        return System.Type._GetTypeFromTypeFunc(this.propertyType);
    };
    $p.get_Attributes = function() {
        throw System.NotImplementedException.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.get_CanRead = function() {
        return this.getMethod != null;
    };
    $p.get_CanWrite = function() {
        return this.setMethod != null;
    };
    $p.get_GetMethod = function() {
        return this.GetGetMethod$1(true);
    };
    $p.get_SetMethod = function() {
        return this.GetSetMethod$1(true);
    };
    $p.get_IsSpecialName = function() {
        return (System.Enum.InternalToObject(System.Reflection.PropertyAttributes, this.get_Attributes().GetValue() & System.Reflection.PropertyAttributes().SpecialName.GetValue())).GetValue() != System.Reflection.PropertyAttributes().None.GetValue();
    };
    $p.SetValue$2 = function(obj, value, invokeAttr, binder, index, culture) {
        var args = $arrayinit(new Array(1 + (index != null ? index.length : 0)), System.Object);
        args[0] = value;
        for (var i = 1; i < args.length; i++) {
            args[i] = index[i - 1];
        }
        this.get_SetMethod().Invoke$1(
            obj, 
            invokeAttr, 
            binder, 
            args, 
            culture
        );
    };
    $p.GetAccessors$1 = function(nonPublic) {
        var methods = System.Collections.Generic.List$1$(System.Reflection.MethodInfo).prototype.$ctor.$new();
        if (this.getMethod != null)
            methods.Add(this.getMethod);
        if (this.setMethod != null)
            methods.Add(this.setMethod);
        return System.Linq.Enumerable.ToArray(System.Reflection.MethodInfo, methods);
    };
    $p.GetGetMethod$1 = function(nonPublic) {
        if (nonPublic)
            return this.getMethod;
        else
            return this.getMethod.get_IsPublic() ? this.getMethod : null;
    };
    $p.GetSetMethod$1 = function(nonPublic) {
        if (nonPublic)
            return this.setMethod;
        else
            return this.setMethod.get_IsPublic() ? this.setMethod : null;
    };
    $p.GetIndexParameters = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.ParameterInfo, this.indexParameters);
    };
    $p.GetValue = function(obj) {
        return this.GetValue$1(obj, null);
    };
    $p.GetValue$1 = function(obj, index) {
        return this.GetValue$2(
            obj, 
            System.Reflection.BindingFlags().Default, 
            null, 
            index, 
            null
        );
    };
    $p.GetValue$2 = function(obj, invokeAttr, binder, index, culture) {
        return this.get_GetMethod().Invoke$1(
            obj, 
            invokeAttr, 
            binder, 
            index, 
            culture
        );
    };
    $p.SetValue = function(obj, value) {
        this.SetValue$1(obj, value, null);
    };
    $p.SetValue$1 = function(obj, value, index) {
        this.SetValue$2(
            obj, 
            value, 
            System.Reflection.BindingFlags().Default, 
            null, 
            index, 
            null
        );
    };
    $p.GetRequiredCustomModifiers = function() {
        return $arrayinit(new Array(0), System.Type);
    };
    $p.GetOptionalCustomModifiers = function() {
        return $arrayinit(new Array(0), System.Type);
    };
    $p.GetAccessors = function() {
        return this.GetAccessors$1(false);
    };
    $p.GetGetMethod = function() {
        return this.GetGetMethod$1(false);
    };
    $p.GetSetMethod = function() {
        return this.GetSetMethod$1(false);
    };
}).call(null, System.Reflection.PropertyInfo, System.Reflection.PropertyInfo.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.PropertyInfo);
System.Reflection.TypeAttributes = $define("System.Reflection.TypeAttributes", System.Enum);
(System.Reflection.TypeAttributes.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Reflection.TypeAttributes";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("TypeAttributes", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.Reflection.TypeAttributes", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Reflection.TypeAttributes, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("VisibilityMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NotPublic", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Public", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedPublic", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedPrivate", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedFamily", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedAssembly", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedFamANDAssem", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NestedFamORAssem", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("LayoutMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 24, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AutoLayout", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SequentialLayout", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ExplicitLayout", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ClassSemanticsMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Class", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Interface", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 32, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Abstract", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 128, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Sealed", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 256, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SpecialName", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1024, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Import", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4096, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Serializable", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("StringFormatMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 196608, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AnsiClass", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UnicodeClass", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 65536, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AutoClass", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 131072, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CustomFormatClass", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 196608, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CustomFormatMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 12582912, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("BeforeFieldInit", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1048576, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ReservedMask", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 264192, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RTSpecialName", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2048, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HasSecurity", System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 262144, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Reflection.TypeAttributes.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.VisibilityMask = $p.$ctor.$new("VisibilityMask", 7);
        $t.NotPublic = $p.$ctor.$new("NotPublic", 0);
        $t.Public = $p.$ctor.$new("Public", 1);
        $t.NestedPublic = $p.$ctor.$new("NestedPublic", 2);
        $t.NestedPrivate = $p.$ctor.$new("NestedPrivate", 3);
        $t.NestedFamily = $p.$ctor.$new("NestedFamily", 4);
        $t.NestedAssembly = $p.$ctor.$new("NestedAssembly", 5);
        $t.NestedFamANDAssem = $p.$ctor.$new("NestedFamANDAssem", 6);
        $t.NestedFamORAssem = $p.$ctor.$new("NestedFamORAssem", 7);
        $t.LayoutMask = $p.$ctor.$new("LayoutMask", 24);
        $t.AutoLayout = $p.$ctor.$new("AutoLayout", 0);
        $t.SequentialLayout = $p.$ctor.$new("SequentialLayout", 8);
        $t.ExplicitLayout = $p.$ctor.$new("ExplicitLayout", 16);
        $t.ClassSemanticsMask = $p.$ctor.$new("ClassSemanticsMask", 32);
        $t.Class = $p.$ctor.$new("Class", 0);
        $t.Interface = $p.$ctor.$new("Interface", 32);
        $t.Abstract = $p.$ctor.$new("Abstract", 128);
        $t.Sealed = $p.$ctor.$new("Sealed", 256);
        $t.SpecialName = $p.$ctor.$new("SpecialName", 1024);
        $t.Import = $p.$ctor.$new("Import", 4096);
        $t.Serializable = $p.$ctor.$new("Serializable", 8192);
        $t.StringFormatMask = $p.$ctor.$new("StringFormatMask", 196608);
        $t.AnsiClass = $p.$ctor.$new("AnsiClass", 0);
        $t.UnicodeClass = $p.$ctor.$new("UnicodeClass", 65536);
        $t.AutoClass = $p.$ctor.$new("AutoClass", 131072);
        $t.CustomFormatClass = $p.$ctor.$new("CustomFormatClass", 196608);
        $t.CustomFormatMask = $p.$ctor.$new("CustomFormatMask", 12582912);
        $t.BeforeFieldInit = $p.$ctor.$new("BeforeFieldInit", 1048576);
        $t.ReservedMask = $p.$ctor.$new("ReservedMask", 264192);
        $t.RTSpecialName = $p.$ctor.$new("RTSpecialName", 2048);
        $t.HasSecurity = $p.$ctor.$new("HasSecurity", 262144);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Reflection.TypeAttributes, System.Reflection.TypeAttributes.prototype);
$mscorlib$AssemblyTypes.push(System.Reflection.TypeAttributes);
System.RuntimeMethodHandle = $define("System.RuntimeMethodHandle", System.ValueType);
(System.RuntimeMethodHandle.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.RuntimeMethodHandle";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("RuntimeMethodHandle", $arrayinit([], System.Attribute));this.$type.Init("System.RuntimeMethodHandle", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.RuntimeMethodHandle, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.RuntimeMethodHandle.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.RuntimeMethodHandle, System.RuntimeMethodHandle.prototype);
$mscorlib$AssemblyTypes.push(System.RuntimeMethodHandle);
System.Runtime.CompilerServices.DynamicAttribute = $define("System.Runtime.CompilerServices.DynamicAttribute", System.Attribute);
(System.Runtime.CompilerServices.DynamicAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.CompilerServices.DynamicAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("DynamicAttribute", $arrayinit([System.AttributeUsageAttribute.prototype.$ctor.$new(10636)], System.Attribute));this.$type.Init("System.Runtime.CompilerServices.DynamicAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Runtime.CompilerServices.DynamicAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.CompilerServices.DynamicAttribute.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.CompilerServices.DynamicAttribute, System.Runtime.CompilerServices.DynamicAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.CompilerServices.DynamicAttribute);
System.Runtime.CompilerServices.IndexerNameAttribute = $define("System.Runtime.CompilerServices.IndexerNameAttribute", System.Attribute);
(System.Runtime.CompilerServices.IndexerNameAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.CompilerServices.IndexerNameAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IndexerNameAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(128);$obj$.set_Inherited(true);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Runtime.CompilerServices.IndexerNameAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Runtime.CompilerServices.IndexerNameAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.CompilerServices.IndexerNameAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("indexerName", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.$ctor = function(indexerName) {
        System.Attribute.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(indexerName) {
        return new $p.$ctor.$type(this, indexerName);
    };
}).call(null, System.Runtime.CompilerServices.IndexerNameAttribute, System.Runtime.CompilerServices.IndexerNameAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.CompilerServices.IndexerNameAttribute);
System.Runtime.InteropServices.CallingConvention = $define("System.Runtime.InteropServices.CallingConvention", System.Enum);
(System.Runtime.InteropServices.CallingConvention.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.Runtime.InteropServices.CallingConvention";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("CallingConvention", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.InteropServices.CallingConvention", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Runtime.InteropServices.CallingConvention, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Winapi", System.Runtime.InteropServices.CallingConvention, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Cdecl", System.Runtime.InteropServices.CallingConvention, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("StdCall", System.Runtime.InteropServices.CallingConvention, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ThisCall", System.Runtime.InteropServices.CallingConvention, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("FastCall", System.Runtime.InteropServices.CallingConvention, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.InteropServices.CallingConvention.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Winapi = $p.$ctor.$new("Winapi", 1);
        $t.Cdecl = $p.$ctor.$new("Cdecl", 2);
        $t.StdCall = $p.$ctor.$new("StdCall", 3);
        $t.ThisCall = $p.$ctor.$new("ThisCall", 4);
        $t.FastCall = $p.$ctor.$new("FastCall", 5);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.Runtime.InteropServices.CallingConvention, System.Runtime.InteropServices.CallingConvention.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.InteropServices.CallingConvention);
System.Runtime.InteropServices.ComVisibleAttribute = $define("System.Runtime.InteropServices.ComVisibleAttribute", System.Attribute);
(System.Runtime.InteropServices.ComVisibleAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.InteropServices.ComVisibleAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ComVisibleAttribute", $arrayinit([System.Runtime.InteropServices.ComVisibleAttribute.prototype.$ctor.$new(true), (function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(5597);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Runtime.InteropServices.ComVisibleAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Runtime.InteropServices.ComVisibleAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_val", System.Boolean, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Runtime.InteropServices.ComVisibleAttribute.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.InteropServices.ComVisibleAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("visibility", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Runtime.InteropServices.ComVisibleAttribute.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Value = function() {
        return this._val;
    };
    $p.$ctor = function(visibility) {
        this._val = false;
        System.Attribute.prototype.$ctor.call(this);
        this._val = visibility;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(visibility) {
        return new $p.$ctor.$type(this, visibility);
    };
}).call(null, System.Runtime.InteropServices.ComVisibleAttribute, System.Runtime.InteropServices.ComVisibleAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.InteropServices.ComVisibleAttribute);
System.Runtime.InteropServices.GuidAttribute = $define("System.Runtime.InteropServices.GuidAttribute", System.Attribute);
(System.Runtime.InteropServices.GuidAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.InteropServices.GuidAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GuidAttribute", $arrayinit([(function() {var $obj$ = System.AttributeUsageAttribute.prototype.$ctor.$new(5149);$obj$.set_Inherited(false);return $obj$;}).call(this)], System.Attribute));this.$type.Init("System.Runtime.InteropServices.GuidAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Runtime.InteropServices.GuidAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("_val", String, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Runtime.InteropServices.GuidAttribute.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.InteropServices.GuidAttribute.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("guid", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Value", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Value", System.Runtime.InteropServices.GuidAttribute.prototype.get_Value, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Value = function() {
        return this._val;
    };
    $p.$ctor = function(guid) {
        this._val = null;
        System.Attribute.prototype.$ctor.call(this);
        this._val = guid;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(guid) {
        return new $p.$ctor.$type(this, guid);
    };
}).call(null, System.Runtime.InteropServices.GuidAttribute, System.Runtime.InteropServices.GuidAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.InteropServices.GuidAttribute);
System.IntPtr = $define("System.IntPtr", System.ValueType);
(System.IntPtr.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.IntPtr";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("IntPtr", $arrayinit([], System.Attribute));this.$type.Init("System.IntPtr", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.IntPtr, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.IntPtr.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.IntPtr, System.IntPtr.prototype);
$mscorlib$AssemblyTypes.push(System.IntPtr);
(Number.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Number";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Number", $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("Number");$obj$.set_BuiltIn(true);$obj$.set_BaseType(System.Object);return $obj$;}).call(this)], System.Attribute));this.$type.Init("Number", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), Number, System.Object, $arrayinit([System.IComparable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("MAX_VALUE", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MIN_VALUE", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NaN", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("NEGATIVE_INFINITY", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("POSITIVE_INFINITY", System.Int32, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", Number.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", Number.prototype.Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsFinite", Number.prototype.IsFinite, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("n", Number, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsNaN", Number.prototype.IsNaN, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("n", Number, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", Number.prototype.LocaleFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", Number.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseDouble", Number.prototype.ParseDouble, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Double, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseFloat", Number.prototype.ParseFloat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt", Number.prototype.ParseInt$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("f", System.Single, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt", Number.prototype.ParseInt, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("d", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt", Number.prototype.ParseInt$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseInt", Number.prototype.ParseInt$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", Number.prototype.ToExponential, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToExponential", Number.prototype.ToExponential$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", Number.prototype.ToFixed, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToFixed", Number.prototype.ToFixed$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fractionDigits", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", Number.prototype.ToPrecision, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToPrecision", Number.prototype.ToPrecision$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("precision", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", Number.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", Number.prototype.ToString$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", Number.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", Number.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", Number.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", Number.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", Number.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.MAX_VALUE = 0;
        $t.MIN_VALUE = 0;
        $t.NaN = 0;
        $t.NEGATIVE_INFINITY = 0;
        $t.POSITIVE_INFINITY = 0;
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type();
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $t.IsFinite = function(n) {
        return false;
    };
    $t.IsNaN = function(n) {
        return false;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $t.Parse = function(s) {
        return null;
    };
    $t.ParseDouble = function(s) {
        return 0;
    };
    $t.ParseFloat = function(s) {
        return 0;
    };
    $t.ParseInt$1 = function(f) {
        return 0;
    };
    $t.ParseInt = function(d) {
        return 0;
    };
    $t.ParseInt$2 = function(s) {
        return 0;
    };
    $t.ParseInt$3 = function(s, radix) {
        return 0;
    };
    $p.ToExponential = function() {
        return null;
    };
    $p.ToExponential$1 = function(fractionDigits) {
        return null;
    };
    $p.ToFixed = function() {
        return null;
    };
    $p.ToFixed$1 = function(fractionDigits) {
        return null;
    };
    $p.ToPrecision = function() {
        return null;
    };
    $p.ToPrecision$1 = function(precision) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $p.ToString$2 = function(format) {
        if (String.IsNullOrEmpty(format))
            return this.ToString();
        if (format.get_Chars(0) == "X") {
            var radix = 16;
            var remainingFormat = String.prototype.Substring.call(format, 1, 0);
            var s = this.toString(radix);
            if (remainingFormat.length > 0) {
                var minimumDigits = System.Int32.Parse(remainingFormat);
                while (s.length < minimumDigits) {
                    s = "0" + s;
                }
            }
            return s;
        }
        throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
    };
    $p.CompareTo = function(obj) {
        return (this - obj);
    };
    $p.System$IComparable$CompareTo = $p.CompareTo;
    $p.Equals = function(obj) {
        return System.Object.prototype.Equals.call(this, obj);
    };
    $p.GetHashCode = function() {
        return this;
    };
    $p.ToString = function() {
        return this.toString();
    };
}).call(null, Number, Number.prototype);
$mscorlib$AssemblyTypes.push(Number);
System.RuntimeTypeHandle = $define("System.RuntimeTypeHandle", System.ValueType);
(System.RuntimeTypeHandle.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.RuntimeTypeHandle";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("RuntimeTypeHandle", $arrayinit([], System.Attribute));this.$type.Init("System.RuntimeTypeHandle", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.RuntimeTypeHandle, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.RuntimeTypeHandle.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.RuntimeTypeHandle, System.RuntimeTypeHandle.prototype);
$mscorlib$AssemblyTypes.push(System.RuntimeTypeHandle);
System.MidpointRounding = $define("System.MidpointRounding", System.Enum);
(System.MidpointRounding.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.MidpointRounding";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("MidpointRounding", $arrayinit([], System.Attribute));this.$type.Init("System.MidpointRounding", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.MidpointRounding, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("ToEven", System.MidpointRounding, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("AwayFromZero", System.MidpointRounding, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.MidpointRounding.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.ToEven = $p.$ctor.$new("ToEven", 0);
        $t.AwayFromZero = $p.$ctor.$new("AwayFromZero", System.MidpointRounding().ToEven + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.MidpointRounding, System.MidpointRounding.prototype);
$mscorlib$AssemblyTypes.push(System.MidpointRounding);
System.Runtime.WootzJs.Evaluator = $define("System.Runtime.WootzJs.Evaluator", System.Linq.Expressions.ExpressionVisitor);
(System.Runtime.WootzJs.Evaluator.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Linq.Expressions.ExpressionVisitor;
    $p.$typeName = "System.Runtime.WootzJs.Evaluator";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Evaluator", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.WootzJs.Evaluator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.Evaluator, System.Linq.Expressions.ExpressionVisitor, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("stack", System.Collections.Generic.Stack$1, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("arguments", System.Collections.Generic.Dictionary$2, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("AddArgument", System.Runtime.WootzJs.Evaluator.prototype.AddArgument, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("parameter", System.Linq.Expressions.ParameterExpression, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Evaluate", System.Runtime.WootzJs.Evaluator.prototype.Evaluate, $arrayinit([], System.Reflection.ParameterInfo), System.Object, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConstant", System.Runtime.WootzJs.Evaluator.prototype.VisitConstant, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConstantExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitBinary", System.Runtime.WootzJs.Evaluator.prototype.VisitBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.BinaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitConditional", System.Runtime.WootzJs.Evaluator.prototype.VisitConditional, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ConditionalExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMember", System.Runtime.WootzJs.Evaluator.prototype.VisitMember, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMethodCall", System.Runtime.WootzJs.Evaluator.prototype.VisitMethodCall, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MethodCallExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNew", System.Runtime.WootzJs.Evaluator.prototype.VisitNew, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitMemberInit", System.Runtime.WootzJs.Evaluator.prototype.VisitMemberInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.MemberInitExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitListInit", System.Runtime.WootzJs.Evaluator.prototype.VisitListInit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ListInitExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitUnary", System.Runtime.WootzJs.Evaluator.prototype.VisitUnary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.UnaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitInvocation", System.Runtime.WootzJs.Evaluator.prototype.VisitInvocation, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.InvocationExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitTypeBinary", System.Runtime.WootzJs.Evaluator.prototype.VisitTypeBinary, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.TypeBinaryExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitNewArray", System.Runtime.WootzJs.Evaluator.prototype.VisitNewArray, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.NewArrayExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("VisitParameter", System.Runtime.WootzJs.Evaluator.prototype.VisitParameter, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.ParameterExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("VisitLambda", System.Runtime.WootzJs.Evaluator.prototype.VisitLambda, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("node", System.Linq.Expressions.Expression$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Linq.Expressions.Expression, System.Reflection.MethodAttributes().FamORAssem, $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.Evaluator.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Linq.Expressions.ExpressionVisitor.$StaticInitializer();
    };
    $p.$ctor = function(expression) {
        this.expression = null;
        this.stack = System.Collections.Generic.Stack$1$(System.Object).prototype.$ctor.$new();
        this.arguments = System.Collections.Generic.Dictionary$2$(System.Linq.Expressions.ParameterExpression, System.Object).prototype.$ctor.$new();
        System.Linq.Expressions.ExpressionVisitor.prototype.$ctor.call(this);
        this.expression = expression;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(expression) {
        return new $p.$ctor.$type(this, expression);
    };
    $p.AddArgument = function(parameter, value) {
        this.arguments.set_Item(parameter, value);
    };
    $p.Evaluate = function() {
        this.Visit$1(this.expression);
        return this.stack.Peek();
    };
    $p.VisitConstant = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitConstant.call(this, node);
        this.stack.Push(node.get_Value());
        return node;
    };
    $p.VisitBinary = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitBinary.call(this, node);
        var right = this.stack.Pop();
        var left = this.stack.Pop();
        switch (node.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Add:
                this.stack.Push(System.Runtime.WootzJs.GenericMath.Add(left, right));
                break;
            case System.Linq.Expressions.ExpressionType().Subtract:
                this.stack.Push(System.Runtime.WootzJs.GenericMath.Subtract(left, right));
                break;
            case System.Linq.Expressions.ExpressionType().Multiply:
                this.stack.Push(System.Runtime.WootzJs.GenericMath.Multiply(left, right));
                break;
            case System.Linq.Expressions.ExpressionType().Divide:
                this.stack.Push(System.Runtime.WootzJs.GenericMath.Divide(left, right));
                break;
            case System.Linq.Expressions.ExpressionType().Modulo:
                this.stack.Push(System.Runtime.WootzJs.GenericMath.Modulus(left, right));
                break;
            case System.Linq.Expressions.ExpressionType().ArrayIndex:
                var array = $cast(System.Object, left);
                var index = $cast(System.Object, System.Convert.ChangeType(right, System.Int64.$GetType()));
                var value = array.GetValue$1(index);
                this.stack.Push(value);
                break;
        }
        return node;
    };
    $p.VisitConditional = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitConditional.call(this, node);
        var ifFalse = this.stack.Pop();
        var ifTrue = this.stack.Pop();
        var test = $cast(System.Object, this.stack.Pop());
        this.stack.Push(test ? ifTrue : ifFalse);
        return node;
    };
    $p.VisitMember = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitMember.call(this, node);
        var obj = this.stack.Pop();
        var fieldInfo = (function() {
            var $as$ = node.get_Member();
            if (!System.Type.prototype.IsInstanceOfType.call(System.Reflection.FieldInfo.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (fieldInfo != null) {
            var field = fieldInfo;
            var value = field.GetValue(obj);
            this.stack.Push(value);
        }
        else {
            var property = $cast(System.Reflection.MemberInfo, node.get_Member());
            var value = property.GetValue$1(obj, null);
            this.stack.Push(value);
        }
        return node;
    };
    $p.VisitMethodCall = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitMethodCall.call(this, node);
        var args = System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Object, 
            node.get_Arguments(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(_) {
                return this.stack.Pop();
            })
        )));
        var obj = this.stack.Pop();
        var value = node.get_Method().Invoke(obj, args);
        this.stack.Push(value);
        return node;
    };
    $p.VisitNew = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitNew.call(this, node);
        var args = System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Object, 
            node.get_Arguments(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(_) {
                return this.stack.Pop();
            })
        )));
        var obj = node.get_Constructor().Invoke$2(args);
        this.stack.Push(obj);
        return node;
    };
    $p.VisitMemberInit = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberInit.call(this, node);
        var bindings = System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.MemberBinding, 
            System.Object, 
            node.get_Bindings(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.MemberBinding, System.Object), function(_) {
                return this.stack.Pop();
            })
        )));
        var obj = this.stack.Pop();
        for (var i = 0; i < node.get_Bindings().get_Count(); i++) {
            var binding = node.get_Bindings().get_Item(i);
            var fieldInfo = (function() {
                var $as$ = binding.get_Member();
                if (!System.Type.prototype.IsInstanceOfType.call(System.Reflection.FieldInfo.$GetType(), $as$))
                    $as$ = null;
                return $as$;
            }).call(this);
            if (fieldInfo != null) {
                fieldInfo.SetValue(obj, bindings[i]);
            }
            else {
                var propertyInfo = (function() {
                    var $as$ = binding.get_Member();
                    if (!System.Type.prototype.IsInstanceOfType.call(System.Reflection.PropertyInfo.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (propertyInfo != null) {
                    propertyInfo.SetValue$1(obj, bindings[i], null);
                }
            }
        }
        this.stack.Push(obj);
        return node;
    };
    $p.VisitListInit = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitListInit.call(this, node);
        var args = System.Linq.Enumerable.ToArray($array(System.Object), System.Linq.Enumerable.Reverse($array(System.Object), System.Linq.Enumerable.Select(
            System.Linq.Expressions.ElementInit, 
            $array(System.Object), 
            node.get_Initializers(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.ElementInit, $array(System.Object)), function(init) {
                return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
                    System.Linq.Expressions.Expression, 
                    System.Object, 
                    init.get_Arguments(), 
                    $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(_) {
                        return this.stack.Pop();
                    })
                )));
            })
        )));
        var list = this.stack.Pop();
        for (var i = 0; i < node.get_Initializers().get_Count(); i++) {
            var binding = node.get_Initializers().get_Item(i);
            var argument = args[i];
            binding.get_AddMethod().Invoke(list, argument);
        }
        this.stack.Push(list);
        return node;
    };
    $p.VisitUnary = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitUnary.call(this, node);
        var value = this.stack.Pop();
        switch (node.get_NodeType()) {
            case System.Linq.Expressions.ExpressionType().Not:
                this.stack.Push(!$cast(System.Object, value));
                break;
            case System.Linq.Expressions.ExpressionType().Convert:
                this.stack.Push(System.Convert.ChangeType(value, node.get_Type()));
                break;
            case System.Linq.Expressions.ExpressionType().TypeAs:
                this.stack.Push(node.get_Type().IsInstanceOfType(value) ? value : null);
                break;
        }
        return node;
    };
    $p.VisitInvocation = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitInvocation.call(this, node);
        var args = System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Object, 
            node.get_Arguments(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(_) {
                return this.stack.Pop();
            })
        )));
        var lambda = $cast(System.Object, this.stack.Pop());
        var value = lambda.DynamicInvoke(args);
        this.stack.Push(value);
        return node;
    };
    $p.VisitTypeBinary = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitTypeBinary.call(this, node);
        var expression = this.stack.Pop();
        var value = node.get_TypeOperand().IsInstanceOfType(expression);
        this.stack.Push(value);
        return node;
    };
    $p.VisitNewArray = function(node) {
        System.Linq.Expressions.ExpressionVisitor.prototype.VisitNewArray.call(this, node);
        var args = System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Reverse(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Object, 
            node.get_Expressions(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(_) {
                return this.stack.Pop();
            })
        )));
        var array = Array.CreateInstance(node.get_Type().GetElementType(), node.get_Expressions().get_Count());
        for (var i = 0; i < array.length; i++) {
            array.SetValue(args[i], i);
        }
        this.stack.Push(array);
        return node;
    };
    $p.VisitParameter = function(node) {
        var value = this.arguments.get_Item(node);
        this.stack.Push(value);
        return node;
    };
    $p.VisitLambda = function(T, node) {
        this.stack.Push(node.Compile$1());
        return node;
    };
}).call(null, System.Runtime.WootzJs.Evaluator, System.Runtime.WootzJs.Evaluator.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.Evaluator);
System.Runtime.WootzJs.EvaluatorExtensions = $define("System.Runtime.WootzJs.EvaluatorExtensions", System.Object);
(System.Runtime.WootzJs.EvaluatorExtensions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.EvaluatorExtensions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("EvaluatorExtensions", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.WootzJs.EvaluatorExtensions", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.EvaluatorExtensions, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Evaluate", System.Runtime.WootzJs.EvaluatorExtensions.prototype.Evaluate, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.Expression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ExtractArguments", System.Runtime.WootzJs.EvaluatorExtensions.prototype.ExtractArguments, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.InvocationExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Object), System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ExtractArguments", System.Runtime.WootzJs.EvaluatorExtensions.prototype.ExtractArguments$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("expression", System.Linq.Expressions.MethodCallExpression, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Collections.Generic.Dictionary$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.Evaluate = function(expression) {
        return System.Runtime.WootzJs.Evaluator.prototype.$ctor.$new(expression).Evaluate();
    };
    $t.ExtractArguments = function(expression) {
        return System.Linq.Enumerable.ToArray(System.Object, System.Linq.Enumerable.Select(
            System.Linq.Expressions.Expression, 
            System.Object, 
            expression.get_Arguments(), 
            $delegate(this, System.Func$2$(System.Linq.Expressions.Expression, System.Object), function(x) {
                return System.Runtime.WootzJs.EvaluatorExtensions.Evaluate(x);
            })
        ));
    };
    $t.ExtractArguments$1 = function(expression) {
        var parameters = expression.get_Method().GetParameters();
        return System.Linq.Enumerable.ToDictionary$1(
            $AnonymousType$1, 
            String, 
            System.Object, 
            System.Linq.Enumerable.Select$1(
                System.Linq.Expressions.Expression, 
                $AnonymousType$1, 
                expression.get_Arguments(), 
                $delegate(this, System.Func$3$(System.Linq.Expressions.Expression, System.Int32, $AnonymousType$1), function(x, i) {
                    return (function() {
                        var $obj$ = $AnonymousType$1.prototype.$ctor.$new();
                        $obj$.$Name$k__BackingField = parameters[i].get_Name();
                        $obj$.$Value$k__BackingField = System.Runtime.WootzJs.EvaluatorExtensions.Evaluate(x);
                        return $obj$;
                    }).call(this);
                })
            ), 
            $delegate(this, System.Func$2$($AnonymousType$1, String), function(x) {
                return x.get_Name();
            }), 
            $delegate(this, System.Func$2$($AnonymousType$1, System.Object), function(x) {
                return x.get_Value();
            })
        );
    };
}).call(null, System.Runtime.WootzJs.EvaluatorExtensions, System.Runtime.WootzJs.EvaluatorExtensions.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.EvaluatorExtensions);
System.Runtime.WootzJs.GenericMath = $define("System.Runtime.WootzJs.GenericMath", System.Object);
(System.Runtime.WootzJs.GenericMath.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.GenericMath";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("GenericMath", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.WootzJs.GenericMath", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.GenericMath, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("IsInteger", System.Runtime.WootzJs.GenericMath.prototype.IsInteger, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsBinaryFloat", System.Runtime.WootzJs.GenericMath.prototype.IsBinaryFloat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsDecimal", System.Runtime.WootzJs.GenericMath.prototype.IsDecimal, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetWidestType", System.Runtime.WootzJs.GenericMath.prototype.GetWidestType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type1", System.Type, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("type2", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.Runtime.WootzJs.GenericMath.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Subtract", System.Runtime.WootzJs.GenericMath.prototype.Subtract, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Multiply", System.Runtime.WootzJs.GenericMath.prototype.Multiply, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Divide", System.Runtime.WootzJs.GenericMath.prototype.Divide, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Modulus", System.Runtime.WootzJs.GenericMath.prototype.Modulus, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("left", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("right", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.GenericMath.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.IsInteger = function(type) {
        return type == System.Byte.$GetType() || type == System.Int16.$GetType() || type == System.Int32.$GetType() || type == System.Int64.$GetType();
    };
    $t.IsBinaryFloat = function(type) {
        return type == System.Single.$GetType() || type == System.Double.$GetType();
    };
    $t.IsDecimal = function(type) {
        return false;
    };
    $t.GetWidestType = function(type1, type2) {
        if (type1 == type2)
            return type1;
        if (System.Runtime.WootzJs.GenericMath.IsInteger(type1))
            return type2;
        if (System.Runtime.WootzJs.GenericMath.IsBinaryFloat(type1)) {
            if (!System.Runtime.WootzJs.GenericMath.IsDecimal(type2))
                return type1;
        }
        if (System.Runtime.WootzJs.GenericMath.IsDecimal(type1)) {
            if (!System.Runtime.WootzJs.GenericMath.IsBinaryFloat(type2))
                return type1;
        }
        throw System.InvalidOperationException.prototype.$ctor$1.$new("There is no implicit conversion between " + type1.get_FullName() + " and " + type2.get_FullName()).InternalInit(new Error());
    };
    $t.Add = function(left, right) {
        var widestType = System.Runtime.WootzJs.GenericMath.GetWidestType(left.GetType(), right.GetType());
        left = System.Convert.ChangeType(left, widestType);
        right = System.Convert.ChangeType(right, widestType);
        if (System.Byte.$GetType().IsInstanceOfType(left))
            return $cast(System.Object, left) + $cast(System.Object, right);
        else
            if (System.Int16.$GetType().IsInstanceOfType(left))
                return $cast(System.Object, left) + $cast(System.Object, right);
            else
                if (System.Int32.$GetType().IsInstanceOfType(left))
                    return $cast(System.Object, left) + $cast(System.Object, right);
                else
                    if (System.Int64.$GetType().IsInstanceOfType(left))
                        return $cast(System.Object, left) + $cast(System.Object, right);
                    else
                        if (System.Single.$GetType().IsInstanceOfType(left))
                            return $cast(System.Object, left) + $cast(System.Object, right);
                        else
                            if (System.Decimal.$GetType().IsInstanceOfType(left))
                                return $cast(System.Object, left) + $cast(System.Object, right);
                            else
                                return $cast(System.Object, left) + $cast(System.Object, right);
    };
    $t.Subtract = function(left, right) {
        var widestType = System.Runtime.WootzJs.GenericMath.GetWidestType(left.GetType(), right.GetType());
        left = System.Convert.ChangeType(left, widestType);
        right = System.Convert.ChangeType(right, widestType);
        if (System.Byte.$GetType().IsInstanceOfType(left))
            return $cast(System.Object, left) - $cast(System.Object, right);
        else
            if (System.Int16.$GetType().IsInstanceOfType(left))
                return $cast(System.Object, left) - $cast(System.Object, right);
            else
                if (System.Int32.$GetType().IsInstanceOfType(left))
                    return $cast(System.Object, left) - $cast(System.Object, right);
                else
                    if (System.Int64.$GetType().IsInstanceOfType(left))
                        return $cast(System.Object, left) - $cast(System.Object, right);
                    else
                        if (System.Single.$GetType().IsInstanceOfType(left))
                            return $cast(System.Object, left) - $cast(System.Object, right);
                        else
                            if (System.Decimal.$GetType().IsInstanceOfType(left))
                                return $cast(System.Object, left) - $cast(System.Object, right);
                            else
                                return $cast(System.Object, left) - $cast(System.Object, right);
    };
    $t.Multiply = function(left, right) {
        var widestType = System.Runtime.WootzJs.GenericMath.GetWidestType(left.GetType(), right.GetType());
        left = System.Convert.ChangeType(left, widestType);
        right = System.Convert.ChangeType(right, widestType);
        if (System.Byte.$GetType().IsInstanceOfType(left))
            return $cast(System.Object, left) * $cast(System.Object, right);
        else
            if (System.Int16.$GetType().IsInstanceOfType(left))
                return $cast(System.Object, left) * $cast(System.Object, right);
            else
                if (System.Int32.$GetType().IsInstanceOfType(left))
                    return $cast(System.Object, left) * $cast(System.Object, right);
                else
                    if (System.Int64.$GetType().IsInstanceOfType(left))
                        return $cast(System.Object, left) * $cast(System.Object, right);
                    else
                        if (System.Single.$GetType().IsInstanceOfType(left))
                            return $cast(System.Object, left) * $cast(System.Object, right);
                        else
                            if (System.Decimal.$GetType().IsInstanceOfType(left))
                                return $cast(System.Object, left) * $cast(System.Object, right);
                            else
                                return $cast(System.Object, left) * $cast(System.Object, right);
    };
    $t.Divide = function(left, right) {
        var widestType = System.Runtime.WootzJs.GenericMath.GetWidestType(left.GetType(), right.GetType());
        left = System.Convert.ChangeType(left, widestType);
        right = System.Convert.ChangeType(right, widestType);
        if (System.Byte.$GetType().IsInstanceOfType(left))
            return $cast(System.Object, left) / $cast(System.Object, right);
        else
            if (System.Int16.$GetType().IsInstanceOfType(left))
                return $cast(System.Object, left) / $cast(System.Object, right);
            else
                if (System.Int32.$GetType().IsInstanceOfType(left))
                    return $cast(System.Object, left) / $cast(System.Object, right);
                else
                    if (System.Int64.$GetType().IsInstanceOfType(left))
                        return $cast(System.Object, left) / $cast(System.Object, right);
                    else
                        if (System.Single.$GetType().IsInstanceOfType(left))
                            return $cast(System.Object, left) / $cast(System.Object, right);
                        else
                            if (System.Decimal.$GetType().IsInstanceOfType(left))
                                return $cast(System.Object, left) / $cast(System.Object, right);
                            else
                                return $cast(System.Object, left) / $cast(System.Object, right);
    };
    $t.Modulus = function(left, right) {
        var widestType = System.Runtime.WootzJs.GenericMath.GetWidestType(left.GetType(), right.GetType());
        left = System.Convert.ChangeType(left, widestType);
        right = System.Convert.ChangeType(right, widestType);
        if (System.Byte.$GetType().IsInstanceOfType(left))
            return $cast(System.Object, left) % $cast(System.Object, right);
        else
            if (System.Int16.$GetType().IsInstanceOfType(left))
                return $cast(System.Object, left) % $cast(System.Object, right);
            else
                if (System.Int32.$GetType().IsInstanceOfType(left))
                    return $cast(System.Object, left) % $cast(System.Object, right);
                else
                    if (System.Int64.$GetType().IsInstanceOfType(left))
                        return $cast(System.Object, left) % $cast(System.Object, right);
                    else
                        if (System.Single.$GetType().IsInstanceOfType(left))
                            return $cast(System.Object, left) % $cast(System.Object, right);
                        else
                            if (System.Decimal.$GetType().IsInstanceOfType(left))
                                return $cast(System.Object, left) % $cast(System.Object, right);
                            else
                                return $cast(System.Object, left) % $cast(System.Object, right);
    };
}).call(null, System.Runtime.WootzJs.GenericMath, System.Runtime.WootzJs.GenericMath.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.GenericMath);
System.Runtime.WootzJs.JsAttribute = $define("System.Runtime.WootzJs.JsAttribute", System.Attribute);
(System.Runtime.WootzJs.JsAttribute.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Attribute;
    $p.$typeName = "System.Runtime.WootzJs.JsAttribute";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("JsAttribute", $arrayinit([System.AttributeUsageAttribute.prototype.$ctor.$new(2556)], System.Attribute));this.$type.Init("System.Runtime.WootzJs.JsAttribute", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.JsAttribute, System.Attribute, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$Export$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Name$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$Extension$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$BuiltIn$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$BaseType$k__BackingField", System.Type, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$InvokeConstructorAsClass$k__BackingField", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Export", System.Runtime.WootzJs.JsAttribute.prototype.get_Export, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Export", System.Runtime.WootzJs.JsAttribute.prototype.set_Export, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Runtime.WootzJs.JsAttribute.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Runtime.WootzJs.JsAttribute.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Extension", System.Runtime.WootzJs.JsAttribute.prototype.get_Extension, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Extension", System.Runtime.WootzJs.JsAttribute.prototype.set_Extension, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.get_BuiltIn, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.set_BuiltIn, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Runtime.WootzJs.JsAttribute.prototype.get_BaseType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BaseType", System.Runtime.WootzJs.JsAttribute.prototype.set_BaseType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_InvokeConstructorAsClass", System.Runtime.WootzJs.JsAttribute.prototype.get_InvokeConstructorAsClass, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InvokeConstructorAsClass", System.Runtime.WootzJs.JsAttribute.prototype.set_InvokeConstructorAsClass, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.JsAttribute.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Export", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Export", System.Runtime.WootzJs.JsAttribute.prototype.get_Export, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Export", System.Runtime.WootzJs.JsAttribute.prototype.set_Export, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Name", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Name", System.Runtime.WootzJs.JsAttribute.prototype.get_Name, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Name", System.Runtime.WootzJs.JsAttribute.prototype.set_Name, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Extension", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Extension", System.Runtime.WootzJs.JsAttribute.prototype.get_Extension, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_Extension", System.Runtime.WootzJs.JsAttribute.prototype.set_Extension, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("BuiltIn", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.get_BuiltIn, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BuiltIn", System.Runtime.WootzJs.JsAttribute.prototype.set_BuiltIn, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("BaseType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Runtime.WootzJs.JsAttribute.prototype.get_BaseType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_BaseType", System.Runtime.WootzJs.JsAttribute.prototype.set_BaseType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("InvokeConstructorAsClass", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_InvokeConstructorAsClass", System.Runtime.WootzJs.JsAttribute.prototype.get_InvokeConstructorAsClass, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_InvokeConstructorAsClass", System.Runtime.WootzJs.JsAttribute.prototype.set_InvokeConstructorAsClass, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Boolean, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Attribute.$StaticInitializer();
    };
    $p.get_Export = function() {return this.$Export$k__BackingField;};
    $p.set_Export = function(value) {this.$Export$k__BackingField = value;return value;};
    $p.get_Name = function() {return this.$Name$k__BackingField;};
    $p.set_Name = function(value) {this.$Name$k__BackingField = value;return value;};
    $p.get_Extension = function() {return this.$Extension$k__BackingField;};
    $p.set_Extension = function(value) {this.$Extension$k__BackingField = value;return value;};
    $p.get_BuiltIn = function() {return this.$BuiltIn$k__BackingField;};
    $p.set_BuiltIn = function(value) {this.$BuiltIn$k__BackingField = value;return value;};
    $p.get_BaseType = function() {return this.$BaseType$k__BackingField;};
    $p.set_BaseType = function(value) {this.$BaseType$k__BackingField = value;return value;};
    $p.get_InvokeConstructorAsClass = function() {return this.$InvokeConstructorAsClass$k__BackingField;};
    $p.set_InvokeConstructorAsClass = function(value) {this.$InvokeConstructorAsClass$k__BackingField = value;return value;};
    $p.$ctor = function() {
        this.$Export$k__BackingField = false;
        this.$Name$k__BackingField = null;
        this.$Extension$k__BackingField = false;
        this.$BuiltIn$k__BackingField = false;
        this.$BaseType$k__BackingField = null;
        this.$InvokeConstructorAsClass$k__BackingField = false;
        System.Attribute.prototype.$ctor.call(this);
        this.set_Export(true);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.WootzJs.JsAttribute, System.Runtime.WootzJs.JsAttribute.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.JsAttribute);
System.Runtime.WootzJs.JsObjectConverter = $define("System.Runtime.WootzJs.JsObjectConverter", System.Object);
(System.Runtime.WootzJs.JsObjectConverter.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.JsObjectConverter";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("JsObjectConverter", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.WootzJs.JsObjectConverter", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.JsObjectConverter, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("ToJsonObject", System.Runtime.WootzJs.JsObjectConverter.prototype.ToJsonObject, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Object, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("FromJsonObject", System.Runtime.WootzJs.JsObjectConverter.prototype.FromJsonObject, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("o", Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.ToJsonObject = function(o) {
        var result = new Object();
        {
            var $anon$1iterator = o.GetType().GetProperties();
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var property = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                result[property.get_Name()] = property.GetValue$1(o, null);
            }
        }
        return result;
    };
    $t.FromJsonObject = function(T, o) {
        var result = T.prototype.$ctor.$new();
        var properties = System.Linq.Enumerable.ToDictionary(
            System.Reflection.PropertyInfo, 
            String, 
            T.$GetType().GetProperties(), 
            $delegate(this, System.Func$2$(System.Reflection.PropertyInfo, String), function(x) {
                return x.get_Name().toUpperCase();
            })
        );
        {
            for (var propertyName in o) {
                var value = o[propertyName];
                var property;
                if ((function() {
                    var $anon$1 = {
                        value: null
                    };
                    var $result$ = properties.TryGetValue(propertyName.toUpperCase(), $anon$1);
                    property = $anon$1.value;
                    return $result$;
                }).call(this)) {
                    property.SetValue$1(result, value, null);
                }
            }
        }
        return result;
    };
}).call(null, System.Runtime.WootzJs.JsObjectConverter, System.Runtime.WootzJs.JsObjectConverter.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.JsObjectConverter);
System.Runtime.WootzJs.SpecialNames = $define("System.Runtime.WootzJs.SpecialNames", System.Object);
(System.Runtime.WootzJs.SpecialNames.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Runtime.WootzJs.SpecialNames";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("SpecialNames", $arrayinit([], System.Attribute));this.$type.Init("System.Runtime.WootzJs.SpecialNames", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Runtime.WootzJs.SpecialNames, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializerTypeFunction", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$t", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializerPrototype", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$p", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GetTypeFromType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$GetType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeField", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$type", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeName", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$typeName", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ClassTypeArguments", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$typeParameters", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeInitializer", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$TypeInitializer", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("StaticInitializer", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$StaticInitializer", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("IsStaticInitialized", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$isStaticInitialized", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MakeGenericType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MakeGenericTypeConstructor", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$generic", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MakeArrayType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$array", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("BaseType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$baseType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ArrayType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$arrayType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CreateType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$CreateType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("GetAssembly", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$GetAssembly", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Assemblies", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$assemblies", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("New", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$new", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Define", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$define", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InitializeArray", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$arrayinit", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ElementType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$elementType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SafeToString", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$safeToString", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Truncate", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$trunc", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UnconstructedType", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$unconstructedType", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TypeCache", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$typecache", $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DefaultOf", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), "$default", $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Runtime.WootzJs.SpecialNames.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.TypeInitializerTypeFunction = "$t";
        $t.TypeInitializerPrototype = "$p";
        $t.GetTypeFromType = "$GetType";
        $t.TypeField = "$type";
        $t.TypeName = "$typeName";
        $t.ClassTypeArguments = "$typeParameters";
        $t.TypeInitializer = "$TypeInitializer";
        $t.StaticInitializer = "$StaticInitializer";
        $t.IsStaticInitialized = "$isStaticInitialized";
        $t.MakeGenericType = "$";
        $t.MakeGenericTypeConstructor = "$generic";
        $t.MakeArrayType = "$array";
        $t.BaseType = "$baseType";
        $t.ArrayType = "$arrayType";
        $t.CreateType = "$CreateType";
        $t.GetAssembly = "$GetAssembly";
        $t.Assemblies = "$assemblies";
        $t.New = "$new";
        $t.Define = "$define";
        $t.InitializeArray = "$arrayinit";
        $t.ElementType = "$elementType";
        $t.SafeToString = "$safeToString";
        $t.Truncate = "$trunc";
        $t.UnconstructedType = "$unconstructedType";
        $t.TypeCache = "$typecache";
        $t.DefaultOf = "$default";
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Runtime.WootzJs.SpecialNames, System.Runtime.WootzJs.SpecialNames.prototype);
$mscorlib$AssemblyTypes.push(System.Runtime.WootzJs.SpecialNames);
System.SByte = $define("sbyte", System.ValueType);
(System.SByte.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.SByte";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("SByte", $arrayinit([], System.Attribute));this.$type.Init("System.SByte", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.SByte, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Format", System.SByte.prototype.Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("LocaleFormat", System.SByte.prototype.LocaleFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.SByte.prototype.ToString$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("radix", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.SByte.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.SByte, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.SByte.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.Format = function(format) {
        return null;
    };
    $p.LocaleFormat = function(format) {
        return null;
    };
    $p.ToString$1 = function(radix) {
        return null;
    };
    $t.op_Implicit = function(i) {
        return null;
    };
}).call(null, System.SByte, System.SByte.prototype);
$mscorlib$AssemblyTypes.push(System.SByte);
System.Single = $define("float", System.ValueType);
(System.Single.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Single";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Single", $arrayinit([], System.Attribute));this.$type.Init("System.Single", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Single, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("Parse", System.Single.prototype.Parse, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Single, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.Single.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.Single, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsNaN", System.Single.prototype.IsNaN, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Single.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.Parse = function(s) {
        return parseFloat(s);
    };
    $t.op_Implicit = function(i) {
        return i;
    };
    $t.IsNaN = function(value) {
        return value == Number().NaN;
    };
}).call(null, System.Single, System.Single.prototype);
$mscorlib$AssemblyTypes.push(System.Single);
(String.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.String";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("String", $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("String");$obj$.set_BuiltIn(true);return $obj$;}).call(this)], System.Attribute));this.$type.Init("String", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), String, System.Object, $arrayinit([System.IEquatable$1, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable, System.IComparable$1, System.IComparable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", String, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", String.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", String.prototype.GetType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Name("GetType");return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Chars", String.prototype.get_Chars, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Char, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Length", String.prototype.get_Length, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EndsWith", String.prototype.EndsWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("suffix", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("StartsWith", String.prototype.StartsWith, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("prefix", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", String.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("strA", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("strB", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", String.prototype.Compare$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("strA", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("strB", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparisonType", System.StringComparison, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Substring", String.prototype.Substring, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 1, System.Reflection.ParameterAttributes().HasDefault, 0, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(System.Char), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(System.Char), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("EscapeRegex", String.prototype.EscapeRegex, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(System.Char), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(System.Char), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(String), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Split", String.prototype.Split$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", $array(String), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("count", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("options", System.StringSplitOptions, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Join", String.prototype.Join, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", $array(String), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([(function() {var $obj$ = System.Runtime.WootzJs.JsAttribute.prototype.$ctor.$new();$obj$.set_Extension(true);return $obj$;}).call(this)], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Join", String.prototype.Join$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Collections.Generic.IEnumerable$1$(T), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("InternalJoin", String.prototype.InternalJoin, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("separator", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", $array(String), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", String.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", String.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", String.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsNullOrEmpty", String.prototype.IsNullOrEmpty, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", System.Object, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ConcatArray", String.prototype.ConcatArray, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("values", $array(String), 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("totalLength", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$9, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Collections.Generic.IEnumerable$1$(T), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("values", System.Collections.Generic.IEnumerable$1$(String), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str2", String, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$8, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("str0", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str1", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str2", String, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("str3", String, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Concat", String.prototype.Concat$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("values", $array(String), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", String.prototype.Format, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Format", String.prototype.Format$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IEnumerable.GetEnumerator", String.prototype.System$Collections$IEnumerable$GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.IEnumerator, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", String.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Contains", String.prototype.Contains, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("part", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", String.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", String.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", String.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", String.prototype.Equals$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparisonType", System.StringComparison, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Trim", String.prototype.Trim, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("this[]", System.Char, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Chars", String.prototype.get_Chars, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Char, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("index", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $arrayinit([System.Runtime.CompilerServices.IndexerNameAttribute.prototype.$ctor.$new("Chars")], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
        $t.Empty = String.Empty;
    };
    $p.$ctor = function(s) {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(s) {
        return new $p.$ctor.$type();
    };
    $p.GetType = function() {
        return System.Object.prototype.GetType.call(this);
    };
    $p.get_Chars = function(index) {
        return this.charAt(index);
    };
    $p.EndsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) != -1;
    };
    $p.StartsWith = function(prefix) {
        return this.indexOf(prefix) == 0;
    };
    $t.Compare = function(strA, strB) {
        if (strA < strB)
            return -1;
        if (strA > strB)
            return 1;
        return 0;
    };
    $t.Compare$1 = function(strA, strB, comparisonType) {
        if (comparisonType.GetValue() > 5)
            throw System.ArgumentException.prototype.$ctor$1.$new("NotSupported_StringComparison").InternalInit(new Error());
        if (strA == strB)
            return 0;
        if (strA == null)
            return -1;
        if (strB == null)
            return 1;
        switch (comparisonType) {
            case System.StringComparison().CurrentCulture:
                return System.Globalization.CultureInfo().CurrentCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().None);
            case System.StringComparison().CurrentCultureIgnoreCase:
                return System.Globalization.CultureInfo().CurrentCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().InvariantCulture:
                return System.Globalization.CultureInfo().InvariantCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().None);
            case System.StringComparison().InvariantCultureIgnoreCase:
                return System.Globalization.CultureInfo().InvariantCulture.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().Ordinal:
                return System.Globalization.CultureInfo().Ordinal.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            case System.StringComparison().OrdinalIgnoreCase:
                return System.Globalization.CultureInfo().OrdinalIgnoreCase.get_CompareInfo().Compare$1(strA, strB, System.Globalization.CompareOptions().IgnoreCase);
            default:
                throw System.NotSupportedException.prototype.$ctor$1.$new("NotSupported_StringComparison").InternalInit(new Error());
        }
    };
    $p.Substring = function(startIndex, length) {
        var s = this;
        if (length == 0)
            return s.substring(startIndex);
        else
            return s.substring(startIndex, startIndex + length);
    };
    $p.Split = function(separator) {
        var s = this;
        var stringSeparator = $arrayinit(new Array(separator.length), System.Char);
        for (var i = 0; i < separator.length; i++) {
            stringSeparator[i] = separator[i];
        }
        var array = s.split(new RegExp(String.Join$1(String, "|", System.Linq.Enumerable.Select(
            System.Char, 
            String, 
            stringSeparator, 
            $delegate(this, System.Func$2$(System.Char, String), function(x) {
                return this.EscapeRegex(x);
            })
        ))));
        return array;
    };
    $p.Split$2 = function(separator, count) {
        var s = this;
        var stringSeparator = $arrayinit(new Array(separator.length), System.Char);
        for (var i = 0; i < separator.length; i++) {
            stringSeparator[i] = separator[i];
        }
        var array = s.split(new RegExp(String.Join$1(String, "|", System.Linq.Enumerable.Select(
            System.Char, 
            String, 
            stringSeparator, 
            $delegate(this, System.Func$2$(System.Char, String), function(x) {
                return this.EscapeRegex(x);
            })
        ))), count);
        return array;
    };
    $p.EscapeRegex = function(c) {
        switch (c) {
            case "?":
                return "\\?";
        }
        return c.ToString();
    };
    $p.Split$1 = function(separator, options) {
        return null;
    };
    $p.Split$4 = function(separator, count, options) {
        return null;
    };
    $p.Split$3 = function(separator, options) {
        return String.prototype.Split$5.call(
            this, 
            separator, 
            System.Int32.MaxValue, 
            options
        );
    };
    $p.Split$5 = function(separator, count, options) {
        return null;
    };
    $t.Join = function(separator, value) {
        return String.InternalJoin(separator, value);
    };
    $t.Join$1 = function(T, separator, values) {
        return String.InternalJoin(separator, System.Linq.Enumerable.ToArray(String, System.Linq.Enumerable.Select(
            T, 
            String, 
            values, 
            $delegate(this, System.Func$2$(T, String), function(x) {
                return x.ToString();
            })
        )));
    };
    $t.InternalJoin = function(separator, value) {
        var array = value;
        return array.join(separator);
    };
    $p.Equals = function(obj) {
        return this == obj;
    };
    $p.GetHashCode = function() {
        var result = this.$hashCode;
        if (result == null) {
            var hash = 0;
            for (var i = 0; i < this.length; i++) {
                var character = this.charCodeAt(i);
                hash = ((hash << 5) - hash) + character;
                hash = hash & hash;
            }
            result = hash;
            this.$hashCode = result;
        }
        return result;
    };
    $p.ToString = function() {
        return this;
    };
    $t.IsNullOrEmpty = function(s) {
        return s == null || s == "";
        ;
    };
    $t.Concat$1 = function(arg0) {
        if (arg0 == null)
            return String.Empty;
        else
            return arg0.ToString();
    };
    $t.Concat$4 = function(arg0, arg1) {
        if (arg0 == null)
            arg0 = String.Empty;
        if (arg1 == null)
            arg1 = String.Empty;
        return arg0.ToString() + $safeToString(arg1);
    };
    $t.Concat$6 = function(arg0, arg1, arg2) {
        if (arg0 == null)
            arg0 = String.Empty;
        if (arg1 == null)
            arg1 = String.Empty;
        if (arg2 == null)
            arg2 = String.Empty;
        return arg0.ToString() + $safeToString(arg1) + $safeToString(arg2);
    };
    $t.Concat$2 = function(args) {
        if (args == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("args").InternalInit(new Error());
        var values = $arrayinit(new Array(args.length), String);
        var totalLength = 0;
        for (var index = 0; index < args.length; ++index) {
            var obj = args[index];
            values[index] = obj == null ? String.Empty : obj.ToString();
            if (values[index] == null)
                values[index] = String.Empty;
            totalLength += values[index].length;
            if (totalLength < 0)
                throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
        }
        return String.ConcatArray(values, totalLength);
    };
    $t.ConcatArray = function(values, totalLength) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                s += item;
            }
        }
        return s;
    };
    $t.Concat$9 = function(T, values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                s += item.ToString();
            }
        }
        return s;
    };
    $t.Concat = function(values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                s += item;
            }
        }
        return s;
    };
    $t.Concat$5 = function(str0, str1) {
        return str0 + str1;
    };
    $t.Concat$7 = function(str0, str1, str2) {
        if (str0 == null && str1 == null && str2 == null)
            return String.Empty;
        if (str0 == null)
            str0 = String.Empty;
        if (str1 == null)
            str1 = String.Empty;
        if (str2 == null)
            str2 = String.Empty;
        return str0 + str1 + str2;
    };
    $t.Concat$8 = function(str0, str1, str2, str3) {
        if (str0 == null && str1 == null && (str2 == null && str3 == null))
            return String.Empty;
        if (str0 == null)
            str0 = String.Empty;
        if (str1 == null)
            str1 = String.Empty;
        if (str2 == null)
            str2 = String.Empty;
        if (str3 == null)
            str3 = String.Empty;
        return str0 + str1 + str2 + str3;
    };
    $t.Concat$3 = function(values) {
        var s = "";
        {
            var $anon$1iterator = values;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                s += item;
            }
        }
        return s;
    };
    $t.Format = function(format, args) {
        if (format == null || args == null)
            throw System.ArgumentNullException.prototype.$ctor.$new(format == null ? "format" : "args").InternalInit(new Error());
        else
            return String.Format$1(null, format, args);
    };
    $t.Format$1 = function(provider, format, args) {
        if (format == null || args == null)
            throw System.ArgumentNullException.prototype.$ctor.$new(format == null ? "format" : "args").InternalInit(new Error());
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.AppendFormat$2(provider, format, args);
        return sb.ToString();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = function() {
        return this.GetEnumerator();
    };
    $p.System$Collections$IEnumerable$GetEnumerator = $p.System$Collections$IEnumerable$GetEnumerator;
    $p.GetEnumerator = function() {
        return String.YieldEnumerator$GetEnumerator.prototype.$ctor.$new(this);
    };
    $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
    $p.Contains = function(part) {
        return part.indexOf(part) != -1;
    };
    $p.CompareTo = function(obj) {
        return String.Compare(this, $cast(System.Object, obj));
    };
    $p.System$IComparable$CompareTo = $p.CompareTo;
    $p.CompareTo$1 = function(other) {
        return String.Compare(this, other);
    };
    $p.System$IComparable$1$CompareTo = $p.CompareTo$1;
    $p.Equals$2 = function(other) {
        return this == other;
    };
    $p.System$IEquatable$1$Equals = $p.Equals$2;
    $p.Equals$3 = function(value, comparisonType) {
        switch (comparisonType) {
            case System.StringComparison().CurrentCultureIgnoreCase:
            case System.StringComparison().InvariantCultureIgnoreCase:
            case System.StringComparison().OrdinalIgnoreCase:
                return this.toUpperCase() == value.toUpperCase();
            default:
                return this == value;
        }
    };
    $p.Trim = function() {
        return this.trim();
    };
    $t.YieldEnumerator$GetEnumerator = $define("string.YieldEnumerator$GetEnumerator", System.YieldIterator$1);
    ($t.YieldEnumerator$GetEnumerator.$TypeInitializer = function($t, $p) {
        $t.$GetAssembly = window.$mscorlib$GetAssembly;
        $p.$type = $t;
        $t.$baseType = System.YieldIterator$1;
        $p.$typeName = "System.String.YieldEnumerator$GetEnumerator";
        $t.$typeName = $p.$typeName;
        $t.$GetType = function() {
            return System.Type._GetTypeFromTypeFunc(this);
        };
        $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("YieldEnumerator$GetEnumerator", $arrayinit([], System.Attribute));this.$type.Init("System.String.YieldEnumerator$GetEnumerator", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NestedPrivate.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), String.YieldEnumerator$GetEnumerator, System.YieldIterator$1, $arrayinit([System.Collections.Generic.IEnumerator$1, System.Collections.IEnumerator, System.IDisposable, System.Collections.Generic.IEnumerable$1, System.Collections.IEnumerable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("$this", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$isStarted", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$state", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("i", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumerator", String.YieldEnumerator$GetEnumerator.prototype.GetEnumerator, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerator$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MoveNext", String.YieldEnumerator$GetEnumerator.prototype.MoveNext, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Clone", String.YieldEnumerator$GetEnumerator.prototype.Clone, $arrayinit([], System.Reflection.ParameterInfo), System.Collections.Generic.IEnumerable$1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", String.YieldEnumerator$GetEnumerator.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("$this", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
        $t.$StaticInitializer = function() {
            if ($t.$isStaticInitialized)
                return;
            $t.$isStaticInitialized = true;
            System.YieldIterator$1$(System.Char).$StaticInitializer();
        };
        $p.$ctor = function($this) {
            this.$this = null;
            this.$isStarted = false;
            this.$state = 0;
            this.i = 0;
            System.YieldIterator$1$(System.Char).prototype.$ctor.call(this);
            this.$this = $this;
            this.$state = 1;
        };
        $p.$ctor.$type = $t;
        $p.$ctor.$new = function($this) {
            return new $p.$ctor.$type(this, $this);
        };
        $p.GetEnumerator = function() {
            var $isStartedLocal = this.$isStarted;
            this.$isStarted = true;
            if ($isStartedLocal)
                return this.Clone().System$Collections$Generic$IEnumerable$1$GetEnumerator();
            else
                return this;
        };
        $p.System$Collections$Generic$IEnumerable$1$GetEnumerator = $p.GetEnumerator;
        $p.MoveNext = function() {
            $top:
            while (true) {
                switch (this.$state) {
                    case 0:
                        return false;
                    case 1:
                        this.i = 0;
                        this.$state = 2;
                        continue $top;
                    case 2:
                        while (this.i < this.$this.length) {
                            this.$state = 3;
                            this.set_Current(this[this.i]);
                            return true;
                        }
                        this.$state = 0;
                        continue $top;
                    case 3:
                        this.i++;
                        this.$state = 2;
                        continue $top;
                }
            }
        };
        $p.System$Collections$IEnumerator$MoveNext = $p.MoveNext;
        $p.Clone = function() {
            {
                return String.YieldEnumerator$GetEnumerator.prototype.$ctor.$new(this.$this);
            }
        };
    }).call($t, $t.YieldEnumerator$GetEnumerator, $t.YieldEnumerator$GetEnumerator.prototype);
    $mscorlib$AssemblyTypes.push($t.YieldEnumerator$GetEnumerator);
}).call(null, String, String.prototype);
$mscorlib$AssemblyTypes.push(String);
System.StringComparison = $define("System.StringComparison", System.Enum);
(System.StringComparison.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.StringComparison";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringComparison", $arrayinit([], System.Attribute));this.$type.Init("System.StringComparison", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.StringComparison, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCulture", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("CurrentCultureIgnoreCase", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCulture", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("InvariantCultureIgnoreCase", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Ordinal", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("OrdinalIgnoreCase", System.StringComparison, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.StringComparison.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.CurrentCulture = $p.$ctor.$new("CurrentCulture", 0);
        $t.CurrentCultureIgnoreCase = $p.$ctor.$new("CurrentCultureIgnoreCase", System.StringComparison().CurrentCulture + 1);
        $t.InvariantCulture = $p.$ctor.$new("InvariantCulture", System.StringComparison().CurrentCultureIgnoreCase + 1);
        $t.InvariantCultureIgnoreCase = $p.$ctor.$new("InvariantCultureIgnoreCase", System.StringComparison().InvariantCulture + 1);
        $t.Ordinal = $p.$ctor.$new("Ordinal", System.StringComparison().InvariantCultureIgnoreCase + 1);
        $t.OrdinalIgnoreCase = $p.$ctor.$new("OrdinalIgnoreCase", System.StringComparison().Ordinal + 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.StringComparison, System.StringComparison.prototype);
$mscorlib$AssemblyTypes.push(System.StringComparison);
System.StringSplitOptions = $define("System.StringSplitOptions", System.Enum);
(System.StringSplitOptions.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.StringSplitOptions";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringSplitOptions", $arrayinit([System.FlagsAttribute.prototype.$ctor.$new()], System.Attribute));this.$type.Init("System.StringSplitOptions", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.StringSplitOptions, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("None", System.StringSplitOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("RemoveEmptyEntries", System.StringSplitOptions, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.StringSplitOptions.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.None = $p.$ctor.$new("None", 0);
        $t.RemoveEmptyEntries = $p.$ctor.$new("RemoveEmptyEntries", 1);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.StringSplitOptions, System.StringSplitOptions.prototype);
$mscorlib$AssemblyTypes.push(System.StringSplitOptions);
System.Text.StringBuilder = $define("System.Text.StringBuilder", System.Object);
(System.Text.StringBuilder.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Text.StringBuilder";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("StringBuilder", $arrayinit([], System.Attribute));this.$type.Init("System.Text.StringBuilder", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Text.StringBuilder, System.Object, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("length", System.Int32, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Length", System.Text.StringBuilder.prototype.get_Length, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine", System.Text.StringBuilder.prototype.AppendLine, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine", System.Text.StringBuilder.prototype.AppendLine$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("c", System.Char, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendLine", System.Text.StringBuilder.prototype.AppendLine$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("startIndex", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("length", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendFormat", System.Text.StringBuilder.prototype.AppendFormat$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendFormat", System.Text.StringBuilder.prototype.AppendFormat$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendFormat", System.Text.StringBuilder.prototype.AppendFormat, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendFormat", System.Text.StringBuilder.prototype.AppendFormat$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("AppendFormat", System.Text.StringBuilder.prototype.AppendFormat$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg0", System.Object, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg1", System.Object, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("arg2", System.Object, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FormatHelper", System.Text.StringBuilder.prototype.FormatHelper, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("result", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("provider", System.IFormatProvider, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("args", $array(System.Object), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Append", System.Text.StringBuilder.prototype.Append$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Char, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("repeatCount", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Text.StringBuilder, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseFormatSpecifier", System.Text.StringBuilder.prototype.ParseFormatSpecifier, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("str", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ptr", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("n", System.Int32, 2, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("width", System.Int32, 3, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("left_align", System.Boolean, 4, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("format", String, 5, System.Reflection.ParameterAttributes().Out, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ParseDecimal", System.Text.StringBuilder.prototype.ParseDecimal, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("str", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("ptr", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Text.StringBuilder.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Text.StringBuilder.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.Text.StringBuilder.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("initialText", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Length", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Length", System.Text.StringBuilder.prototype.get_Length, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        this.chunks = new Array();
        this.length = 0;
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $p.$ctor$1 = function(initialText) {
        this.chunks = new Array();
        this.length = 0;
        System.Object.prototype.$ctor.call(this);
        this.Append$2(initialText);
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(initialText) {
        return new $p.$ctor$1.$type(this, initialText);
    };
    $p.get_Length = function() {
        return this.length;
    };
    $p.Append = function(c) {
        this.Append$2(c);
    };
    $p.Append$2 = function(s) {
        this.chunks.push(s);
        this.length += s.length;
    };
    $p.Append$1 = function(o) {
        if (o != null) {
            var s = o.ToString();
            this.Append$2(s);
        }
    };
    $p.AppendLine = function() {
        this.Append$2("\n");
    };
    $p.AppendLine$1 = function(c) {
        this.Append(c);
        this.AppendLine();
    };
    $p.AppendLine$2 = function(s) {
        this.Append$2(s);
        this.AppendLine();
    };
    $p.Append$4 = function(value, startIndex, length) {
        this.Append$2(String.prototype.Substring.call(value, startIndex, length));
    };
    $p.AppendFormat$1 = function(format, args) {
        return this.AppendFormat$2(null, format, args);
    };
    $p.AppendFormat$2 = function(provider, format, args) {
        System.Text.StringBuilder.FormatHelper(
            this, 
            provider, 
            format, 
            args
        );
        return this;
    };
    $p.AppendFormat = function(format, arg0) {
        return this.AppendFormat$2(null, format, $arrayinit([arg0], System.Object));
    };
    $p.AppendFormat$3 = function(format, arg0, arg1) {
        return this.AppendFormat$2(null, format, $arrayinit([arg0, arg1], System.Object));
    };
    $p.AppendFormat$4 = function(format, arg0, arg1, arg2) {
        return this.AppendFormat$2(null, format, $arrayinit([arg0, arg1, arg2], System.Object));
    };
    $t.FormatHelper = function(result, provider, format, args) {
        if (format == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("format").InternalInit(new Error());
        if (args == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("args").InternalInit(new Error());
        if (result == null) {
            var i, len;
            len = 0;
            for (i = 0; i < args.length; ++i) {
                var s = (function() {
                    var $as$ = args[i];
                    if (!System.Type.prototype.IsInstanceOfType.call(String.$GetType(), $as$))
                        $as$ = null;
                    return $as$;
                }).call(this);
                if (s != null)
                    len += s.length;
                else
                    break;
            }
            result = System.Text.StringBuilder.prototype.$ctor.$new();
        }
        var ptr = 0;
        var start = ptr;
        var formatter = provider != null ? (function() {
            var $as$ = provider.System$IFormatProvider$GetFormat(System.ICustomFormatter.$GetType());
            if (!System.Type.prototype.IsInstanceOfType.call(System.ICustomFormatter.$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this) : null;
        while (ptr < format.length) {
            var c = format.get_Chars(ptr++);
            if (c == "{") {
                result.Append$4(format, start, ptr - start - 1);
                if (format.get_Chars(ptr) == "{") {
                    start = ptr++;
                    continue;
                }
                var n, width;
                var left_align;
                var arg_format;
                (function() {
                    var $anon$1 = {
                        value: ptr
                    };
                    var $anon$2 = {
                        value: null
                    };
                    var $anon$3 = {
                        value: null
                    };
                    var $anon$4 = {
                        value: null
                    };
                    var $anon$5 = {
                        value: null
                    };
                    var $result$ = System.Text.StringBuilder.ParseFormatSpecifier(
                        format, 
                        $anon$1, 
                        $anon$2, 
                        $anon$3, 
                        $anon$4, 
                        $anon$5
                    );
                    ptr = $anon$1.value;
                    n = $anon$2.value;
                    width = $anon$3.value;
                    left_align = $anon$4.value;
                    arg_format = $anon$5.value;
                    return $result$;
                }).call(this);
                if (n >= args.length)
                    throw System.FormatException.prototype.$ctor$1.$new("Index (zero based) must be greater than or equal to zero and less than the size of the argument list.").InternalInit(new Error());
                var arg = args[n];
                var str;
                if (arg == null)
                    str = "";
                else
                    if (formatter != null)
                        str = formatter.System$ICustomFormatter$Format(arg_format, arg, provider);
                    else
                        str = null;
                if (str == null) {
                    if (System.IFormattable.$GetType().IsInstanceOfType(arg))
                        str = ($cast(System.Object, arg)).System$IFormattable$ToString(arg_format, provider);
                    else
                        str = arg.ToString();
                }
                if (width > str.length) {
                    var padchar = " ";
                    var padlen = width - str.length;
                    if (left_align) {
                        result.Append$2(str);
                        result.Append$3(padchar, padlen);
                    }
                    else {
                        result.Append$3(padchar, padlen);
                        result.Append$2(str);
                    }
                }
                else {
                    result.Append$2(str);
                }
                start = ptr;
            }
            else
                if (c == "}" && ptr < format.length && format.get_Chars(ptr) == "}") {
                    result.Append$4(format, start, ptr - start - 1);
                    start = ptr++;
                }
                else
                    if (c == "}") {
                        throw System.FormatException.prototype.$ctor$1.$new("Input string was not in a correct format.").InternalInit(new Error());
                    }
        }
        if (start < format.length)
            result.Append$4(format, start, format.length - start);
        return result;
    };
    $p.Append$3 = function(value, repeatCount) {
        if (repeatCount < 0)
            throw System.ArgumentOutOfRangeException.prototype.$ctor.$new().InternalInit(new Error());
        for (var i = 0; i < repeatCount; i++) {
            this.Append(value);
        }
        return this;
    };
    $t.ParseFormatSpecifier = function(str, ptr, n, width, left_align, format) {
        var max = str.length;
        n.value = (function() {
            var $anon$1 = {
                value: ptr.value
            };
            var $result$ = System.Text.StringBuilder.ParseDecimal(str, $anon$1);
            ptr.value = $anon$1.value;
            return $result$;
        }).call(this);
        if (n.value < 0)
            throw System.FormatException.prototype.$ctor$1.$new("Input string was not in a correct format.").InternalInit(new Error());
        if (ptr.value < max && str.get_Chars(ptr.value) == ",") {
            ++ptr.value;
            while (ptr.value < max && System.Char.IsWhiteSpace(str.get_Chars(ptr.value))) {
                ++ptr.value;
            }
            var start = ptr.value;
            format.value = String.prototype.Substring.call(str, start, ptr.value - start);
            left_align.value = (ptr.value < max && str.get_Chars(ptr.value) == "-");
            if (left_align.value)
                ++ptr.value;
            width.value = (function() {
                var $anon$2 = {
                    value: ptr.value
                };
                var $result$ = System.Text.StringBuilder.ParseDecimal(str, $anon$2);
                ptr.value = $anon$2.value;
                return $result$;
            }).call(this);
            if (width.value < 0)
                throw System.FormatException.prototype.$ctor$1.$new("Input string was not in a correct format.").InternalInit(new Error());
        }
        else {
            width.value = 0;
            left_align.value = false;
            format.value = "";
        }
        if (ptr.value < max && str.get_Chars(ptr.value) == ":") {
            var start = ++ptr.value;
            while (ptr.value < max && str.get_Chars(ptr.value) != "}") {
                ++ptr.value;
            }
            format.value += String.prototype.Substring.call(str, start, ptr.value - start);
        }
        else
            format.value = null;
        if ((ptr.value >= max) || str.get_Chars(ptr.value++) != "}")
            throw System.FormatException.prototype.$ctor$1.$new("Input string was not in a correct format.").InternalInit(new Error());
    };
    $t.ParseDecimal = function(str, ptr) {
        var p = ptr.value;
        var n = 0;
        var max = str.length;
        while (p < max) {
            var c = str.get_Chars(p);
            if (c.charCodeAt(0) < "0".charCodeAt(0) || "9".charCodeAt(0) < c.charCodeAt(0))
                break;
            n = n * 10 + c.charCodeAt(0) - "0".charCodeAt(0);
            ++p;
        }
        if (p == ptr.value || p == max)
            return -1;
        ptr.value = p;
        return n;
    };
    $p.ToString = function() {
        return this.chunks.join("");
    };
}).call(null, System.Text.StringBuilder, System.Text.StringBuilder.prototype);
$mscorlib$AssemblyTypes.push(System.Text.StringBuilder);
System.Threading.Interlocked = $define("System.Threading.Interlocked", System.Object);
(System.Threading.Interlocked.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Threading.Interlocked";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Interlocked", $arrayinit([], System.Attribute));this.$type.Init("System.Threading.Interlocked", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Threading.Interlocked, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([(function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("CompareExchange", System.Threading.Interlocked.prototype.CompareExchange, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("location1", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparand", T, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T = $definetypeparameter("T", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Exchange", System.Threading.Interlocked.prototype.Exchange, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("location1", T, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("value", T, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), T, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this)], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Threading.Interlocked.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.Object.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.CompareExchange = function(T, location1, value, comparand) {
        var oldValue = location1.value;
        if (System.Collections.Generic.EqualityComparer$1$(T).get_Default().Equals$2(location1.value, comparand))
            location1.value = value;
        return oldValue;
    };
    $t.Exchange = function(T, location1, value) {
        var oldValue = location1.value;
        location1.value = value;
        return oldValue;
    };
}).call(null, System.Threading.Interlocked, System.Threading.Interlocked.prototype);
$mscorlib$AssemblyTypes.push(System.Threading.Interlocked);
System.TimeSpan = $define("System.TimeSpan", System.ValueType);
(System.TimeSpan.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.TimeSpan";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("TimeSpan", $arrayinit([], System.Attribute));this.$type.Init("System.TimeSpan", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.TimeSpan, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Zero", System.TimeSpan, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MaxValue", System.TimeSpan, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MinValue", System.TimeSpan, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TicksPerMillisecond", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 10000, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TicksPerSecond", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1E+07, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TicksPerMinute", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6E+08, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TicksPerHour", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3.6E+10, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("TicksPerDay", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8.64E+11, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("HoursPerDay", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 24, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MinutesPerHour", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 60, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SecondsPerMinute", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 60, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("MillisecondsPerSecond", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1000, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("ticks", System.Int64, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Assembly.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.TimeSpan.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromTicks", System.TimeSpan.prototype.FromTicks, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Int64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromSeconds", System.TimeSpan.prototype.FromSeconds, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromHours", System.TimeSpan.prototype.FromHours, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromDays", System.TimeSpan.prototype.FromDays, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromMilliseconds", System.TimeSpan.prototype.FromMilliseconds, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("FromMinutes", System.TimeSpan.prototype.FromMinutes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Double, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Ticks", System.TimeSpan.prototype.get_Ticks, $arrayinit([], System.Reflection.ParameterInfo), System.Int64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Days", System.TimeSpan.prototype.get_Days, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Hours", System.TimeSpan.prototype.get_Hours, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Milliseconds", System.TimeSpan.prototype.get_Milliseconds, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Minutes", System.TimeSpan.prototype.get_Minutes, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Seconds", System.TimeSpan.prototype.get_Seconds, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalDays", System.TimeSpan.prototype.get_TotalDays, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalHours", System.TimeSpan.prototype.get_TotalHours, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalMilliseconds", System.TimeSpan.prototype.get_TotalMilliseconds, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalMinutes", System.TimeSpan.prototype.get_TotalMinutes, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalSeconds", System.TimeSpan.prototype.get_TotalSeconds, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Add", System.TimeSpan.prototype.Add, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("ts", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Subtract", System.TimeSpan.prototype.Subtract, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("ts", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.TimeSpan.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.TimeSpan.prototype.Equals$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.TimeSpan.prototype.Equals$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.TimeSpan.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Duration", System.TimeSpan.prototype.Duration, $arrayinit([], System.Reflection.ParameterInfo), System.TimeSpan, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.TimeSpan.prototype.CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CompareTo", System.TimeSpan.prototype.CompareTo$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Compare", System.TimeSpan.prototype.Compare, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_UnaryNegation", System.TimeSpan.prototype.op_UnaryNegation, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Subtraction", System.TimeSpan.prototype.op_Subtraction, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_UnaryPlus", System.TimeSpan.prototype.op_UnaryPlus, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Addition", System.TimeSpan.prototype.op_Addition, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.TimeSpan, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Equality", System.TimeSpan.prototype.op_Equality, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_Inequality", System.TimeSpan.prototype.op_Inequality, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_LessThan", System.TimeSpan.prototype.op_LessThan, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_LessThanOrEqual", System.TimeSpan.prototype.op_LessThanOrEqual, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_GreaterThan", System.TimeSpan.prototype.op_GreaterThan, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("op_GreaterThanOrEqual", System.TimeSpan.prototype.op_GreaterThanOrEqual, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("t1", System.TimeSpan, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("t2", System.TimeSpan, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.TimeSpan.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.TimeSpan.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$1", System.TimeSpan.prototype.$ctor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("ticks", System.Int64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$2", System.TimeSpan.prototype.$ctor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("hours", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minutes", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("seconds", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$3", System.TimeSpan.prototype.$ctor$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("days", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hours", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minutes", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("seconds", System.Int32, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor$4", System.TimeSpan.prototype.$ctor$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("days", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("hours", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("minutes", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("seconds", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("milliseconds", System.Int32, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Ticks", System.Int64, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Ticks", System.TimeSpan.prototype.get_Ticks, $arrayinit([], System.Reflection.ParameterInfo), System.Int64, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Days", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Days", System.TimeSpan.prototype.get_Days, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Hours", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Hours", System.TimeSpan.prototype.get_Hours, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Milliseconds", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Milliseconds", System.TimeSpan.prototype.get_Milliseconds, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Minutes", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Minutes", System.TimeSpan.prototype.get_Minutes, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Seconds", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Seconds", System.TimeSpan.prototype.get_Seconds, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TotalDays", System.Double, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalDays", System.TimeSpan.prototype.get_TotalDays, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TotalHours", System.Double, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalHours", System.TimeSpan.prototype.get_TotalHours, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TotalMilliseconds", System.Double, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalMilliseconds", System.TimeSpan.prototype.get_TotalMilliseconds, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TotalMinutes", System.Double, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalMinutes", System.TimeSpan.prototype.get_TotalMinutes, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("TotalSeconds", System.Double, System.Reflection.MethodInfo.prototype.$ctor.$new("get_TotalSeconds", System.TimeSpan.prototype.get_TotalSeconds, $arrayinit([], System.Reflection.ParameterInfo), System.Double, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
        $t.Zero = System.TimeSpan.prototype.$ctor$1.$new(0);
        $t.MaxValue = System.TimeSpan.prototype.$ctor$1.$new(System.Int64.MaxValue);
        $t.MinValue = System.TimeSpan.prototype.$ctor$1.$new(System.Int64.MinValue);
        $t.TicksPerMillisecond = 10000;
        $t.TicksPerSecond = 1E+07;
        $t.TicksPerMinute = 6E+08;
        $t.TicksPerHour = 3.6E+10;
        $t.TicksPerDay = 8.64E+11;
        $t.HoursPerDay = 24;
        $t.MinutesPerHour = 60;
        $t.SecondsPerMinute = 60;
        $t.MillisecondsPerSecond = 1000;
    };
    $p.$ctor$1 = function(ticks) {
        this.ticks = 0;
        System.TimeSpan.prototype.$ctor.call(this);
        this.ticks = ticks;
    };
    $p.$ctor$1.$type = $t;
    $p.$ctor$1.$new = function(ticks) {
        return new $p.$ctor$1.$type(this, ticks);
    };
    $p.$ctor$2 = function(hours, minutes, seconds) {
        this.ticks = 0;
        System.ValueType.prototype.$ctor.call(this);
        this.ticks = hours * System.TimeSpan().TicksPerHour + minutes * System.TimeSpan().TicksPerMinute + seconds * System.TimeSpan().TicksPerSecond;
    };
    $p.$ctor$2.$type = $t;
    $p.$ctor$2.$new = function(hours, minutes, seconds) {
        return new $p.$ctor$2.$type(
            this, 
            hours, 
            minutes, 
            seconds
        );
    };
    $p.$ctor$3 = function(days, hours, minutes, seconds) {
        this.ticks = 0;
        System.ValueType.prototype.$ctor.call(this);
        this.ticks = days * System.TimeSpan().TicksPerDay + hours * System.TimeSpan().TicksPerHour + minutes * System.TimeSpan().TicksPerMinute + seconds * System.TimeSpan().TicksPerSecond;
    };
    $p.$ctor$3.$type = $t;
    $p.$ctor$3.$new = function(days, hours, minutes, seconds) {
        return new $p.$ctor$3.$type(
            this, 
            days, 
            hours, 
            minutes, 
            seconds
        );
    };
    $p.$ctor$4 = function(days, hours, minutes, seconds, milliseconds) {
        this.ticks = 0;
        System.ValueType.prototype.$ctor.call(this);
        this.ticks = days * System.TimeSpan().TicksPerDay + hours * System.TimeSpan().TicksPerHour + minutes * System.TimeSpan().TicksPerMinute + seconds * System.TimeSpan().TicksPerSecond + milliseconds * System.TimeSpan().TicksPerMillisecond;
    };
    $p.$ctor$4.$type = $t;
    $p.$ctor$4.$new = function(days, hours, minutes, seconds, milliseconds) {
        return new $p.$ctor$4.$type(
            this, 
            days, 
            hours, 
            minutes, 
            seconds, 
            milliseconds
        );
    };
    $t.FromTicks = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new(value);
    };
    $t.FromSeconds = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new($trunc((value * System.TimeSpan().TicksPerSecond)));
    };
    $t.FromHours = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new($trunc((value * System.TimeSpan().TicksPerHour)));
    };
    $t.FromDays = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new($trunc((value * System.TimeSpan().TicksPerDay)));
    };
    $t.FromMilliseconds = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new($trunc((value * System.TimeSpan().TicksPerMillisecond)));
    };
    $t.FromMinutes = function(value) {
        return System.TimeSpan.prototype.$ctor$1.$new($trunc((value * System.TimeSpan().TicksPerMinute)));
    };
    $p.get_Ticks = function() {
        return this.ticks;
    };
    $p.get_Days = function() {
        return (this.ticks / System.TimeSpan().TicksPerDay);
    };
    $p.get_Hours = function() {
        return (this.ticks / System.TimeSpan().TicksPerDay % System.TimeSpan().HoursPerDay);
    };
    $p.get_Milliseconds = function() {
        return (this.ticks / System.TimeSpan().TicksPerMillisecond % System.TimeSpan().MillisecondsPerSecond);
    };
    $p.get_Minutes = function() {
        return (this.ticks / System.TimeSpan().TicksPerMinute % System.TimeSpan().MinutesPerHour);
    };
    $p.get_Seconds = function() {
        return (this.ticks / System.TimeSpan().TicksPerSecond % System.TimeSpan().SecondsPerMinute);
    };
    $p.get_TotalDays = function() {
        return $cast(System.Int64, this.ticks) / System.TimeSpan().TicksPerDay;
    };
    $p.get_TotalHours = function() {
        return $cast(System.Int64, this.ticks) / System.TimeSpan().TicksPerHour;
    };
    $p.get_TotalMilliseconds = function() {
        return $cast(System.Int64, this.ticks) / System.TimeSpan().TicksPerMillisecond;
    };
    $p.get_TotalMinutes = function() {
        return $cast(System.Int64, this.ticks) / System.TimeSpan().TicksPerMinute;
    };
    $p.get_TotalSeconds = function() {
        return $cast(System.Int64, this.ticks) * System.TimeSpan().TicksPerSecond;
    };
    $p.Add = function(ts) {
        var ticks = this.ticks + ts.ticks;
        return System.TimeSpan.prototype.$ctor$1.$new(ticks);
    };
    $p.Subtract = function(ts) {
        return System.TimeSpan.prototype.$ctor$1.$new(this.ticks - ts.ticks);
    };
    $p.GetHashCode = function() {
        return this.ticks ^ (this.ticks >> 32);
    };
    $t.Equals$3 = function(t1, t2) {
        return t1.ticks == t2.ticks;
    };
    $p.Equals$2 = function(obj) {
        return this.ticks == obj.ticks;
    };
    $p.Equals = function(value) {
        if (System.TimeSpan.$GetType().IsInstanceOfType(value))
            return this.ticks == ($cast(System.Object, value)).ticks;
        else
            return false;
    };
    $p.Duration = function() {
        return System.TimeSpan.prototype.$ctor$1.$new(this.ticks >= 0 ? this.ticks : -this.ticks);
    };
    $p.CompareTo = function(value) {
        var num = value.ticks;
        if (this.ticks > num)
            return 1;
        return this.ticks < num ? -1 : 0;
    };
    $p.CompareTo$1 = function(value) {
        if (value == null)
            return 1;
        if (!(System.TimeSpan.$GetType().IsInstanceOfType(value)))
            throw System.ArgumentException.prototype.$ctor$1.$new("Argument must be a TimeSpan").InternalInit(new Error());
        var num = ($cast(System.Object, value)).ticks;
        if (this.ticks > num)
            return 1;
        return this.ticks < num ? -1 : 0;
    };
    $t.Compare = function(t1, t2) {
        if (t1.ticks > t2.ticks)
            return 1;
        return t1.ticks < t2.ticks ? -1 : 0;
    };
    $t.op_UnaryNegation = function(t) {
        return System.TimeSpan.prototype.$ctor$1.$new(-t.ticks);
    };
    $t.op_Subtraction = function(t1, t2) {
        return t1.Subtract(t2);
    };
    $t.op_UnaryPlus = function(t) {
        return t;
    };
    $t.op_Addition = function(t1, t2) {
        return t1.Add(t2);
    };
    $t.op_Equality = function(t1, t2) {
        return t2 != null && t1.ticks == t2.ticks;
    };
    $t.op_Inequality = function(t1, t2) {
        return t2 != null && t1.ticks != t2.ticks;
    };
    $t.op_LessThan = function(t1, t2) {
        return t1.ticks < t2.ticks;
    };
    $t.op_LessThanOrEqual = function(t1, t2) {
        return t1.ticks <= t2.ticks;
    };
    $t.op_GreaterThan = function(t1, t2) {
        return t1.ticks > t2.ticks;
    };
    $t.op_GreaterThanOrEqual = function(t1, t2) {
        return t1.ticks >= t2.ticks;
    };
    $p.ToString = function() {
        var builder = System.Text.StringBuilder.prototype.$ctor.$new();
        if (this.get_Days() > 0)
            builder.Append$2($safeToString(this.get_Days()) + ".");
        if (this.get_Hours() < 10)
            builder.Append$2("0");
        builder.Append$1(this.get_Hours());
        if (this.get_Minutes() < 10)
            builder.Append$2("0");
        builder.Append$1(this.get_Minutes());
        if (this.get_Seconds() < 10)
            builder.Append$2("0");
        builder.Append$1(this.get_Seconds());
        if (this.get_Milliseconds() > 0) {
            builder.Append$2(".");
            if (this.get_Milliseconds() < 100)
                builder.Append$2("0");
            if (this.get_Milliseconds() < 10)
                builder.Append$2("0");
            builder.Append$1(this.get_Milliseconds());
        }
        var remainingTicks = this.get_Ticks() % System.TimeSpan().TicksPerMillisecond;
        if (remainingTicks > 0) {
            if (remainingTicks < 1000)
                builder.Append$2("0");
            if (remainingTicks < 100)
                builder.Append$2("0");
            if (remainingTicks < 10)
                builder.Append$2("0");
            builder.Append$1(remainingTicks);
        }
        return builder.ToString();
    };
}).call(null, System.TimeSpan, System.TimeSpan.prototype);
$mscorlib$AssemblyTypes.push(System.TimeSpan);
System.Tuple = $define("System.Tuple", System.Object);
(System.Tuple.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([(function() {var T1 = $definetypeparameter("T1", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$1, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$2, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$3, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);var T4 = $definetypeparameter("T4", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$4, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);var T4 = $definetypeparameter("T4", System.Object);var T5 = $definetypeparameter("T5", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$5, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);var T4 = $definetypeparameter("T4", System.Object);var T5 = $definetypeparameter("T5", System.Object);var T6 = $definetypeparameter("T6", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$6, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);var T4 = $definetypeparameter("T4", System.Object);var T5 = $definetypeparameter("T5", System.Object);var T6 = $definetypeparameter("T6", System.Object);var T7 = $definetypeparameter("T7", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$7, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), (function() {var T1 = $definetypeparameter("T1", System.Object);var T2 = $definetypeparameter("T2", System.Object);var T3 = $definetypeparameter("T3", System.Object);var T4 = $definetypeparameter("T4", System.Object);var T5 = $definetypeparameter("T5", System.Object);var T6 = $definetypeparameter("T6", System.Object);var T7 = $definetypeparameter("T7", System.Object);var T8 = $definetypeparameter("T8", System.Object);return System.Reflection.MethodInfo.prototype.$ctor.$new("Create", System.Tuple.prototype.Create$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item8", T8, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Tuple$8, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute));}).call(this), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h7", System.Int32, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CombineHashCodes", System.Tuple.prototype.CombineHashCodes$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("h1", System.Int32, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h2", System.Int32, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h3", System.Int32, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h4", System.Int32, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h5", System.Int32, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h6", System.Int32, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h7", System.Int32, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("h8", System.Int32, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.Create = function(T1, item1) {
        return System.Tuple$1$(T1).prototype.$ctor.$new(item1);
    };
    $t.Create$1 = function(T1, T2, item1, item2) {
        return System.Tuple$2$(T1, T2).prototype.$ctor.$new(item1, item2);
    };
    $t.Create$2 = function(T1, T2, T3, item1, item2, item3) {
        return System.Tuple$3$(T1, T2, T3).prototype.$ctor.$new(item1, item2, item3);
    };
    $t.Create$3 = function(T1, T2, T3, T4, item1, item2, item3, item4) {
        return System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4
        );
    };
    $t.Create$4 = function(T1, T2, T3, T4, T5, item1, item2, item3, item4, item5) {
        return System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5
        );
    };
    $t.Create$5 = function(T1, T2, T3, T4, T5, T6, item1, item2, item3, item4, item5, item6) {
        return System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6
        );
    };
    $t.Create$6 = function(T1, T2, T3, T4, T5, T6, T7, item1, item2, item3, item4, item5, item6, item7) {
        return System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7
        );
    };
    $t.Create$7 = function(T1, T2, T3, T4, T5, T6, T7, T8, item1, item2, item3, item4, item5, item6, item7, item8) {
        return System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            System.Tuple$1$(T8)
        ).prototype.$ctor.$new(
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7, 
            System.Tuple$1$(T8).prototype.$ctor.$new(item8)
        );
    };
    $t.CombineHashCodes = function(h1, h2) {
        return (h1 << 5) + h1 ^ h2;
    };
    $t.CombineHashCodes$1 = function(h1, h2, h3) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes(h1, h2), h3);
    };
    $t.CombineHashCodes$2 = function(h1, h2, h3, h4) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes(h1, h2), System.Tuple.CombineHashCodes(h3, h4));
    };
    $t.CombineHashCodes$3 = function(h1, h2, h3, h4, h5) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), h5);
    };
    $t.CombineHashCodes$4 = function(h1, h2, h3, h4, h5, h6) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes(h5, h6));
    };
    $t.CombineHashCodes$5 = function(h1, h2, h3, h4, h5, h6, h7) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes$1(h5, h6, h7));
    };
    $t.CombineHashCodes$6 = function(h1, h2, h3, h4, h5, h6, h7, h8) {
        return System.Tuple.CombineHashCodes(System.Tuple.CombineHashCodes$2(
            h1, 
            h2, 
            h3, 
            h4
        ), System.Tuple.CombineHashCodes$2(
            h5, 
            h6, 
            h7, 
            h8
        ));
    };
}).call(null, System.Tuple, System.Tuple.prototype);
$mscorlib$AssemblyTypes.push(System.Tuple);
System.Tuple$1 = $define("System.Tuple<T1>", System.Object);
(System.Tuple$1.$TypeInitializer = function($t, $p, T1) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`1";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`1", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$1, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$1.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$1.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$1.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$1.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$1.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$1.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$1.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$1.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$1.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$1.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$1.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$1.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$1.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$1.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$1, arguments)();
    };
    window.System.Tuple$1$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.System$ITuple$get_Size = function() {
        return 1;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1) {
        this.m_Item1 = $default(T1);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1) {
        return new $p.$ctor.$type(this, item1);
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$1$(T1), this)).System$Collections$IStructuralEquatable$Equals(obj, System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default());
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$1$(T1).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null)
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$1$(T1), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$1$(T1).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple != null)
            return comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
        throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$1$(T1), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$1$(T1), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$1$(T1), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1(this.m_Item1);
        sb.Append$2(")");
        return sb.ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$1, 
    System.Tuple$1.prototype, 
    $definetypeparameter("T1", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$1);
System.Tuple$2 = $define("System.Tuple<T1, T2>", System.Object);
(System.Tuple$2.$TypeInitializer = function($t, $p, T1, T2) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`2";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`2", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$2, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$2.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$2.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$2.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$2.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$2.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$2.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$2.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$2.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$2.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$2.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$2.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$2.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$2.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$2.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$2.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$2.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$2, arguments)();
    };
    window.System.Tuple$2$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.System$ITuple$get_Size = function() {
        return 2;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2) {
        return new $p.$ctor.$type(this, item1, item2);
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$2$(T1, T2), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$2$(T1, T2).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$2$(T1, T2), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$2$(T1, T2).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num != 0)
                return num;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$2$(T1, T2), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$2$(T1, T2), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$2$(T1, T2), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$2, 
    System.Tuple$2.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$2);
System.Tuple$3 = $define("System.Tuple<T1, T2, T3>", System.Object);
(System.Tuple$3.$TypeInitializer = function($t, $p, T1, T2, T3) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`3";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`3", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$3, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$3.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$3.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$3.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$3.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$3.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$3.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$3.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$3.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$3.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$3.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$3.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$3.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$3.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$3.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$3.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$3.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$3.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$3.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$3, arguments)();
    };
    window.System.Tuple$3$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.System$ITuple$get_Size = function() {
        return 3;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$3$(T1, T2, T3), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$3$(T1, T2, T3).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$3$(T1, T2, T3), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$3$(T1, T2, T3).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$3$(T1, T2, T3), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$3$(T1, T2, T3), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$3$(T1, T2, T3), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$3, 
    System.Tuple$3.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$3);
System.Tuple$4 = $define("System.Tuple<T1, T2, T3, T4>", System.Object);
(System.Tuple$4.$TypeInitializer = function($t, $p, T1, T2, T3, T4) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`4";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`4", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$4, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$4.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$4.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$4.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$4.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$4.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$4.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$4.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$4.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$4.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$4.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$4.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$4.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$4.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$4.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$4.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$4.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$4.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$4.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$4.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$4.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$4, arguments)();
    };
    window.System.Tuple$4$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.System$ITuple$get_Size = function() {
        return 4;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3, item4) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        this.m_Item4 = $default(T4);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$4$(
                T1, 
                T2, 
                T3, 
                T4
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$4$(
                T1, 
                T2, 
                T3, 
                T4
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$2(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$4$(
            T1, 
            T2, 
            T3, 
            T4
        ), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(T4, this.m_Item4));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$4, 
    System.Tuple$4.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$4);
System.Tuple$5 = $define("System.Tuple<T1, T2, T3, T4, T5>", System.Object);
(System.Tuple$5.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`5";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`5", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$5, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$5.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$5.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$5.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$5.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$5.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$5.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$5.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$5.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$5.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$5.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$5.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$5.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$5.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$5.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$5.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$5.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$5.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$5.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$5.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$5.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$5.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$5.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$5, arguments)();
    };
    window.System.Tuple$5$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.System$ITuple$get_Size = function() {
        return 5;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3, item4, item5) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        this.m_Item4 = $default(T4);
        this.m_Item5 = $default(T5);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$5$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3))) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4)))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$5$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$3(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$5$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5
        ), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(T4, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(T5, this.m_Item5));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$5, 
    System.Tuple$5.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$5);
System.Tuple$6 = $define("System.Tuple<T1, T2, T3, T4, T5, T6>", System.Object);
(System.Tuple$6.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`6";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`6", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$6, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$6.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$6.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$6.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$6.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$6.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$6.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$6.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$6.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$6.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$6.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$6.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$6.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$6.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$6.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$6.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$6.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$6.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$6.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$6.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$6.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$6.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$6.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$6.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$6.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$6, arguments)();
    };
    window.System.Tuple$6$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.System$ITuple$get_Size = function() {
        return 6;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3, item4, item5, item6) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        this.m_Item4 = $default(T4);
        this.m_Item5 = $default(T5);
        this.m_Item6 = $default(T6);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$6$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$6$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$4(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$6$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6
        ), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(T4, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(T5, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(T6, this.m_Item6));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$6, 
    System.Tuple$6.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$6);
System.Tuple$7 = $define("System.Tuple<T1, T2, T3, T4, T5, T6, T7>", System.Object);
(System.Tuple$7.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`7";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`7", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$7, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item7", T7, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$7.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$7.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$7.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$7.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$7.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$7.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$7.prototype.get_Item7, $arrayinit([], System.Reflection.ParameterInfo), T7, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$7.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$7.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$7.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$7.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$7.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$7.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$7.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$7.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$7.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$7.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$7.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$7.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$7.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$7.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$7.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$7.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$7.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item7", T7, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$7.prototype.get_Item7, $arrayinit([], System.Reflection.ParameterInfo), T7, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$7.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$7, arguments)();
    };
    window.System.Tuple$7$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.get_Item7 = function() {
        return this.m_Item7;
    };
    $p.System$ITuple$get_Size = function() {
        return 7;
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3, item4, item5, item6, item7) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        this.m_Item4 = $default(T4);
        this.m_Item5 = $default(T5);
        this.m_Item6 = $default(T6);
        this.m_Item7 = $default(T7);
        System.Object.prototype.$ctor.call(this);
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
        this.m_Item7 = item7;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6, item7) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$7$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(T7, this.m_Item7), $cast(T7, tuple.m_Item7));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$7$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            var num6 = comparer.System$Collections$IComparer$Compare($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6));
            if (num6 != 0)
                return num6;
            else
                return comparer.System$Collections$IComparer$Compare($cast(T7, this.m_Item7), $cast(T7, tuple.m_Item7));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        return System.Tuple.CombineHashCodes$5(
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
            comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7))
        );
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$7$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7
        ), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(T4, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(T5, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(T6, this.m_Item6));
        sb.Append$2(", ");
        sb.Append$1($cast(T7, this.m_Item7));
        sb.Append$2(")");
        return ($cast(System.Text.StringBuilder, sb)).ToString();
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$7, 
    System.Tuple$7.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$7);
System.Tuple$8 = $define("System.Tuple<T1, T2, T3, T4, T5, T6, T7, TRest>", System.Object);
(System.Tuple$8.$TypeInitializer = function($t, $p, T1, T2, T3, T4, T5, T6, T7, TRest) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Tuple`8";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Tuple", $arrayinit([], System.Attribute));this.$type.Init("System.Tuple`8", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Tuple$8, System.Object, $arrayinit([System.ITuple, System.IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item1", T1, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item2", T2, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item3", T3, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item4", T4, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item5", T5, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item6", T6, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Item7", T7, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("m_Rest", TRest, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Private.GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$8.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$8.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$8.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$8.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$8.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$8.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$8.prototype.get_Item7, $arrayinit([], System.Reflection.ParameterInfo), T7, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Rest", System.Tuple$8.prototype.get_Rest, $arrayinit([], System.Reflection.ParameterInfo), TRest, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$8.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Equals", System.Tuple$8.prototype.Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.Equals", System.Tuple$8.prototype.System$Collections$IStructuralEquatable$Equals, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.IComparable.CompareTo", System.Tuple$8.prototype.System$IComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("obj", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralComparable.CompareTo", System.Tuple$8.prototype.System$Collections$IStructuralComparable$CompareTo, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("other", System.Object, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IComparer, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.Tuple$8.prototype.GetHashCode, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.Collections.IStructuralEquatable.GetHashCode", System.Tuple$8.prototype.System$Collections$IStructuralEquatable$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.GetHashCode", System.Tuple$8.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Tuple$8.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.ToString", System.Tuple$8.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Tuple$8.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("item1", T1, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item2", T2, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item3", T3, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item4", T4, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item5", T5, 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item6", T6, 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("item7", T7, 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("rest", TRest, 7, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Item1", T1, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item1", System.Tuple$8.prototype.get_Item1, $arrayinit([], System.Reflection.ParameterInfo), T1, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item2", T2, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item2", System.Tuple$8.prototype.get_Item2, $arrayinit([], System.Reflection.ParameterInfo), T2, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item3", T3, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item3", System.Tuple$8.prototype.get_Item3, $arrayinit([], System.Reflection.ParameterInfo), T3, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item4", T4, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item4", System.Tuple$8.prototype.get_Item4, $arrayinit([], System.Reflection.ParameterInfo), T4, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item5", T5, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item5", System.Tuple$8.prototype.get_Item5, $arrayinit([], System.Reflection.ParameterInfo), T5, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item6", T6, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item6", System.Tuple$8.prototype.get_Item6, $arrayinit([], System.Reflection.ParameterInfo), T6, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Item7", T7, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Item7", System.Tuple$8.prototype.get_Item7, $arrayinit([], System.Reflection.ParameterInfo), T7, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Rest", TRest, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Rest", System.Tuple$8.prototype.get_Rest, $arrayinit([], System.Reflection.ParameterInfo), TRest, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("System.ITuple.Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("System.ITuple.get_Size", System.Tuple$8.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, true, true);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.$ = function() {
        return $generic.call(null, System.Tuple$8, arguments)();
    };
    window.System.Tuple$8$ = $t.$;
    $p.get_Item1 = function() {
        return this.m_Item1;
    };
    $p.get_Item2 = function() {
        return this.m_Item2;
    };
    $p.get_Item3 = function() {
        return this.m_Item3;
    };
    $p.get_Item4 = function() {
        return this.m_Item4;
    };
    $p.get_Item5 = function() {
        return this.m_Item5;
    };
    $p.get_Item6 = function() {
        return this.m_Item6;
    };
    $p.get_Item7 = function() {
        return this.m_Item7;
    };
    $p.get_Rest = function() {
        return this.m_Rest;
    };
    $p.System$ITuple$get_Size = function() {
        return 7 + ($cast(System.Object, $cast(TRest, this.m_Rest))).System$ITuple$get_Size();
    };
    $p.System$ITuple$get_Size = $p.System$ITuple$get_Size;
    $p.$ctor = function(item1, item2, item3, item4, item5, item6, item7, rest) {
        this.m_Item1 = $default(T1);
        this.m_Item2 = $default(T2);
        this.m_Item3 = $default(T3);
        this.m_Item4 = $default(T4);
        this.m_Item5 = $default(T5);
        this.m_Item6 = $default(T6);
        this.m_Item7 = $default(T7);
        this.m_Rest = $default(TRest);
        System.Object.prototype.$ctor.call(this);
        if (!(System.ITuple.$GetType().IsInstanceOfType($cast(TRest, rest))))
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleLastArgumentNotATuple").InternalInit(new Error());
        this.m_Item1 = item1;
        this.m_Item2 = item2;
        this.m_Item3 = item3;
        this.m_Item4 = item4;
        this.m_Item5 = item5;
        this.m_Item6 = item6;
        this.m_Item7 = item7;
        this.m_Rest = rest;
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(item1, item2, item3, item4, item5, item6, item7, rest) {
        return new $p.$ctor.$type(
            this, 
            item1, 
            item2, 
            item3, 
            item4, 
            item5, 
            item6, 
            item7, 
            rest
        );
    };
    $p.Equals = function(obj) {
        return ($cast(System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            TRest
        ), this)).System$Collections$IStructuralEquatable$Equals(obj, $cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$Equals = function(other, comparer) {
        if (other == null)
            return false;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$8$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7, 
                TRest
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null || !comparer.System$Collections$IEqualityComparer$Equals($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3))) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5)) || (!comparer.System$Collections$IEqualityComparer$Equals($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6)) || !comparer.System$Collections$IEqualityComparer$Equals($cast(T7, this.m_Item7), $cast(T7, tuple.m_Item7)))))
            return false;
        else
            return comparer.System$Collections$IEqualityComparer$Equals($cast(TRest, this.m_Rest), $cast(TRest, tuple.m_Rest));
    };
    $p.System$Collections$IStructuralEquatable$Equals = $p.System$Collections$IStructuralEquatable$Equals;
    $p.System$IComparable$CompareTo = function(obj) {
        return ($cast(System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            TRest
        ), this)).System$Collections$IStructuralComparable$CompareTo(obj, $cast(System.Collections.Generic.Comparer$1$(System.Object), System.Collections.Generic.Comparer$1$(System.Object).get_Default()));
    };
    $p.System$IComparable$CompareTo = $p.System$IComparable$CompareTo;
    $p.System$Collections$IStructuralComparable$CompareTo = function(other, comparer) {
        if (other == null)
            return 1;
        var tuple = (function() {
            var $as$ = other;
            if (!System.Type.prototype.IsInstanceOfType.call(System.Tuple$8$(
                T1, 
                T2, 
                T3, 
                T4, 
                T5, 
                T6, 
                T7, 
                TRest
            ).$GetType(), $as$))
                $as$ = null;
            return $as$;
        }).call(this);
        if (tuple == null) {
            throw System.ArgumentException.prototype.$ctor$1.$new("ArgumentException_TupleIncorrectType").InternalInit(new Error());
        }
        else {
            var num1 = comparer.System$Collections$IComparer$Compare($cast(T1, this.m_Item1), $cast(T1, tuple.m_Item1));
            if (num1 != 0)
                return num1;
            var num2 = comparer.System$Collections$IComparer$Compare($cast(T2, this.m_Item2), $cast(T2, tuple.m_Item2));
            if (num2 != 0)
                return num2;
            var num3 = comparer.System$Collections$IComparer$Compare($cast(T3, this.m_Item3), $cast(T3, tuple.m_Item3));
            if (num3 != 0)
                return num3;
            var num4 = comparer.System$Collections$IComparer$Compare($cast(T4, this.m_Item4), $cast(T4, tuple.m_Item4));
            if (num4 != 0)
                return num4;
            var num5 = comparer.System$Collections$IComparer$Compare($cast(T5, this.m_Item5), $cast(T5, tuple.m_Item5));
            if (num5 != 0)
                return num5;
            var num6 = comparer.System$Collections$IComparer$Compare($cast(T6, this.m_Item6), $cast(T6, tuple.m_Item6));
            if (num6 != 0)
                return num6;
            var num7 = comparer.System$Collections$IComparer$Compare($cast(T7, this.m_Item7), $cast(T7, tuple.m_Item7));
            if (num7 != 0)
                return num7;
            else
                return comparer.System$Collections$IComparer$Compare($cast(TRest, this.m_Rest), $cast(TRest, tuple.m_Rest));
        }
    };
    $p.System$Collections$IStructuralComparable$CompareTo = $p.System$Collections$IStructuralComparable$CompareTo;
    $p.GetHashCode = function() {
        return ($cast(System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            TRest
        ), this)).System$Collections$IStructuralEquatable$GetHashCode($cast(System.Collections.Generic.EqualityComparer$1$(System.Object), System.Collections.Generic.EqualityComparer$1$(System.Object).get_Default()));
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = function(comparer) {
        var tuple = $cast(System.Object, $cast(TRest, this.m_Rest));
        if (tuple.System$ITuple$get_Size() >= 8)
            return tuple.System$ITuple$GetHashCode(comparer);
        switch (8 - tuple.System$ITuple$get_Size()) {
            case 1:
                return System.Tuple.CombineHashCodes(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), tuple.System$ITuple$GetHashCode(comparer));
            case 2:
                return System.Tuple.CombineHashCodes$1(comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), tuple.System$ITuple$GetHashCode(comparer));
            case 3:
                return System.Tuple.CombineHashCodes$2(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 4:
                return System.Tuple.CombineHashCodes$3(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 5:
                return System.Tuple.CombineHashCodes$4(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 6:
                return System.Tuple.CombineHashCodes$5(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            case 7:
                return System.Tuple.CombineHashCodes$6(
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T1, this.m_Item1)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T2, this.m_Item2)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T3, this.m_Item3)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T4, this.m_Item4)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T5, this.m_Item5)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T6, this.m_Item6)), 
                    comparer.System$Collections$IEqualityComparer$GetHashCode($cast(T7, this.m_Item7)), 
                    tuple.System$ITuple$GetHashCode(comparer)
                );
            default:
                return -1;
        }
    };
    $p.System$Collections$IStructuralEquatable$GetHashCode = $p.System$Collections$IStructuralEquatable$GetHashCode;
    $p.System$ITuple$GetHashCode = function(comparer) {
        return ($cast(System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            TRest
        ), this)).System$Collections$IStructuralEquatable$GetHashCode(comparer);
    };
    $p.System$ITuple$GetHashCode = $p.System$ITuple$GetHashCode;
    $p.ToString = function() {
        var sb = System.Text.StringBuilder.prototype.$ctor.$new();
        sb.Append$2("(");
        return ($cast(System.Tuple$8$(
            T1, 
            T2, 
            T3, 
            T4, 
            T5, 
            T6, 
            T7, 
            TRest
        ), this)).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = function(sb) {
        sb.Append$1($cast(T1, this.m_Item1));
        sb.Append$2(", ");
        sb.Append$1($cast(T2, this.m_Item2));
        sb.Append$2(", ");
        sb.Append$1($cast(T3, this.m_Item3));
        sb.Append$2(", ");
        sb.Append$1($cast(T4, this.m_Item4));
        sb.Append$2(", ");
        sb.Append$1($cast(T5, this.m_Item5));
        sb.Append$2(", ");
        sb.Append$1($cast(T6, this.m_Item6));
        sb.Append$2(", ");
        sb.Append$1($cast(T7, this.m_Item7));
        sb.Append$2(", ");
        return ($cast(System.Object, $cast(TRest, this.m_Rest))).System$ITuple$ToString(sb);
    };
    $p.System$ITuple$ToString = $p.System$ITuple$ToString;
}).call(
    null, 
    System.Tuple$8, 
    System.Tuple$8.prototype, 
    $definetypeparameter("T1", System.Object), 
    $definetypeparameter("T2", System.Object), 
    $definetypeparameter("T3", System.Object), 
    $definetypeparameter("T4", System.Object), 
    $definetypeparameter("T5", System.Object), 
    $definetypeparameter("T6", System.Object), 
    $definetypeparameter("T7", System.Object), 
    $definetypeparameter("TRest", System.Object)
);
$mscorlib$AssemblyTypes.push(System.Tuple$8);
System.ITuple = $define("System.ITuple", System.Object);
(System.ITuple.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.ITuple";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("ITuple", $arrayinit([], System.Attribute));this.$type.Init("System.ITuple", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().NotPublic.GetValue() | System.Reflection.TypeAttributes().Interface.GetValue()).GetValue() | System.Reflection.TypeAttributes().Abstract.GetValue()), System.ITuple, null, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("get_Size", System.ITuple.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.ITuple.prototype.System$ITuple$ToString, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("sb", System.Text.StringBuilder, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetHashCode", System.ITuple.prototype.System$ITuple$GetHashCode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("comparer", System.Collections.IEqualityComparer, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("Size", System.Int32, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Size", System.ITuple.prototype.System$ITuple$get_Size, $arrayinit([], System.Reflection.ParameterInfo), System.Int32, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
    };
    $p.System$ITuple$get_Size = function() {};
    $p.System$ITuple$ToString = function(sb) {};
    $p.System$ITuple$GetHashCode = function(comparer) {};
}).call(null, System.ITuple, System.ITuple.prototype);
$mscorlib$AssemblyTypes.push(System.ITuple);
System.Type = $define("System.Type", System.Reflection.MemberInfo);
(System.Type.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Reflection.MemberInfo;
    $p.$typeName = "System.Type";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Type", $arrayinit([], System.Attribute));this.$type.Init("System.Type", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Type, System.Reflection.MemberInfo, $arrayinit([System.Reflection.ICustomAttributeProvider], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("EmptyTypes", $array(System.Type), System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DefaultBinder", System.Reflection.Binder, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().InitOnly.GetValue()), null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("$FullName$k__BackingField", String, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("interfaces", $array(Function), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typeArguments", $array(Function), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("fields", $array(System.Reflection.FieldInfo), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("methods", $array(System.Reflection.MethodInfo), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("constructors", $array(System.Reflection.ConstructorInfo), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("properties", $array(System.Reflection.PropertyInfo), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("events", $array(System.Reflection.EventInfo), System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("typeAttributes", System.Reflection.TypeAttributes, System.Reflection.FieldAttributes().Assembly, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isValueType", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isInterface", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isAbstract", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isPrimitive", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isGenericType", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isGenericTypeDefinition", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("isGenericParameter", System.Boolean, System.Reflection.FieldAttributes().Private, null, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new(".cctor", System.Type.prototype.$cctor, $arrayinit([], System.Reflection.ParameterInfo), System.Void, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Private.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Type.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_FullName", System.Type.prototype.set_FullName, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Type.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("CreateTypeParameter", System.Type.prototype.CreateTypeParameter, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fullName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("baseType", Function, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("Init", System.Type.prototype.Init, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("fullName", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeAttributes", System.Reflection.TypeAttributes, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("thisType", Function, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("baseType", Function, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("interfaces", $array(Function), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("typeArguments", $array(Function), 5, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("fields", $array(System.Reflection.FieldInfo), 6, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("methods", $array(System.Reflection.MethodInfo), 7, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("constructors", $array(System.Reflection.ConstructorInfo), 8, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("properties", $array(System.Reflection.PropertyInfo), 9, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("events", $array(System.Reflection.EventInfo), 10, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isValueType", System.Boolean, 11, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isPrimitive", System.Boolean, 12, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isGenericType", System.Boolean, 13, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("isGenericTypeDefinition", System.Boolean, 14, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("elementType", Function, 15, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("unconstructedType", Function, 16, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("_GetTypeFromInstance", System.Type.prototype._GetTypeFromInstance, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("instance", Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Assembly.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("_GetTypeFromTypeFunc", System.Type.prototype._GetTypeFromTypeFunc, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeFunction", Function, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetTypeFromHandle", System.Type.prototype.GetTypeFromHandle, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeHandle", System.RuntimeTypeHandle, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Type.prototype.get_BaseType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_Assembly", System.Type.prototype.get_Assembly, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetType", System.Type.prototype.GetType$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeName", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetElementType", System.Type.prototype.GetElementType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsAssignableFrom", System.Type.prototype.IsAssignableFrom, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("type", System.Type, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("IsInstanceOfType", System.Type.prototype.IsInstanceOfType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("o", System.Object, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetInterfaces", System.Type.prototype.GetInterfaces, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperties", System.Type.prototype.GetProperties, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.PropertyInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEvents", System.Type.prototype.GetEvents, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.EventInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethods", System.Type.prototype.GetMethods, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.MethodInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethodImpl", System.Type.prototype.GetMethodImpl, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Private, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod", System.Type.prototype.GetMethod$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod", System.Type.prototype.GetMethod$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetMethod", System.Type.prototype.GetMethod, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$6, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$5, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$4, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$3, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty$7, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 2, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Assembly, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetProperty", System.Type.prototype.GetProperty, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetPropertyImpl", System.Type.prototype.GetPropertyImpl, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("returnType", System.Type, 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 4, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 5, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.PropertyInfo, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructors", System.Type.prototype.GetConstructors, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.ConstructorInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetField", System.Type.prototype.GetField$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetField", System.Type.prototype.GetField, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.FieldInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFields", System.Type.prototype.GetFields, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Reflection.FieldInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetFields", System.Type.prototype.GetFields$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), $array(System.Reflection.FieldInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueType", System.Type.prototype.get_IsValueType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor", System.Type.prototype.GetConstructor$2, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor", System.Type.prototype.GetConstructor$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 3, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructor", System.Type.prototype.GetConstructor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetConstructorImpl", System.Type.prototype.GetConstructorImpl, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("bindingAttr", System.Reflection.BindingFlags, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("binder", System.Reflection.Binder, 1, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("callConvention", System.Reflection.CallingConventions, 2, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("types", $array(System.Type), 3, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("modifiers", $array(System.Reflection.ParameterModifier), 4, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.ConstructorInfo, System.Reflection.MethodAttributes().Family, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumValues", System.Type.prototype.GetEnumValues, $arrayinit([], System.Reflection.ParameterInfo), Array, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetEnumNames", System.Type.prototype.GetEnumNames, $arrayinit([], System.Reflection.ParameterInfo), $array(String), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeArrayType", System.Type.prototype.MakeArrayType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeArrayType", System.Type.prototype.MakeArrayType$1, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("rank", System.Int32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrimitive", System.Type.prototype.get_IsPrimitive, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Type.prototype.get_IsAbstract, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInterface", System.Type.prototype.get_IsInterface, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSealed", System.Type.prototype.get_IsSealed, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericType", System.Type.prototype.get_IsGenericType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericTypeDefinition", System.Type.prototype.GetGenericTypeDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("MakeGenericType", System.Type.prototype.MakeGenericType, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("typeArguments", $array(System.Type), 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_GenericTypeArguments", System.Type.prototype.get_GenericTypeArguments, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("GetGenericArguments", System.Type.prototype.GetGenericArguments, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericTypeDefinition", System.Type.prototype.get_IsGenericTypeDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("ToString", System.Type.prototype.ToString, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericParameter", System.Type.prototype.get_IsGenericParameter, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasElementType", System.Type.prototype.get_HasElementType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNested", System.Type.prototype.get_IsNested, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNestedPublic", System.Type.prototype.get_IsNestedPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVisible", System.Type.prototype.get_IsVisible, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Type.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Type.prototype.$ctor, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("name", String, 0, 0, null, $arrayinit([], System.Attribute)), System.Reflection.ParameterInfo.prototype.$ctor.$new("attributes", $array(System.Attribute), 1, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.PropertyInfo.prototype.$ctor.$new("FullName", String, System.Reflection.MethodInfo.prototype.$ctor.$new("get_FullName", System.Type.prototype.get_FullName, $arrayinit([], System.Reflection.ParameterInfo), String, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("set_FullName", System.Type.prototype.set_FullName, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("value", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), System.Void, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("MemberType", System.Reflection.MemberTypes, System.Reflection.MethodInfo.prototype.$ctor.$new("get_MemberType", System.Type.prototype.get_MemberType, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MemberTypes, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("BaseType", System.Type, System.Reflection.MethodInfo.prototype.$ctor.$new("get_BaseType", System.Type.prototype.get_BaseType, $arrayinit([], System.Reflection.ParameterInfo), System.Type, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("Assembly", System.Reflection.Assembly, System.Reflection.MethodInfo.prototype.$ctor.$new("get_Assembly", System.Type.prototype.get_Assembly, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.Assembly, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsValueType", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsValueType", System.Type.prototype.get_IsValueType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPrimitive", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPrimitive", System.Type.prototype.get_IsPrimitive, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsAbstract", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsAbstract", System.Type.prototype.get_IsAbstract, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsInterface", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsInterface", System.Type.prototype.get_IsInterface, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsSealed", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsSealed", System.Type.prototype.get_IsSealed, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericType", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericType", System.Type.prototype.get_IsGenericType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("GenericTypeArguments", $array(System.Type), System.Reflection.MethodInfo.prototype.$ctor.$new("get_GenericTypeArguments", System.Type.prototype.get_GenericTypeArguments, $arrayinit([], System.Reflection.ParameterInfo), $array(System.Type), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericTypeDefinition", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericTypeDefinition", System.Type.prototype.get_IsGenericTypeDefinition, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsGenericParameter", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsGenericParameter", System.Type.prototype.get_IsGenericParameter, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("HasElementType", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_HasElementType", System.Type.prototype.get_HasElementType, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsNested", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNested", System.Type.prototype.get_IsNested, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsNestedPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsNestedPublic", System.Type.prototype.get_IsNestedPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsVisible", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsVisible", System.Type.prototype.get_IsVisible, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute)), System.Reflection.PropertyInfo.prototype.$ctor.$new("IsPublic", System.Boolean, System.Reflection.MethodInfo.prototype.$ctor.$new("get_IsPublic", System.Type.prototype.get_IsPublic, $arrayinit([], System.Reflection.ParameterInfo), System.Boolean, System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute)), null, $arrayinit([], System.Reflection.ParameterInfo), $arrayinit([], System.Attribute))], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Reflection.MemberInfo.$StaticInitializer();
        $t.EmptyTypes = $arrayinit(new Array(0), System.Type);
        $t.DefaultBinder = System.Reflection.Binder.prototype.$ctor.$new();
    };
    $p.get_FullName = function() {return this.$FullName$k__BackingField;};
    $p.set_FullName = function(value) {this.$FullName$k__BackingField = value;return value;};
    $p.$ctor = function(name, attributes) {
        this.thisType = null;
        this.baseType = null;
        this.interfaces = null;
        this.typeArguments = null;
        this.fields = null;
        this.methods = null;
        this.constructors = null;
        this.properties = null;
        this.events = null;
        this.typeAttributes = 0;
        this.elementType = null;
        this.unconstructedType = null;
        this.isValueType = false;
        this.isInterface = false;
        this.isAbstract = false;
        this.isPrimitive = false;
        this.isGenericType = false;
        this.isGenericTypeDefinition = false;
        this.isGenericParameter = false;
        this.$FullName$k__BackingField = null;
        System.Reflection.MemberInfo.prototype.$ctor.call(this, name, attributes);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, attributes) {
        return new $p.$ctor.$type(this, name, attributes);
    };
    $p.get_MemberType = function() {
        return System.Reflection.MemberTypes().TypeInfo;
    };
    $t.CreateTypeParameter = function(fullName, baseType) {
        var type = System.Type.prototype.$ctor.$new(fullName, $arrayinit(new Array(0), System.Attribute));
        type.Init(
            fullName, 
            System.Reflection.TypeAttributes().Public, 
            null, 
            baseType, 
            $arrayinit(new Array(0), Function), 
            $arrayinit(new Array(0), Function), 
            $arrayinit(new Array(0), System.Reflection.FieldInfo), 
            $arrayinit(new Array(0), System.Reflection.MethodInfo), 
            $arrayinit(new Array(0), System.Reflection.ConstructorInfo), 
            $arrayinit(new Array(0), System.Reflection.PropertyInfo), 
            $arrayinit(new Array(0), System.Reflection.EventInfo), 
            false, 
            false, 
            false, 
            false, 
            null, 
            null
        );
        type.isGenericParameter = true;
        return type;
    };
    $p.Init = function(fullName, typeAttributes, thisType, baseType, interfaces, typeArguments, fields, methods, constructors, properties, events, isValueType, isPrimitive, isGenericType, isGenericTypeDefinition, elementType, unconstructedType) {
        this.set_FullName(fullName);
        this.typeAttributes = typeAttributes;
        this.thisType = thisType;
        this.baseType = baseType;
        this.interfaces = interfaces;
        this.typeArguments = typeArguments;
        this.fields = fields;
        this.methods = methods;
        this.constructors = constructors;
        this.properties = properties;
        this.events = events;
        this.isValueType = isValueType;
        this.isAbstract = this.isAbstract;
        this.isInterface = this.isInterface;
        this.isPrimitive = isPrimitive;
        this.isGenericType = isGenericType;
        this.isGenericTypeDefinition = isGenericTypeDefinition;
        this.elementType = elementType;
        this.unconstructedType = unconstructedType;
        {
            var $anon$1iterator = fields;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var field = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                field.declaringType = this;
            }
        }
        {
            var $anon$3iterator = methods;
            var $anon$4enumerator = $anon$3iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$4enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$4enumerator.System$Collections$IEnumerator$get_Current();
                method.declaringType = this;
            }
        }
        {
            var $anon$5iterator = properties;
            var $anon$6enumerator = $anon$5iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$6enumerator.System$Collections$IEnumerator$MoveNext()) {
                var property = $anon$6enumerator.System$Collections$IEnumerator$get_Current();
                property.declaringType = this;
            }
        }
        {
            var $anon$7iterator = constructors;
            var $anon$8enumerator = $anon$7iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$8enumerator.System$Collections$IEnumerator$MoveNext()) {
                var constructor = $anon$8enumerator.System$Collections$IEnumerator$get_Current();
                constructor.declaringType = this;
            }
        }
    };
    $t._GetTypeFromInstance = function(instance) {
        var typeFunction = instance["$type"];
        if (typeFunction == null) {
            var typeString = typeof instance;
            if (typeString == "string") {
                return System.Type.GetType$1("System.String");
            }
            if (typeString == "number") {
                return System.Type.GetType$1("System.Number");
            }
            if (typeString == "object") {
                return System.Type.GetType$1("System.Object");
            }
            if (typeString == "function") {
                return System.Type.GetType$1("System.Delegate");
            }
            else {
                throw System.Exception.prototype.$ctor.$new().InternalInit(new Error());
            }
        }
        else {
            return System.Type._GetTypeFromTypeFunc(typeFunction);
        }
    };
    $t._GetTypeFromTypeFunc = function(typeFunction) {
        if (typeFunction.$type == null)
            typeFunction.$CreateType();
        return typeFunction.$type;
    };
    $t.GetTypeFromHandle = function(typeHandle) {
        return null;
    };
    $p.get_BaseType = function() {
        if (this.baseType == null)
            return null;
        else
            return System.Type._GetTypeFromTypeFunc(this.baseType);
    };
    $p.get_Assembly = function() {
        return this.thisType.$GetAssembly();
    };
    $t.GetType$1 = function(typeName) {
        {
            var $anon$1iterator = System.AppDomain().get_CurrentDomain().GetAssemblies();
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var assembly = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                var result = assembly.GetType$1(typeName);
                if (result != null)
                    return result;
            }
        }
        return null;
    };
    $p.GetElementType = function() {
        return this.elementType == null ? null : System.Type._GetTypeFromTypeFunc(this.elementType);
    };
    $p.IsAssignableFrom = function(type) {
        if (type == Number.$GetType()) {
            if (this == System.Int32.$GetType() || this == System.Single.$GetType() || this == System.Int64.$GetType() || this == System.Byte.$GetType() || this == System.SByte.$GetType() || this == System.Int16.$GetType() || this == System.UInt16.$GetType() || this == System.UInt32.$GetType() || this == System.UInt64.$GetType() || this == System.Double.$GetType()) {
                return true;
            }
        }
        var current = type;
        while (current != null) {
            if (current == this)
                return true;
            current = current.get_BaseType();
        }
        {
            var $anon$1iterator = type.GetInterfaces();
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var item = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (item == this)
                    return true;
            }
        }
        return false;
    };
    $p.IsInstanceOfType = function(o) {
        if (o == null)
            return false;
        else
            return this.IsAssignableFrom(o.GetType());
    };
    $p.GetInterfaces = function() {
        return System.Linq.Enumerable.ToArray(System.Type, System.Linq.Enumerable.Select(
            Function, 
            System.Type, 
            this.interfaces, 
            $delegate(this, System.Func$2$(Function, System.Type), function(x) {
                return System.Type._GetTypeFromTypeFunc(x);
            })
        ));
    };
    $p.GetProperties = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.PropertyInfo, System.Linq.Enumerable.Where(System.Reflection.PropertyInfo, this.properties, $delegate(this, System.Func$2$(System.Reflection.PropertyInfo, System.Boolean), function(x) {
            return (x.GetGetMethod() != null && x.GetGetMethod().get_IsPublic()) || (x.GetSetMethod() != null && x.GetSetMethod().get_IsPublic());
        })));
    };
    $p.GetEvents = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.EventInfo, this.events);
    };
    $p.GetMethods = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.MethodInfo, this.methods);
    };
    $p.GetMethodImpl = function(name, bindingAttr, binder, callConvention, types, modifiers) {
        {
            var $anon$1iterator = this.methods;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (method.get_Name() != name)
                    continue;
                if ((System.Enum.InternalToObject(System.Reflection.BindingFlags, bindingAttr.GetValue() & System.Reflection.BindingFlags().NonPublic.GetValue())).GetValue() != System.Reflection.BindingFlags().NonPublic.GetValue() && !method.get_IsPublic())
                    continue;
                var parameters = method.GetParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return method;
            }
        }
        return null;
    };
    $p.GetMethod$2 = function(name, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetMethodImpl(
            name, 
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
            null, 
            System.Reflection.CallingConventions().Any, 
            types, 
            null
        );
    };
    $p.GetMethod$1 = function(name, bindingAttr) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetMethodImpl(
                name, 
                bindingAttr, 
                null, 
                System.Reflection.CallingConventions().Any, 
                null, 
                null
            );
    };
    $p.GetMethod = function(name) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetMethodImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                System.Reflection.CallingConventions().Any, 
                null, 
                null
            );
    };
    $p.GetProperty$6 = function(name, bindingAttr, binder, returnType, types, modifiers) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                binder, 
                returnType, 
                types, 
                modifiers
            );
    };
    $p.GetProperty$5 = function(name, returnType, types, modifiers) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                returnType, 
                types, 
                modifiers
            );
    };
    $p.GetProperty$1 = function(name, bindingAttr) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                null, 
                null, 
                null, 
                null
            );
    };
    $p.GetProperty$4 = function(name, returnType, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                returnType, 
                types, 
                null
            );
    };
    $p.GetProperty$3 = function(name, types) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                null, 
                types, 
                null
            );
    };
    $p.GetProperty$2 = function(name, returnType) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (returnType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("returnType").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                returnType, 
                null, 
                null
            );
    };
    $p.GetProperty$7 = function(name, bindingAttr, returnType) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        if (returnType == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("returnType").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                bindingAttr, 
                null, 
                returnType, 
                null, 
                null
            );
    };
    $p.GetProperty = function(name) {
        if (name == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("name").InternalInit(new Error());
        else
            return this.GetPropertyImpl(
                name, 
                System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
                null, 
                null, 
                null, 
                null
            );
    };
    $p.GetPropertyImpl = function(name, bindingAttr, binder, returnType, types, modifiers) {
        {
            var $anon$1iterator = this.properties;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var property = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                var anAccessor = property.get_GetMethod() || property.get_SetMethod();
                if (property.get_Name() != name)
                    continue;
                if ((System.Enum.InternalToObject(System.Reflection.BindingFlags, bindingAttr.GetValue() & System.Reflection.BindingFlags().NonPublic.GetValue())).GetValue() != System.Reflection.BindingFlags().NonPublic.GetValue() && !anAccessor.get_IsPublic())
                    continue;
                var parameters = property.GetIndexParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return property;
            }
        }
        return null;
    };
    $p.GetConstructors = function() {
        return System.Linq.Enumerable.ToArray(System.Reflection.ConstructorInfo, this.constructors);
    };
    $p.GetField$1 = function(name, bindingAttr) {
        {
            var $anon$1iterator = this.fields;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var field = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if (field.get_Name() != name)
                    continue;
                if ((System.Enum.InternalToObject(System.Reflection.BindingFlags, bindingAttr.GetValue() & System.Reflection.BindingFlags().NonPublic.GetValue())).GetValue() != System.Reflection.BindingFlags().NonPublic.GetValue() && !field.get_IsPublic())
                    continue;
                return field;
            }
        }
        return null;
    };
    $p.GetField = function(name) {
        return this.GetField$1(name, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()));
    };
    $p.GetFields = function() {
        return this.GetFields$1(System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Static.GetValue()).GetValue() | System.Reflection.BindingFlags().Public.GetValue()));
    };
    $p.GetFields$1 = function(bindingAttr) {
        return System.Linq.Enumerable.ToArray(System.Reflection.FieldInfo, this.fields);
    };
    $p.get_IsValueType = function() {
        return this.isValueType;
    };
    $p.GetConstructor$2 = function(bindingAttr, binder, callConvention, types, modifiers) {
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetConstructorImpl(
            bindingAttr, 
            binder, 
            callConvention, 
            types, 
            modifiers
        );
    };
    $p.GetConstructor$1 = function(bindingAttr, binder, types, modifiers) {
        if (types == null)
            throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        for (var index = 0; index < types.length; ++index) {
            if (types[index] == null)
                throw System.ArgumentNullException.prototype.$ctor.$new("types").InternalInit(new Error());
        }
        return this.GetConstructorImpl(
            bindingAttr, 
            binder, 
            System.Reflection.CallingConventions().Any, 
            types, 
            modifiers
        );
    };
    $p.GetConstructor = function(types) {
        return this.GetConstructor$1(
            System.Enum.InternalToObject(System.Reflection.BindingFlags, System.Reflection.BindingFlags().Instance.GetValue() | System.Reflection.BindingFlags().Public.GetValue()), 
            null, 
            types, 
            null
        );
    };
    $p.GetConstructorImpl = function(bindingAttr, binder, callConvention, types, modifiers) {
        {
            var $anon$1iterator = this.constructors;
            var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
            while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                var method = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                if ((System.Enum.InternalToObject(System.Reflection.BindingFlags, bindingAttr.GetValue() & System.Reflection.BindingFlags().NonPublic.GetValue())).GetValue() != System.Reflection.BindingFlags().NonPublic.GetValue() && !method.get_IsPublic())
                    continue;
                var parameters = method.GetParameters();
                if (types != null && types.length != parameters.length)
                    continue;
                if (types != null) {
                    var isValid = true;
                    for (var i = 0; i < types.length; i++) {
                        if (types[i] != parameters[i].get_ParameterType())
                            isValid = false;
                    }
                    if (!isValid)
                        continue;
                }
                return method;
            }
        }
        return null;
    };
    $p.GetEnumValues = function() {
        return System.Enum.GetEnumValues(this);
    };
    $p.GetEnumNames = function() {
        return System.Enum.GetNames(this);
    };
    $p.MakeArrayType = function() {
        return this.MakeArrayType$1(1);
    };
    $p.MakeArrayType$1 = function(rank) {
        if (rank > 1)
            throw System.InvalidOperationException.prototype.$ctor$1.$new("Rank must be 1").InternalInit(new Error());
        return System.Type._GetTypeFromTypeFunc($array(this.thisType));
    };
    $p.get_IsPrimitive = function() {
        return this.isPrimitive;
    };
    $p.get_IsAbstract = function() {
        return (System.Enum.InternalToObject(System.Reflection.TypeAttributes, this.typeAttributes.GetValue() & System.Reflection.TypeAttributes().Abstract.GetValue())).GetValue() != System.Reflection.TypeAttributes().NotPublic.GetValue();
    };
    $p.get_IsInterface = function() {
        return (System.Enum.InternalToObject(System.Reflection.TypeAttributes, this.typeAttributes.GetValue() & System.Reflection.TypeAttributes().ClassSemanticsMask.GetValue())).GetValue() == System.Reflection.TypeAttributes().ClassSemanticsMask.GetValue();
    };
    $p.get_IsSealed = function() {
        return (System.Enum.InternalToObject(System.Reflection.TypeAttributes, this.typeAttributes.GetValue() & System.Reflection.TypeAttributes().Sealed.GetValue())).GetValue() != System.Reflection.TypeAttributes().NotPublic.GetValue();
    };
    $p.get_IsGenericType = function() {
        return this.isGenericType;
    };
    $p.GetGenericTypeDefinition = function() {
        if (this.unconstructedType != null)
            return System.Type._GetTypeFromTypeFunc(this.unconstructedType);
        else
            throw System.NotSupportedException.prototype.$ctor$1.$new("This operation is only valid on generic types").InternalInit(new Error());
    };
    $p.MakeGenericType = function(typeArguments) {
        return System.Type._GetTypeFromTypeFunc($generic(this.thisType, System.Linq.Enumerable.ToArray(Function, System.Linq.Enumerable.Select(
            System.Type, 
            Function, 
            typeArguments, 
            $delegate(this, System.Func$2$(System.Type, Function), function(x) {
                return x.thisType;
            })
        ))));
    };
    $p.get_GenericTypeArguments = function() {
        if (this.get_IsGenericType() && !this.get_IsGenericTypeDefinition())
            return System.Linq.Enumerable.ToArray(System.Type, System.Linq.Enumerable.Select(
                Function, 
                System.Type, 
                this.typeArguments, 
                $delegate(this, System.Func$2$(Function, System.Type), function(x) {
                    return System.Type._GetTypeFromTypeFunc(x);
                })
            ));
        else
            return System.Type().EmptyTypes;
    };
    $p.GetGenericArguments = function() {
        return this.get_GenericTypeArguments();
    };
    $p.get_IsGenericTypeDefinition = function() {
        return this.isGenericTypeDefinition;
    };
    $p.ToString = function() {
        return "System.Type: " + this.get_FullName();
    };
    $p.get_IsGenericParameter = function() {
        return this.isGenericParameter;
    };
    $p.get_HasElementType = function() {
        return this.elementType != null;
    };
    $p.get_IsNested = function() {
        return this.get_DeclaringType() != null;
    };
    $p.get_IsNestedPublic = function() {
        return this.get_IsNested() && this.get_IsPublic();
    };
    $p.get_IsVisible = function() {
        if (this.get_IsGenericParameter())
            return true;
        if (this.get_HasElementType())
            return this.GetElementType().get_IsVisible();
        var type2;
        for (type2 = this; type2.get_IsNested(); type2 = type2.get_DeclaringType()) {
            if (!type2.get_IsNestedPublic())
                return false;
        }
        if (!type2.get_IsPublic())
            return false;
        if (this.get_IsGenericType() && !this.get_IsGenericTypeDefinition()) {
            {
                var $anon$1iterator = this.GetGenericArguments();
                var $anon$2enumerator = $anon$1iterator.System$Collections$IEnumerable$GetEnumerator();
                while ($anon$2enumerator.System$Collections$IEnumerator$MoveNext()) {
                    var type3 = $anon$2enumerator.System$Collections$IEnumerator$get_Current();
                    if (!type3.get_IsVisible())
                        return false;
                }
            }
        }
        return true;
    };
    $p.get_IsPublic = function() {
        return (System.Enum.InternalToObject(System.Reflection.TypeAttributes, this.typeAttributes.GetValue() & System.Reflection.TypeAttributes().VisibilityMask.GetValue())).GetValue() == System.Reflection.TypeAttributes().Public.GetValue();
    };
}).call(null, System.Type, System.Type.prototype);
$mscorlib$AssemblyTypes.push(System.Type);
System.TypeCode = $define("System.TypeCode", System.Enum);
(System.TypeCode.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Enum;
    $p.$typeName = "System.TypeCode";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("TypeCode", $arrayinit([], System.Attribute));this.$type.Init("System.TypeCode", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.TypeCode, System.Enum, $arrayinit([], System.Type), null, $arrayinit([System.Reflection.FieldInfo.prototype.$ctor.$new("Empty", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 0, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Object", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 1, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DBNull", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 2, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Boolean", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 3, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Char", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 4, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("SByte", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 5, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Byte", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 6, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Int16", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 7, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UInt16", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 8, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Int32", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 9, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UInt32", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 10, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Int64", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 11, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("UInt64", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 12, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Single", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 13, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Double", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 14, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("Decimal", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 15, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("DateTime", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 16, $arrayinit([], System.Attribute)), System.Reflection.FieldInfo.prototype.$ctor.$new("String", System.TypeCode, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Enum.InternalToObject(System.Reflection.FieldAttributes, System.Reflection.FieldAttributes().Public.GetValue() | System.Reflection.FieldAttributes().Static.GetValue()).GetValue() | System.Reflection.FieldAttributes().Literal.GetValue()), 18, $arrayinit([], System.Attribute))], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.TypeCode.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Enum.$StaticInitializer();
        $t.Empty = $p.$ctor.$new("Empty", 0);
        $t.Object = $p.$ctor.$new("Object", 1);
        $t.DBNull = $p.$ctor.$new("DBNull", 2);
        $t.Boolean = $p.$ctor.$new("Boolean", 3);
        $t.Char = $p.$ctor.$new("Char", 4);
        $t.SByte = $p.$ctor.$new("SByte", 5);
        $t.Byte = $p.$ctor.$new("Byte", 6);
        $t.Int16 = $p.$ctor.$new("Int16", 7);
        $t.UInt16 = $p.$ctor.$new("UInt16", 8);
        $t.Int32 = $p.$ctor.$new("Int32", 9);
        $t.UInt32 = $p.$ctor.$new("UInt32", 10);
        $t.Int64 = $p.$ctor.$new("Int64", 11);
        $t.UInt64 = $p.$ctor.$new("UInt64", 12);
        $t.Single = $p.$ctor.$new("Single", 13);
        $t.Double = $p.$ctor.$new("Double", 14);
        $t.Decimal = $p.$ctor.$new("Decimal", 15);
        $t.DateTime = $p.$ctor.$new("DateTime", 16);
        $t.String = $p.$ctor.$new("String", 18);
    };
    $p.$ctor = function(name, value) {
        System.Enum.prototype.$ctor.call(this, name, value);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function(name, value) {
        return new $p.$ctor.$type(this, name, value);
    };
}).call(null, System.TypeCode, System.TypeCode.prototype);
$mscorlib$AssemblyTypes.push(System.TypeCode);
System.UInt16 = $define("ushort", System.ValueType);
(System.UInt16.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt16";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt16", $arrayinit([], System.Attribute));this.$type.Init("System.UInt16", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.UInt16, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt16.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt16, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt16.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.op_Implicit = function(i) {
        return i;
    };
}).call(null, System.UInt16, System.UInt16.prototype);
$mscorlib$AssemblyTypes.push(System.UInt16);
System.UInt32 = $define("uint", System.ValueType);
(System.UInt32.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt32";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt32", $arrayinit([], System.Attribute));this.$type.Init("System.UInt32", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.UInt32, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt32.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt32, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt32.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.op_Implicit = function(i) {
        return i;
    };
}).call(null, System.UInt32, System.UInt32.prototype);
$mscorlib$AssemblyTypes.push(System.UInt32);
System.UInt64 = $define("ulong", System.ValueType);
(System.UInt64.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.UInt64";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("UInt64", $arrayinit([], System.Attribute));this.$type.Init("System.UInt64", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.UInt64, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("op_Implicit", System.UInt64.prototype.op_Implicit, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("i", System.UInt64, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), Number, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.UInt64.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, true, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
    $t.op_Implicit = function(i) {
        return i;
    };
}).call(null, System.UInt64, System.UInt64.prototype);
$mscorlib$AssemblyTypes.push(System.UInt64);
System.Void = $define("void", System.ValueType);
(System.Void.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.ValueType;
    $p.$typeName = "System.Void";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("Void", $arrayinit([], System.Attribute));this.$type.Init("System.Void", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Sealed.GetValue()), System.Void, System.ValueType, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([System.Reflection.ConstructorInfo.prototype.$ctor.$new("$ctor", System.Void.prototype.$ctor, $arrayinit([], System.Reflection.ParameterInfo), System.Reflection.MethodAttributes().Public, $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), true, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.ValueType.$StaticInitializer();
    };
    $p.$ctor = function() {
        System.ValueType.prototype.$ctor.call(this);
    };
    $p.$ctor.$type = $t;
    $p.$ctor.$new = function() {
        return new $p.$ctor.$type(this);
    };
}).call(null, System.Void, System.Void.prototype);
$mscorlib$AssemblyTypes.push(System.Void);
System.Web.HttpUtility = $define("System.Web.HttpUtility", System.Object);
(System.Web.HttpUtility.$TypeInitializer = function($t, $p) {
    $t.$GetAssembly = window.$mscorlib$GetAssembly;
    $p.$type = $t;
    $t.$baseType = System.Object;
    $p.$typeName = "System.Web.HttpUtility";
    $t.$typeName = $p.$typeName;
    $t.$GetType = function() {
        return System.Type._GetTypeFromTypeFunc(this);
    };
    $t.$CreateType = function() {this.$type = System.Type.prototype.$ctor.$new("HttpUtility", $arrayinit([], System.Attribute));this.$type.Init("System.Web.HttpUtility", System.Enum.InternalToObject(System.Reflection.TypeAttributes, System.Reflection.TypeAttributes().Public.GetValue() | System.Reflection.TypeAttributes().Class.GetValue()), System.Web.HttpUtility, System.Object, $arrayinit([], System.Type), null, $arrayinit([], System.Reflection.FieldInfo), $arrayinit([System.Reflection.MethodInfo.prototype.$ctor.$new("UrlEncode", System.Web.HttpUtility.prototype.UrlEncode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute)), System.Reflection.MethodInfo.prototype.$ctor.$new("UrlDecode", System.Web.HttpUtility.prototype.UrlDecode, $arrayinit([System.Reflection.ParameterInfo.prototype.$ctor.$new("s", String, 0, 0, null, $arrayinit([], System.Attribute))], System.Reflection.ParameterInfo), String, System.Enum.InternalToObject(System.Reflection.MethodAttributes, System.Reflection.MethodAttributes().Public.GetValue() | System.Reflection.MethodAttributes().Static.GetValue()), $arrayinit([], System.Attribute))], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.MethodInfo), $arrayinit([], System.Reflection.PropertyInfo), $arrayinit([], System.Reflection.EventInfo), false, false, false, false);return this.$type;};
    $t.$StaticInitializer = function() {
        if ($t.$isStaticInitialized)
            return;
        $t.$isStaticInitialized = true;
        System.Object.$StaticInitializer();
    };
    $t.UrlEncode = function(s) {
        return encodeURIComponent(s);
    };
    $t.UrlDecode = function(s) {
        return decodeURIComponent(s);
    };
}).call(null, System.Web.HttpUtility, System.Web.HttpUtility.prototype);
$mscorlib$AssemblyTypes.push(System.Web.HttpUtility);
